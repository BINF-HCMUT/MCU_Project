
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000436c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e0  080044e0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080044e0  080044e0  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044e0  080044e0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e0  080044e0  000144e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080044e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000008c  08004574  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004574  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012638  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b0f  00000000  00000000  000326ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00035200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  00035fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001885f  00000000  00000000  00036bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c1a  00000000  00000000  0004f44f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b00b  00000000  00000000  00060069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eb074  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003948  00000000  00000000  000eb0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004460 	.word	0x08004460

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08004460 	.word	0x08004460

0800014c <changeToM2>:



#include"M1_fsm.h"
#include"Pedestrian_Buzzer.h"
void changeToM2(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 0);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	481c      	ldr	r0, [pc, #112]	; (80001c8 <changeToM2+0x7c>)
 8000158:	f001 fc95 	bl	8001a86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 0);
 800015c:	2200      	movs	r2, #0
 800015e:	2108      	movs	r1, #8
 8000160:	481a      	ldr	r0, [pc, #104]	; (80001cc <changeToM2+0x80>)
 8000162:	f001 fc90 	bl	8001a86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 0);
 8000166:	2200      	movs	r2, #0
 8000168:	2120      	movs	r1, #32
 800016a:	4818      	ldr	r0, [pc, #96]	; (80001cc <changeToM2+0x80>)
 800016c:	f001 fc8b 	bl	8001a86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 0);
 8000170:	2200      	movs	r2, #0
 8000172:	2110      	movs	r1, #16
 8000174:	4815      	ldr	r0, [pc, #84]	; (80001cc <changeToM2+0x80>)
 8000176:	f001 fc86 	bl	8001a86 <HAL_GPIO_WritePin>

	// Turn off the Pedestrian led and Buzzer
	Pedes_press = 0;
 800017a:	4b15      	ldr	r3, [pc, #84]	; (80001d0 <changeToM2+0x84>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
	resetBuzzer();
 8000180:	f000 fb32 	bl	80007e8 <resetBuzzer>
	HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 0);
 8000184:	2200      	movs	r2, #0
 8000186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800018a:	4810      	ldr	r0, [pc, #64]	; (80001cc <changeToM2+0x80>)
 800018c:	f001 fc7b 	bl	8001a86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 0);
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000196:	480c      	ldr	r0, [pc, #48]	; (80001c8 <changeToM2+0x7c>)
 8000198:	f001 fc75 	bl	8001a86 <HAL_GPIO_WritePin>


	status = M2;
 800019c:	4b0d      	ldr	r3, [pc, #52]	; (80001d4 <changeToM2+0x88>)
 800019e:	2214      	movs	r2, #20
 80001a0:	601a      	str	r2, [r3, #0]
	count1 = 10;
 80001a2:	4b0d      	ldr	r3, [pc, #52]	; (80001d8 <changeToM2+0x8c>)
 80001a4:	220a      	movs	r2, #10
 80001a6:	601a      	str	r2, [r3, #0]
	count2 = 0;
 80001a8:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <changeToM2+0x90>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
	setTimer1(1000);	//Timer 1 to countdown the number display on 2 Led.
 80001ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b2:	f000 fe31 	bl	8000e18 <setTimer1>
	setTimer2(10000);	//Timer 2 is the quantity of time machine in mode 2 without increasing time.
 80001b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80001ba:	f000 fe47 	bl	8000e4c <setTimer2>
	setTimer3(250);		//Timer 3 to set RED Led blinky 2Hz
 80001be:	20fa      	movs	r0, #250	; 0xfa
 80001c0:	f000 fe5e 	bl	8000e80 <setTimer3>
}
 80001c4:	bf00      	nop
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	40010800 	.word	0x40010800
 80001cc:	40010c00 	.word	0x40010c00
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	200000a8 	.word	0x200000a8
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	200000b0 	.word	0x200000b0

080001e0 <M1_fsm_run>:

void M1_fsm_run(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	switch(status){
 80001e4:	4b9b      	ldr	r3, [pc, #620]	; (8000454 <M1_fsm_run+0x274>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b0e      	cmp	r3, #14
 80001ea:	f200 812f 	bhi.w	800044c <M1_fsm_run+0x26c>
 80001ee:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <M1_fsm_run+0x14>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	08000231 	.word	0x08000231
 80001f8:	0800044d 	.word	0x0800044d
 80001fc:	0800044d 	.word	0x0800044d
 8000200:	0800044d 	.word	0x0800044d
 8000204:	0800044d 	.word	0x0800044d
 8000208:	0800044d 	.word	0x0800044d
 800020c:	0800044d 	.word	0x0800044d
 8000210:	0800044d 	.word	0x0800044d
 8000214:	0800044d 	.word	0x0800044d
 8000218:	0800044d 	.word	0x0800044d
 800021c:	0800044d 	.word	0x0800044d
 8000220:	08000255 	.word	0x08000255
 8000224:	080002d3 	.word	0x080002d3
 8000228:	08000351 	.word	0x08000351
 800022c:	080003cf 	.word	0x080003cf
	case INIT:
		count1 = 25;
 8000230:	4b89      	ldr	r3, [pc, #548]	; (8000458 <M1_fsm_run+0x278>)
 8000232:	2219      	movs	r2, #25
 8000234:	601a      	str	r2, [r3, #0]
		count2 = 0;
 8000236:	4b89      	ldr	r3, [pc, #548]	; (800045c <M1_fsm_run+0x27c>)
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
		status = M1_RED_GREEN;
 800023c:	4b85      	ldr	r3, [pc, #532]	; (8000454 <M1_fsm_run+0x274>)
 800023e:	220b      	movs	r2, #11
 8000240:	601a      	str	r2, [r3, #0]
		setTimer1(1000);	//timer 1 to countdown the number display on LED
 8000242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000246:	f000 fde7 	bl	8000e18 <setTimer1>
		setTimer2(25000);	//timer 2 to perform 2 traffic light
 800024a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800024e:	f000 fdfd 	bl	8000e4c <setTimer2>
		break;
 8000252:	e0fc      	b.n	800044e <M1_fsm_run+0x26e>
	case M1_RED_GREEN:
		//TODO
		//Write pin for first traffic light:	RED
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 1);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025a:	4881      	ldr	r0, [pc, #516]	; (8000460 <M1_fsm_run+0x280>)
 800025c:	f001 fc13 	bl	8001a86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	2108      	movs	r1, #8
 8000264:	487f      	ldr	r0, [pc, #508]	; (8000464 <M1_fsm_run+0x284>)
 8000266:	f001 fc0e 	bl	8001a86 <HAL_GPIO_WritePin>

		//Write pin for second traffic light:	GREEN
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	2120      	movs	r1, #32
 800026e:	487d      	ldr	r0, [pc, #500]	; (8000464 <M1_fsm_run+0x284>)
 8000270:	f001 fc09 	bl	8001a86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 1);
 8000274:	2201      	movs	r2, #1
 8000276:	2110      	movs	r1, #16
 8000278:	487a      	ldr	r0, [pc, #488]	; (8000464 <M1_fsm_run+0x284>)
 800027a:	f001 fc04 	bl	8001a86 <HAL_GPIO_WritePin>


		if(timer1_flag == 1){
 800027e:	4b7a      	ldr	r3, [pc, #488]	; (8000468 <M1_fsm_run+0x288>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d108      	bne.n	8000298 <M1_fsm_run+0xb8>
			setTimer1(1000);
 8000286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800028a:	f000 fdc5 	bl	8000e18 <setTimer1>
			count1--;
 800028e:	4b72      	ldr	r3, [pc, #456]	; (8000458 <M1_fsm_run+0x278>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3b01      	subs	r3, #1
 8000294:	4a70      	ldr	r2, [pc, #448]	; (8000458 <M1_fsm_run+0x278>)
 8000296:	6013      	str	r3, [r2, #0]
		}

		if(timer2_flag == 1){
 8000298:	4b74      	ldr	r3, [pc, #464]	; (800046c <M1_fsm_run+0x28c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d10d      	bne.n	80002bc <M1_fsm_run+0xdc>
			status = M1_RED_YELLOW;
 80002a0:	4b6c      	ldr	r3, [pc, #432]	; (8000454 <M1_fsm_run+0x274>)
 80002a2:	220c      	movs	r2, #12
 80002a4:	601a      	str	r2, [r3, #0]
			count1 = 5;
 80002a6:	4b6c      	ldr	r3, [pc, #432]	; (8000458 <M1_fsm_run+0x278>)
 80002a8:	2205      	movs	r2, #5
 80002aa:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80002ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b0:	f000 fdb2 	bl	8000e18 <setTimer1>
			setTimer2(5000);
 80002b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80002b8:	f000 fdc8 	bl	8000e4c <setTimer2>
		}
		//Switch to Mode 2
		if(is_button_pressed(1)){
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 fb91 	bl	80009e4 <is_button_pressed>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <M1_fsm_run+0xec>
			changeToM2();
 80002c8:	f7ff ff40 	bl	800014c <changeToM2>
		}
		//check whether user increases time or not.
		check_button_add_time();
 80002cc:	f000 faae 	bl	800082c <check_button_add_time>
		break;
 80002d0:	e0bd      	b.n	800044e <M1_fsm_run+0x26e>
	case M1_RED_YELLOW:
		//TODO
		//Write pin for first traffic light:	RED
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 1);
 80002d2:	2201      	movs	r2, #1
 80002d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d8:	4861      	ldr	r0, [pc, #388]	; (8000460 <M1_fsm_run+0x280>)
 80002da:	f001 fbd4 	bl	8001a86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2108      	movs	r1, #8
 80002e2:	4860      	ldr	r0, [pc, #384]	; (8000464 <M1_fsm_run+0x284>)
 80002e4:	f001 fbcf 	bl	8001a86 <HAL_GPIO_WritePin>

		//Write pin for second traffic light:	YELLOW
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 1);
 80002e8:	2201      	movs	r2, #1
 80002ea:	2120      	movs	r1, #32
 80002ec:	485d      	ldr	r0, [pc, #372]	; (8000464 <M1_fsm_run+0x284>)
 80002ee:	f001 fbca 	bl	8001a86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 1);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2110      	movs	r1, #16
 80002f6:	485b      	ldr	r0, [pc, #364]	; (8000464 <M1_fsm_run+0x284>)
 80002f8:	f001 fbc5 	bl	8001a86 <HAL_GPIO_WritePin>


		if(timer1_flag == 1){
 80002fc:	4b5a      	ldr	r3, [pc, #360]	; (8000468 <M1_fsm_run+0x288>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d108      	bne.n	8000316 <M1_fsm_run+0x136>
			setTimer1(1000);
 8000304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000308:	f000 fd86 	bl	8000e18 <setTimer1>
			count1--;
 800030c:	4b52      	ldr	r3, [pc, #328]	; (8000458 <M1_fsm_run+0x278>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3b01      	subs	r3, #1
 8000312:	4a51      	ldr	r2, [pc, #324]	; (8000458 <M1_fsm_run+0x278>)
 8000314:	6013      	str	r3, [r2, #0]
		}

		if(timer2_flag == 1){
 8000316:	4b55      	ldr	r3, [pc, #340]	; (800046c <M1_fsm_run+0x28c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d10d      	bne.n	800033a <M1_fsm_run+0x15a>
			status = M1_GREEN_RED;
 800031e:	4b4d      	ldr	r3, [pc, #308]	; (8000454 <M1_fsm_run+0x274>)
 8000320:	220d      	movs	r2, #13
 8000322:	601a      	str	r2, [r3, #0]
			count1 = 25;
 8000324:	4b4c      	ldr	r3, [pc, #304]	; (8000458 <M1_fsm_run+0x278>)
 8000326:	2219      	movs	r2, #25
 8000328:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800032a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800032e:	f000 fd73 	bl	8000e18 <setTimer1>
			setTimer2(25000);
 8000332:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000336:	f000 fd89 	bl	8000e4c <setTimer2>
		}

		//Switch to Mode 2
		if(is_button_pressed(1)){
 800033a:	2001      	movs	r0, #1
 800033c:	f000 fb52 	bl	80009e4 <is_button_pressed>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <M1_fsm_run+0x16a>
			changeToM2();
 8000346:	f7ff ff01 	bl	800014c <changeToM2>
		}
		//check whether user increases time or not.
		check_button_add_time();
 800034a:	f000 fa6f 	bl	800082c <check_button_add_time>
		break;
 800034e:	e07e      	b.n	800044e <M1_fsm_run+0x26e>
	case M1_GREEN_RED:
		//TODO
		//Write pin for first traffic light:	GREEN
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000356:	4842      	ldr	r0, [pc, #264]	; (8000460 <M1_fsm_run+0x280>)
 8000358:	f001 fb95 	bl	8001a86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 1);
 800035c:	2201      	movs	r2, #1
 800035e:	2108      	movs	r1, #8
 8000360:	4840      	ldr	r0, [pc, #256]	; (8000464 <M1_fsm_run+0x284>)
 8000362:	f001 fb90 	bl	8001a86 <HAL_GPIO_WritePin>

		//Write pin for second traffic light:	RED
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 1);
 8000366:	2201      	movs	r2, #1
 8000368:	2120      	movs	r1, #32
 800036a:	483e      	ldr	r0, [pc, #248]	; (8000464 <M1_fsm_run+0x284>)
 800036c:	f001 fb8b 	bl	8001a86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 0);
 8000370:	2200      	movs	r2, #0
 8000372:	2110      	movs	r1, #16
 8000374:	483b      	ldr	r0, [pc, #236]	; (8000464 <M1_fsm_run+0x284>)
 8000376:	f001 fb86 	bl	8001a86 <HAL_GPIO_WritePin>


		if(timer1_flag == 1){
 800037a:	4b3b      	ldr	r3, [pc, #236]	; (8000468 <M1_fsm_run+0x288>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d108      	bne.n	8000394 <M1_fsm_run+0x1b4>
			setTimer1(1000);
 8000382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000386:	f000 fd47 	bl	8000e18 <setTimer1>
			count1--;
 800038a:	4b33      	ldr	r3, [pc, #204]	; (8000458 <M1_fsm_run+0x278>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3b01      	subs	r3, #1
 8000390:	4a31      	ldr	r2, [pc, #196]	; (8000458 <M1_fsm_run+0x278>)
 8000392:	6013      	str	r3, [r2, #0]
		}

		if(timer2_flag == 1){
 8000394:	4b35      	ldr	r3, [pc, #212]	; (800046c <M1_fsm_run+0x28c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d10d      	bne.n	80003b8 <M1_fsm_run+0x1d8>
			status = M1_YELLOW_RED;
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <M1_fsm_run+0x274>)
 800039e:	220e      	movs	r2, #14
 80003a0:	601a      	str	r2, [r3, #0]
			count1 = 5;
 80003a2:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <M1_fsm_run+0x278>)
 80003a4:	2205      	movs	r2, #5
 80003a6:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80003a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ac:	f000 fd34 	bl	8000e18 <setTimer1>
			setTimer2(5000);
 80003b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80003b4:	f000 fd4a 	bl	8000e4c <setTimer2>
		}

		//Switch to Mode 2
		if(is_button_pressed(1)){
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 fb13 	bl	80009e4 <is_button_pressed>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <M1_fsm_run+0x1e8>
			changeToM2();
 80003c4:	f7ff fec2 	bl	800014c <changeToM2>
		}
		//check whether user increases time or not.
		check_button_add_time();
 80003c8:	f000 fa30 	bl	800082c <check_button_add_time>
		break;
 80003cc:	e03f      	b.n	800044e <M1_fsm_run+0x26e>
	case M1_YELLOW_RED:
		//TODO
		//Write pin for first traffic light:	YELLOW
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 1);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d4:	4822      	ldr	r0, [pc, #136]	; (8000460 <M1_fsm_run+0x280>)
 80003d6:	f001 fb56 	bl	8001a86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 1);
 80003da:	2201      	movs	r2, #1
 80003dc:	2108      	movs	r1, #8
 80003de:	4821      	ldr	r0, [pc, #132]	; (8000464 <M1_fsm_run+0x284>)
 80003e0:	f001 fb51 	bl	8001a86 <HAL_GPIO_WritePin>

		//Write pin for second traffic light:	RED
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 1);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2120      	movs	r1, #32
 80003e8:	481e      	ldr	r0, [pc, #120]	; (8000464 <M1_fsm_run+0x284>)
 80003ea:	f001 fb4c 	bl	8001a86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2110      	movs	r1, #16
 80003f2:	481c      	ldr	r0, [pc, #112]	; (8000464 <M1_fsm_run+0x284>)
 80003f4:	f001 fb47 	bl	8001a86 <HAL_GPIO_WritePin>


		if(timer1_flag == 1){
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <M1_fsm_run+0x288>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d108      	bne.n	8000412 <M1_fsm_run+0x232>
			setTimer1(1000);
 8000400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000404:	f000 fd08 	bl	8000e18 <setTimer1>
			count1--;
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <M1_fsm_run+0x278>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3b01      	subs	r3, #1
 800040e:	4a12      	ldr	r2, [pc, #72]	; (8000458 <M1_fsm_run+0x278>)
 8000410:	6013      	str	r3, [r2, #0]
		}
		if(timer2_flag == 1){
 8000412:	4b16      	ldr	r3, [pc, #88]	; (800046c <M1_fsm_run+0x28c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d10d      	bne.n	8000436 <M1_fsm_run+0x256>
			status = M1_RED_GREEN;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <M1_fsm_run+0x274>)
 800041c:	220b      	movs	r2, #11
 800041e:	601a      	str	r2, [r3, #0]
			count1 = 25;
 8000420:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <M1_fsm_run+0x278>)
 8000422:	2219      	movs	r2, #25
 8000424:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800042a:	f000 fcf5 	bl	8000e18 <setTimer1>
			setTimer2(25000);
 800042e:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000432:	f000 fd0b 	bl	8000e4c <setTimer2>
		}

		//Switch to Mode 2
		if(is_button_pressed(1)){
 8000436:	2001      	movs	r0, #1
 8000438:	f000 fad4 	bl	80009e4 <is_button_pressed>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <M1_fsm_run+0x266>
			changeToM2();
 8000442:	f7ff fe83 	bl	800014c <changeToM2>
		}
		//check whether user increases time or not.
		check_button_add_time();
 8000446:	f000 f9f1 	bl	800082c <check_button_add_time>
		break;
 800044a:	e000      	b.n	800044e <M1_fsm_run+0x26e>
	default:
		break;
 800044c:	bf00      	nop
	}
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000a8 	.word	0x200000a8
 8000458:	200000ac 	.word	0x200000ac
 800045c:	200000b0 	.word	0x200000b0
 8000460:	40010800 	.word	0x40010800
 8000464:	40010c00 	.word	0x40010c00
 8000468:	200000c0 	.word	0x200000c0
 800046c:	200000c8 	.word	0x200000c8

08000470 <M2_fsm_run>:
 */


#include "M2_fsm.h"

void M2_fsm_run(){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	if(status == M2){
 8000474:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <M2_fsm_run+0xb4>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b14      	cmp	r3, #20
 800047a:	d151      	bne.n	8000520 <M2_fsm_run+0xb0>

		//Blinky RED Led in 2Hz
		if(timer3_flag == 1){
 800047c:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <M2_fsm_run+0xb8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d10b      	bne.n	800049c <M2_fsm_run+0x2c>
			//blinky all RED Led
			HAL_GPIO_TogglePin(A1_GPIO_Port, A1_Pin);
 8000484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000488:	4828      	ldr	r0, [pc, #160]	; (800052c <M2_fsm_run+0xbc>)
 800048a:	f001 fb14 	bl	8001ab6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(A2_GPIO_Port, A2_Pin);
 800048e:	2120      	movs	r1, #32
 8000490:	4827      	ldr	r0, [pc, #156]	; (8000530 <M2_fsm_run+0xc0>)
 8000492:	f001 fb10 	bl	8001ab6 <HAL_GPIO_TogglePin>
			setTimer3(250);
 8000496:	20fa      	movs	r0, #250	; 0xfa
 8000498:	f000 fcf2 	bl	8000e80 <setTimer3>
		}

		//count down the number display on 7-seg LED
		if(timer1_flag == 1){
 800049c:	4b25      	ldr	r3, [pc, #148]	; (8000534 <M2_fsm_run+0xc4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d108      	bne.n	80004b6 <M2_fsm_run+0x46>
			count1--;
 80004a4:	4b24      	ldr	r3, [pc, #144]	; (8000538 <M2_fsm_run+0xc8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	4a23      	ldr	r2, [pc, #140]	; (8000538 <M2_fsm_run+0xc8>)
 80004ac:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80004ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b2:	f000 fcb1 	bl	8000e18 <setTimer1>
		}

		//Switch to M3 mode
		if(is_button_pressed(1)||timer2_flag == 1){
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 fa94 	bl	80009e4 <is_button_pressed>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d103      	bne.n	80004ca <M2_fsm_run+0x5a>
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <M2_fsm_run+0xcc>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d128      	bne.n	800051c <M2_fsm_run+0xac>
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d0:	4816      	ldr	r0, [pc, #88]	; (800052c <M2_fsm_run+0xbc>)
 80004d2:	f001 fad8 	bl	8001a86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2108      	movs	r1, #8
 80004da:	4815      	ldr	r0, [pc, #84]	; (8000530 <M2_fsm_run+0xc0>)
 80004dc:	f001 fad3 	bl	8001a86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2120      	movs	r1, #32
 80004e4:	4812      	ldr	r0, [pc, #72]	; (8000530 <M2_fsm_run+0xc0>)
 80004e6:	f001 face 	bl	8001a86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2110      	movs	r1, #16
 80004ee:	4810      	ldr	r0, [pc, #64]	; (8000530 <M2_fsm_run+0xc0>)
 80004f0:	f001 fac9 	bl	8001a86 <HAL_GPIO_WritePin>
			status = M3;
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <M2_fsm_run+0xb4>)
 80004f6:	221e      	movs	r2, #30
 80004f8:	601a      	str	r2, [r3, #0]
			count1 = 10;
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <M2_fsm_run+0xc8>)
 80004fc:	220a      	movs	r2, #10
 80004fe:	601a      	str	r2, [r3, #0]
			count2 = 0;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <M2_fsm_run+0xd0>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
			setTimer1(1000);	//Timer 1 to countdown the number display on 2 Led.
 8000506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050a:	f000 fc85 	bl	8000e18 <setTimer1>
			setTimer2(10000);	//Timer 2 is the quantity of time machine in mode 2 without increasing time.
 800050e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000512:	f000 fc9b 	bl	8000e4c <setTimer2>
			setTimer3(250);		//Timer 3 to set RED Led blinky 2Hz
 8000516:	20fa      	movs	r0, #250	; 0xfa
 8000518:	f000 fcb2 	bl	8000e80 <setTimer3>
		}

		//check whether user increases time or not.
		check_button_add_time();
 800051c:	f000 f986 	bl	800082c <check_button_add_time>
	}
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200000a8 	.word	0x200000a8
 8000528:	200000d0 	.word	0x200000d0
 800052c:	40010800 	.word	0x40010800
 8000530:	40010c00 	.word	0x40010c00
 8000534:	200000c0 	.word	0x200000c0
 8000538:	200000ac 	.word	0x200000ac
 800053c:	200000c8 	.word	0x200000c8
 8000540:	200000b0 	.word	0x200000b0

08000544 <M3_fsm_run>:
 *      Author: admin
 */

#include "M3_fsm.h"

void M3_fsm_run(){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	if(status == M3){
 8000548:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <M3_fsm_run+0xc4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b1e      	cmp	r3, #30
 800054e:	d159      	bne.n	8000604 <M3_fsm_run+0xc0>

		//Blinky YELLOW Led in 2Hz
		if(timer3_flag == 1){
 8000550:	4b2e      	ldr	r3, [pc, #184]	; (800060c <M3_fsm_run+0xc8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d113      	bne.n	8000580 <M3_fsm_run+0x3c>
			//blinky all YELLOW Led
			HAL_GPIO_TogglePin(A1_GPIO_Port, A1_Pin);
 8000558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055c:	482c      	ldr	r0, [pc, #176]	; (8000610 <M3_fsm_run+0xcc>)
 800055e:	f001 faaa 	bl	8001ab6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(B1_GPIO_Port, B1_Pin);
 8000562:	2108      	movs	r1, #8
 8000564:	482b      	ldr	r0, [pc, #172]	; (8000614 <M3_fsm_run+0xd0>)
 8000566:	f001 faa6 	bl	8001ab6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(A2_GPIO_Port, A2_Pin);
 800056a:	2120      	movs	r1, #32
 800056c:	4829      	ldr	r0, [pc, #164]	; (8000614 <M3_fsm_run+0xd0>)
 800056e:	f001 faa2 	bl	8001ab6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(B2_GPIO_Port, B2_Pin);
 8000572:	2110      	movs	r1, #16
 8000574:	4827      	ldr	r0, [pc, #156]	; (8000614 <M3_fsm_run+0xd0>)
 8000576:	f001 fa9e 	bl	8001ab6 <HAL_GPIO_TogglePin>
			setTimer3(250);
 800057a:	20fa      	movs	r0, #250	; 0xfa
 800057c:	f000 fc80 	bl	8000e80 <setTimer3>
		}

		//count down the number display on 7-seg LED
		if(timer1_flag == 1){
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <M3_fsm_run+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d108      	bne.n	800059a <M3_fsm_run+0x56>
			count1--;
 8000588:	4b24      	ldr	r3, [pc, #144]	; (800061c <M3_fsm_run+0xd8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a23      	ldr	r2, [pc, #140]	; (800061c <M3_fsm_run+0xd8>)
 8000590:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000596:	f000 fc3f 	bl	8000e18 <setTimer1>
		}

		//Switch to M4 mode
		if(is_button_pressed(1)||timer2_flag == 1){
 800059a:	2001      	movs	r0, #1
 800059c:	f000 fa22 	bl	80009e4 <is_button_pressed>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d103      	bne.n	80005ae <M3_fsm_run+0x6a>
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <M3_fsm_run+0xdc>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d128      	bne.n	8000600 <M3_fsm_run+0xbc>
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b4:	4816      	ldr	r0, [pc, #88]	; (8000610 <M3_fsm_run+0xcc>)
 80005b6:	f001 fa66 	bl	8001a86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2108      	movs	r1, #8
 80005be:	4815      	ldr	r0, [pc, #84]	; (8000614 <M3_fsm_run+0xd0>)
 80005c0:	f001 fa61 	bl	8001a86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2120      	movs	r1, #32
 80005c8:	4812      	ldr	r0, [pc, #72]	; (8000614 <M3_fsm_run+0xd0>)
 80005ca:	f001 fa5c 	bl	8001a86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2110      	movs	r1, #16
 80005d2:	4810      	ldr	r0, [pc, #64]	; (8000614 <M3_fsm_run+0xd0>)
 80005d4:	f001 fa57 	bl	8001a86 <HAL_GPIO_WritePin>
			status = M4;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <M3_fsm_run+0xc4>)
 80005da:	2228      	movs	r2, #40	; 0x28
 80005dc:	601a      	str	r2, [r3, #0]
			count1 = 10;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <M3_fsm_run+0xd8>)
 80005e0:	220a      	movs	r2, #10
 80005e2:	601a      	str	r2, [r3, #0]
			count2 = 0;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <M3_fsm_run+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);	//Timer 1 to countdown the number display on 2 Led.
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fc13 	bl	8000e18 <setTimer1>
			setTimer2(10000);	//Timer 2 is the quantity of time machine in mode 2 without increasing time.
 80005f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80005f6:	f000 fc29 	bl	8000e4c <setTimer2>
			setTimer3(250);		//Timer 3 to set RED Led blinky 2Hz
 80005fa:	20fa      	movs	r0, #250	; 0xfa
 80005fc:	f000 fc40 	bl	8000e80 <setTimer3>
		}

		//check whether user increases time or not.
		check_button_add_time();
 8000600:	f000 f914 	bl	800082c <check_button_add_time>

	}
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000a8 	.word	0x200000a8
 800060c:	200000d0 	.word	0x200000d0
 8000610:	40010800 	.word	0x40010800
 8000614:	40010c00 	.word	0x40010c00
 8000618:	200000c0 	.word	0x200000c0
 800061c:	200000ac 	.word	0x200000ac
 8000620:	200000c8 	.word	0x200000c8
 8000624:	200000b0 	.word	0x200000b0

08000628 <M4_fsm_run>:
 */


#include "M4_fsm.h"

void M4_fsm_run(){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	if(status == M4){
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <M4_fsm_run+0x84>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b28      	cmp	r3, #40	; 0x28
 8000632:	d138      	bne.n	80006a6 <M4_fsm_run+0x7e>

		//Blinky RED Led in 2Hz
		if(timer3_flag == 1){
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <M4_fsm_run+0x88>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d10a      	bne.n	8000652 <M4_fsm_run+0x2a>
			//blinky all GREEN Led
			HAL_GPIO_TogglePin(B1_GPIO_Port, B1_Pin);
 800063c:	2108      	movs	r1, #8
 800063e:	481d      	ldr	r0, [pc, #116]	; (80006b4 <M4_fsm_run+0x8c>)
 8000640:	f001 fa39 	bl	8001ab6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(B2_GPIO_Port, B2_Pin);
 8000644:	2110      	movs	r1, #16
 8000646:	481b      	ldr	r0, [pc, #108]	; (80006b4 <M4_fsm_run+0x8c>)
 8000648:	f001 fa35 	bl	8001ab6 <HAL_GPIO_TogglePin>
			setTimer3(250);
 800064c:	20fa      	movs	r0, #250	; 0xfa
 800064e:	f000 fc17 	bl	8000e80 <setTimer3>
		}

		//count down the number display on 7-seg LED
		if(timer1_flag == 1){
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <M4_fsm_run+0x90>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d108      	bne.n	800066c <M4_fsm_run+0x44>
			count1--;
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <M4_fsm_run+0x94>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3b01      	subs	r3, #1
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <M4_fsm_run+0x94>)
 8000662:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000668:	f000 fbd6 	bl	8000e18 <setTimer1>
		}

		//Switch to M1 mode
		if(is_button_pressed(1)||timer2_flag == 1){
 800066c:	2001      	movs	r0, #1
 800066e:	f000 f9b9 	bl	80009e4 <is_button_pressed>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d103      	bne.n	8000680 <M4_fsm_run+0x58>
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <M4_fsm_run+0x98>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d110      	bne.n	80006a2 <M4_fsm_run+0x7a>
			status = M1_RED_GREEN;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <M4_fsm_run+0x84>)
 8000682:	220b      	movs	r2, #11
 8000684:	601a      	str	r2, [r3, #0]
			count1 = 25;
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <M4_fsm_run+0x94>)
 8000688:	2219      	movs	r2, #25
 800068a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);	//Timer 1 to countdown the number display on 2 Led.
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f000 fbc2 	bl	8000e18 <setTimer1>
			setTimer2(25000);	//Timer 2 is the quantity of time machine in mode 1
 8000694:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000698:	f000 fbd8 	bl	8000e4c <setTimer2>
			setTimer3(0);
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fbef 	bl	8000e80 <setTimer3>
		}

		//check whether user increases time or not.
		check_button_add_time();
 80006a2:	f000 f8c3 	bl	800082c <check_button_add_time>

	}
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000a8 	.word	0x200000a8
 80006b0:	200000d0 	.word	0x200000d0
 80006b4:	40010c00 	.word	0x40010c00
 80006b8:	200000c0 	.word	0x200000c0
 80006bc:	200000ac 	.word	0x200000ac
 80006c0:	200000c8 	.word	0x200000c8

080006c4 <check_press>:
 *
 *  Created on: Dec 1, 2022
 *      Author: admin
 */
#include"Pedestrian.h"
void check_press(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	if(is_button_pressed(0) && status < 20){
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 f98b 	bl	80009e4 <is_button_pressed>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00a      	beq.n	80006ea <check_press+0x26>
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <check_press+0x2c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b13      	cmp	r3, #19
 80006da:	dc06      	bgt.n	80006ea <check_press+0x26>
		setTimer4(60000);
 80006dc:	f64e 2060 	movw	r0, #60000	; 0xea60
 80006e0:	f000 fbe8 	bl	8000eb4 <setTimer4>
		Pedes_press = 1;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <check_press+0x30>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
	}
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000a8 	.word	0x200000a8
 80006f4:	200000b4 	.word	0x200000b4

080006f8 <Pedestrian_behavior>:
void Pedestrian_behavior(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	check_press();
 80006fc:	f7ff ffe2 	bl	80006c4 <check_press>
	if(Pedes_press == 1){
 8000700:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <Pedestrian_behavior+0xd8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d160      	bne.n	80007ca <Pedestrian_behavior+0xd2>
		switch (status) {
 8000708:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <Pedestrian_behavior+0xdc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3b0b      	subs	r3, #11
 800070e:	2b03      	cmp	r3, #3
 8000710:	d845      	bhi.n	800079e <Pedestrian_behavior+0xa6>
 8000712:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <Pedestrian_behavior+0x20>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000729 	.word	0x08000729
 800071c:	08000747 	.word	0x08000747
 8000720:	08000761 	.word	0x08000761
 8000724:	0800077b 	.word	0x0800077b
				case M1_RED_GREEN:
					resetBuzzer();
 8000728:	f000 f85e 	bl	80007e8 <resetBuzzer>
					HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000732:	4829      	ldr	r0, [pc, #164]	; (80007d8 <Pedestrian_behavior+0xe0>)
 8000734:	f001 f9a7 	bl	8001a86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073e:	4827      	ldr	r0, [pc, #156]	; (80007dc <Pedestrian_behavior+0xe4>)
 8000740:	f001 f9a1 	bl	8001a86 <HAL_GPIO_WritePin>
					break;
 8000744:	e02c      	b.n	80007a0 <Pedestrian_behavior+0xa8>

				case M1_RED_YELLOW:
					HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 1);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074c:	4822      	ldr	r0, [pc, #136]	; (80007d8 <Pedestrian_behavior+0xe0>)
 800074e:	f001 f99a 	bl	8001a86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000758:	4820      	ldr	r0, [pc, #128]	; (80007dc <Pedestrian_behavior+0xe4>)
 800075a:	f001 f994 	bl	8001a86 <HAL_GPIO_WritePin>
					break;
 800075e:	e01f      	b.n	80007a0 <Pedestrian_behavior+0xa8>

				case M1_GREEN_RED:
					HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000766:	481c      	ldr	r0, [pc, #112]	; (80007d8 <Pedestrian_behavior+0xe0>)
 8000768:	f001 f98d 	bl	8001a86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000772:	481a      	ldr	r0, [pc, #104]	; (80007dc <Pedestrian_behavior+0xe4>)
 8000774:	f001 f987 	bl	8001a86 <HAL_GPIO_WritePin>
					break;
 8000778:	e012      	b.n	80007a0 <Pedestrian_behavior+0xa8>

				case M1_YELLOW_RED:
					setBuzzer(count1);
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <Pedestrian_behavior+0xe8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f83e 	bl	8000800 <setBuzzer>
					HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 1);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078a:	4813      	ldr	r0, [pc, #76]	; (80007d8 <Pedestrian_behavior+0xe0>)
 800078c:	f001 f97b 	bl	8001a86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <Pedestrian_behavior+0xe4>)
 8000798:	f001 f975 	bl	8001a86 <HAL_GPIO_WritePin>
					break;
 800079c:	e000      	b.n	80007a0 <Pedestrian_behavior+0xa8>

				default:
					break;
 800079e:	bf00      	nop
			}
		if(timer4_flag == 1){
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <Pedestrian_behavior+0xec>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d110      	bne.n	80007ca <Pedestrian_behavior+0xd2>
			HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <Pedestrian_behavior+0xe0>)
 80007b0:	f001 f969 	bl	8001a86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ba:	4808      	ldr	r0, [pc, #32]	; (80007dc <Pedestrian_behavior+0xe4>)
 80007bc:	f001 f963 	bl	8001a86 <HAL_GPIO_WritePin>
			Pedes_press = 0;
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <Pedestrian_behavior+0xd8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
			resetBuzzer();
 80007c6:	f000 f80f 	bl	80007e8 <resetBuzzer>
		}
	}
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000b4 	.word	0x200000b4
 80007d4:	200000a8 	.word	0x200000a8
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	40010800 	.word	0x40010800
 80007e0:	200000ac 	.word	0x200000ac
 80007e4:	200000d8 	.word	0x200000d8

080007e8 <resetBuzzer>:
 *      Author: admin
 */


#include "Pedestrian_Buzzer.h"
void resetBuzzer(){
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <resetBuzzer+0x14>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	200000e8 	.word	0x200000e8

08000800 <setBuzzer>:

void setBuzzer(int number){
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	int value = 200*(5-number);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f1c3 0305 	rsb	r3, r3, #5
 800080e:	22c8      	movs	r2, #200	; 0xc8
 8000810:	fb02 f303 	mul.w	r3, r2, r3
 8000814:	60fb      	str	r3, [r7, #12]
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,value);
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <setBuzzer+0x28>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	200000e8 	.word	0x200000e8

0800082c <check_button_add_time>:
 */


#include "add_time.h"

void check_button_add_time(){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	if(is_button_pressed(2)){
 8000830:	2002      	movs	r0, #2
 8000832:	f000 f8d7 	bl	80009e4 <is_button_pressed>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d004      	beq.n	8000846 <check_button_add_time+0x1a>
		count2 += 100;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <check_button_add_time+0x54>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3364      	adds	r3, #100	; 0x64
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <check_button_add_time+0x54>)
 8000844:	6013      	str	r3, [r2, #0]
	}
	if(is_button_pressed(3)){
 8000846:	2003      	movs	r0, #3
 8000848:	f000 f8cc 	bl	80009e4 <is_button_pressed>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d014      	beq.n	800087c <check_button_add_time+0x50>
		adding_time(count2);
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <check_button_add_time+0x54>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fabc 	bl	8000dd4 <adding_time>
		count1 = count1 + count2/100;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <check_button_add_time+0x54>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a08      	ldr	r2, [pc, #32]	; (8000884 <check_button_add_time+0x58>)
 8000862:	fb82 1203 	smull	r1, r2, r2, r3
 8000866:	1152      	asrs	r2, r2, #5
 8000868:	17db      	asrs	r3, r3, #31
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <check_button_add_time+0x5c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4413      	add	r3, r2
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <check_button_add_time+0x5c>)
 8000874:	6013      	str	r3, [r2, #0]
		count2 = 0;
 8000876:	4b02      	ldr	r3, [pc, #8]	; (8000880 <check_button_add_time+0x54>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
	}
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000b0 	.word	0x200000b0
 8000884:	51eb851f 	.word	0x51eb851f
 8000888:	200000ac 	.word	0x200000ac

0800088c <button_reading>:
// we define a flag for a button pressed more than 1 second .
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS] = {0,0,0,0};
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS] = {DURATION_FOR_AUTO_DECREASING,DURATION_FOR_AUTO_DECREASING,DURATION_FOR_AUTO_DECREASING,DURATION_FOR_AUTO_DECREASING};
void button_reading (void) {
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000892:	2300      	movs	r3, #0
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	e08c      	b.n	80009b2 <button_reading+0x126>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4949      	ldr	r1, [pc, #292]	; (80009c4 <button_reading+0x138>)
 800089e:	5c89      	ldrb	r1, [r1, r2]
 80008a0:	4a49      	ldr	r2, [pc, #292]	; (80009c8 <button_reading+0x13c>)
 80008a2:	54d1      	strb	r1, [r2, r3]
		if( i == 0)	debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(PEDES_Button_GPIO_Port , PEDES_Button_Pin);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d108      	bne.n	80008bc <button_reading+0x30>
 80008aa:	79fc      	ldrb	r4, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4847      	ldr	r0, [pc, #284]	; (80009cc <button_reading+0x140>)
 80008b0:	f001 f8d2 	bl	8001a58 <HAL_GPIO_ReadPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <button_reading+0x138>)
 80008ba:	551a      	strb	r2, [r3, r4]
		if( i == 1)	debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port , Button1_Pin);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d108      	bne.n	80008d4 <button_reading+0x48>
 80008c2:	79fc      	ldrb	r4, [r7, #7]
 80008c4:	2102      	movs	r1, #2
 80008c6:	4841      	ldr	r0, [pc, #260]	; (80009cc <button_reading+0x140>)
 80008c8:	f001 f8c6 	bl	8001a58 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <button_reading+0x138>)
 80008d2:	551a      	strb	r2, [r3, r4]
		if( i == 2)	debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port , Button2_Pin);
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d108      	bne.n	80008ec <button_reading+0x60>
 80008da:	79fc      	ldrb	r4, [r7, #7]
 80008dc:	2110      	movs	r1, #16
 80008de:	483b      	ldr	r0, [pc, #236]	; (80009cc <button_reading+0x140>)
 80008e0:	f001 f8ba 	bl	8001a58 <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <button_reading+0x138>)
 80008ea:	551a      	strb	r2, [r3, r4]
		if( i == 3)	debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port , Button3_Pin);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d108      	bne.n	8000904 <button_reading+0x78>
 80008f2:	79fc      	ldrb	r4, [r7, #7]
 80008f4:	2101      	movs	r1, #1
 80008f6:	4836      	ldr	r0, [pc, #216]	; (80009d0 <button_reading+0x144>)
 80008f8:	f001 f8ae 	bl	8001a58 <HAL_GPIO_ReadPin>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <button_reading+0x138>)
 8000902:	551a      	strb	r2, [r3, r4]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <button_reading+0x138>)
 8000908:	5cd2      	ldrb	r2, [r2, r3]
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	492e      	ldr	r1, [pc, #184]	; (80009c8 <button_reading+0x13c>)
 800090e:	5ccb      	ldrb	r3, [r1, r3]
 8000910:	429a      	cmp	r2, r3
 8000912:	d14b      	bne.n	80009ac <button_reading+0x120>
			if(debounceButtonBuffer2[i] != debounceButtonBuffer3[i]){
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	4a2c      	ldr	r2, [pc, #176]	; (80009c8 <button_reading+0x13c>)
 8000918:	5cd2      	ldrb	r2, [r2, r3]
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	492d      	ldr	r1, [pc, #180]	; (80009d4 <button_reading+0x148>)
 800091e:	5ccb      	ldrb	r3, [r1, r3]
 8000920:	429a      	cmp	r2, r3
 8000922:	d014      	beq.n	800094e <button_reading+0xc2>
				debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	4927      	ldr	r1, [pc, #156]	; (80009c8 <button_reading+0x13c>)
 800092a:	5c89      	ldrb	r1, [r1, r2]
 800092c:	4a29      	ldr	r2, [pc, #164]	; (80009d4 <button_reading+0x148>)
 800092e:	54d1      	strb	r1, [r2, r3]
				if(debounceButtonBuffer3[i] == BUTTON_IS_PRESSED){
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4a28      	ldr	r2, [pc, #160]	; (80009d4 <button_reading+0x148>)
 8000934:	5cd3      	ldrb	r3, [r2, r3]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d138      	bne.n	80009ac <button_reading+0x120>
					buttonBuffer[i] = BUTTON_IS_PRESSED;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4a26      	ldr	r2, [pc, #152]	; (80009d8 <button_reading+0x14c>)
 800093e:	2100      	movs	r1, #0
 8000940:	54d1      	strb	r1, [r2, r3]
					counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a25      	ldr	r2, [pc, #148]	; (80009dc <button_reading+0x150>)
 8000946:	2164      	movs	r1, #100	; 0x64
 8000948:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800094c:	e02e      	b.n	80009ac <button_reading+0x120>
				}
			} else {
				counterForButtonPress1s[i]--;
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4a22      	ldr	r2, [pc, #136]	; (80009dc <button_reading+0x150>)
 8000952:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000956:	3a01      	subs	r2, #1
 8000958:	b291      	uxth	r1, r2
 800095a:	4a20      	ldr	r2, [pc, #128]	; (80009dc <button_reading+0x150>)
 800095c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] == 0){
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	4a1e      	ldr	r2, [pc, #120]	; (80009dc <button_reading+0x150>)
 8000964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d11f      	bne.n	80009ac <button_reading+0x120>
					if(debounceButtonBuffer3[i] == BUTTON_IS_PRESSED){
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <button_reading+0x148>)
 8000970:	5cd3      	ldrb	r3, [r2, r3]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10c      	bne.n	8000990 <button_reading+0x104>
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a18      	ldr	r2, [pc, #96]	; (80009dc <button_reading+0x150>)
 800097a:	2164      	movs	r1, #100	; 0x64
 800097c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <button_reading+0x14c>)
 8000984:	2101      	movs	r1, #1
 8000986:	54d1      	strb	r1, [r2, r3]
						flagForButtonPress1s[i] = 1;
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <button_reading+0x154>)
 800098c:	2101      	movs	r1, #1
 800098e:	54d1      	strb	r1, [r2, r3]
					}

					if(debounceButtonBuffer3[i] == BUTTON_IS_RELEASED){
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <button_reading+0x148>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d108      	bne.n	80009ac <button_reading+0x120>
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <button_reading+0x150>)
 800099e:	2164      	movs	r1, #100	; 0x64
 80009a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						flagForButtonPress1s[i] = 0;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <button_reading+0x154>)
 80009a8:	2100      	movs	r1, #0
 80009aa:	54d1      	strb	r1, [r2, r3]
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	3301      	adds	r3, #1
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	f67f af6f 	bls.w	8000898 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	20000004 	.word	0x20000004
 80009c8:	20000008 	.word	0x20000008
 80009cc:	40010800 	.word	0x40010800
 80009d0:	40010c00 	.word	0x40010c00
 80009d4:	2000000c 	.word	0x2000000c
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000010 	.word	0x20000010
 80009e0:	200000b8 	.word	0x200000b8

080009e4 <is_button_pressed>:

unsigned char is_button_pressed (uint8_t index ) {
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	d901      	bls.n	80009f8 <is_button_pressed+0x14>
 80009f4:	2300      	movs	r3, #0
 80009f6:	e00d      	b.n	8000a14 <is_button_pressed+0x30>
	GPIO_PinState new = buttonBuffer[index];
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4a09      	ldr	r2, [pc, #36]	; (8000a20 <is_button_pressed+0x3c>)
 80009fc:	5cd3      	ldrb	r3, [r2, r3]
 80009fe:	73fb      	strb	r3, [r7, #15]
	buttonBuffer[index] = BUTTON_IS_RELEASED;
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <is_button_pressed+0x3c>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	54d1      	strb	r1, [r2, r3]
	return (new == BUTTON_IS_PRESSED);
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf0c      	ite	eq
 8000a0e:	2301      	moveq	r3, #1
 8000a10:	2300      	movne	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000000 	.word	0x20000000

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a28:	f000 fc72 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2c:	f000 f820 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f000 f94c 	bl	8000ccc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a34:	f000 f85e 	bl	8000af4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a38:	f000 f8a8 	bl	8000b8c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000a3c:	f000 f91c 	bl	8000c78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2 ) ;
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <main+0x44>)
 8000a42:	f001 fcbb 	bl	80023bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a46:	2100      	movs	r1, #0
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <main+0x48>)
 8000a4a:	f001 fd61 	bl	8002510 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  M1_fsm_run();
 8000a4e:	f7ff fbc7 	bl	80001e0 <M1_fsm_run>
	  M2_fsm_run();
 8000a52:	f7ff fd0d 	bl	8000470 <M2_fsm_run>
	  M3_fsm_run();
 8000a56:	f7ff fd75 	bl	8000544 <M3_fsm_run>
	  M4_fsm_run();
 8000a5a:	f7ff fde5 	bl	8000628 <M4_fsm_run>
	  transmitdata();
 8000a5e:	f000 fbff 	bl	8001260 <transmitdata>
	  Pedestrian_behavior();
 8000a62:	f7ff fe49 	bl	80006f8 <Pedestrian_behavior>
	  M1_fsm_run();
 8000a66:	e7f2      	b.n	8000a4e <main+0x2a>
 8000a68:	20000130 	.word	0x20000130
 8000a6c:	200000e8 	.word	0x200000e8

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b090      	sub	sp, #64	; 0x40
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	2228      	movs	r2, #40	; 0x28
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f003 f8ac 	bl	8003bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a96:	2301      	movs	r3, #1
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000aa6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 f819 	bl	8001ae8 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000abc:	f000 f985 	bl	8000dca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fa84 	bl	8001fe8 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ae6:	f000 f970 	bl	8000dca <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3740      	adds	r7, #64	; 0x40
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b1a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b28:	224f      	movs	r2, #79	; 0x4f
 8000b2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b3a:	f001 fbef 	bl	800231c <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b44:	f000 f941 	bl	8000dca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	4619      	mov	r1, r3
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b56:	f001 ff43 	bl	80029e0 <HAL_TIM_ConfigClockSource>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b60:	f000 f933 	bl	8000dca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b72:	f002 fac1 	bl	80030f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b7c:	f000 f925 	bl	8000dca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000130 	.word	0x20000130

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <MX_TIM3_Init+0xe8>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bc4:	223f      	movs	r2, #63	; 0x3f
 8000bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bce:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000be2:	4823      	ldr	r0, [pc, #140]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000be4:	f001 fb9a 	bl	800231c <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bee:	f000 f8ec 	bl	8000dca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481c      	ldr	r0, [pc, #112]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c00:	f001 feee 	bl	80029e0 <HAL_TIM_ConfigClockSource>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c0a:	f000 f8de 	bl	8000dca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c0e:	4818      	ldr	r0, [pc, #96]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c10:	f001 fc26 	bl	8002460 <HAL_TIM_PWM_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c1a:	f000 f8d6 	bl	8000dca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c2e:	f002 fa63 	bl	80030f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c38:	f000 f8c7 	bl	8000dca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3c:	2360      	movs	r3, #96	; 0x60
 8000c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c54:	f001 fe06 	bl	8002864 <HAL_TIM_PWM_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c5e:	f000 f8b4 	bl	8000dca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c64:	f000 fa00 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000c68:	bf00      	nop
 8000c6a:	3738      	adds	r7, #56	; 0x38
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000e8 	.word	0x200000e8
 8000c74:	40000400 	.word	0x40000400

08000c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <MX_USART2_UART_Init+0x50>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	f002 fa92 	bl	80031d8 <HAL_UART_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cba:	f000 f886 	bl	8000dca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000178 	.word	0x20000178
 8000cc8:	40004400 	.word	0x40004400

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a2d      	ldr	r2, [pc, #180]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDES_R_Pin|B1_Pin|B2_Pin|A2_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d16:	4822      	ldr	r0, [pc, #136]	; (8000da0 <MX_GPIO_Init+0xd4>)
 8000d18:	f000 feb5 	bl	8001a86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDES_G_Pin|A1_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d22:	4820      	ldr	r0, [pc, #128]	; (8000da4 <MX_GPIO_Init+0xd8>)
 8000d24:	f000 feaf 	bl	8001a86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEDES_Button_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PEDES_Button_Pin|Button1_Pin|Button2_Pin;
 8000d28:	2313      	movs	r3, #19
 8000d2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4619      	mov	r1, r3
 8000d3a:	481a      	ldr	r0, [pc, #104]	; (8000da4 <MX_GPIO_Init+0xd8>)
 8000d3c:	f000 fd08 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8000d40:	2301      	movs	r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	4619      	mov	r1, r3
 8000d52:	4813      	ldr	r0, [pc, #76]	; (8000da0 <MX_GPIO_Init+0xd4>)
 8000d54:	f000 fcfc 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDES_R_Pin B1_Pin B2_Pin A2_Pin */
  GPIO_InitStruct.Pin = PEDES_R_Pin|B1_Pin|B2_Pin|A2_Pin;
 8000d58:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000d5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2302      	movs	r3, #2
 8000d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <MX_GPIO_Init+0xd4>)
 8000d72:	f000 fced 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDES_G_Pin A1_Pin */
  GPIO_InitStruct.Pin = PEDES_G_Pin|A1_Pin;
 8000d76:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2302      	movs	r3, #2
 8000d86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_GPIO_Init+0xd8>)
 8000d90:	f000 fcde 	bl	8001750 <HAL_GPIO_Init>

}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010c00 	.word	0x40010c00
 8000da4:	40010800 	.word	0x40010800

08000da8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db8:	d101      	bne.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8000dba:	f7ff fd67 	bl	800088c <button_reading>
	}
	timerRun();
 8000dbe:	f000 f893 	bl	8000ee8 <timerRun>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dce:	b672      	cpsid	i
}
 8000dd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <Error_Handler+0x8>

08000dd4 <adding_time>:
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;
int TIMER_CYCLE = 10;

void adding_time(int extra_time){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	if(timer2_counter > 0){
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <adding_time+0x3c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dd05      	ble.n	8000df0 <adding_time+0x1c>
		timer2_counter += extra_time;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <adding_time+0x3c>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <adding_time+0x3c>)
 8000dee:	6013      	str	r3, [r2, #0]
	}
	if(timer4_counter > 0){
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <adding_time+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dd05      	ble.n	8000e04 <adding_time+0x30>
		timer4_counter += extra_time;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <adding_time+0x40>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <adding_time+0x40>)
 8000e02:	6013      	str	r3, [r2, #0]
	}
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200000c4 	.word	0x200000c4
 8000e14:	200000d4 	.word	0x200000d4

08000e18 <setTimer1>:


void setTimer1(int duration){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <setTimer1+0x28>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2a:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <setTimer1+0x2c>)
 8000e2c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <setTimer1+0x30>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000018 	.word	0x20000018
 8000e44:	200000bc 	.word	0x200000bc
 8000e48:	200000c0 	.word	0x200000c0

08000e4c <setTimer2>:

void setTimer2(int duration){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <setTimer2+0x28>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e5e:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <setTimer2+0x2c>)
 8000e60:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <setTimer2+0x30>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000018 	.word	0x20000018
 8000e78:	200000c4 	.word	0x200000c4
 8000e7c:	200000c8 	.word	0x200000c8

08000e80 <setTimer3>:

void setTimer3(int duration){
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <setTimer3+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e92:	4a06      	ldr	r2, [pc, #24]	; (8000eac <setTimer3+0x2c>)
 8000e94:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <setTimer3+0x30>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000018 	.word	0x20000018
 8000eac:	200000cc 	.word	0x200000cc
 8000eb0:	200000d0 	.word	0x200000d0

08000eb4 <setTimer4>:
void setTimer4(int duration){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <setTimer4+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ec6:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <setTimer4+0x2c>)
 8000ec8:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <setTimer4+0x30>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000018 	.word	0x20000018
 8000ee0:	200000d4 	.word	0x200000d4
 8000ee4:	200000d8 	.word	0x200000d8

08000ee8 <timerRun>:
void timerRun(){
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <timerRun+0x8c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dd0b      	ble.n	8000f0c <timerRun+0x24>
		timer1_counter--;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <timerRun+0x8c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <timerRun+0x8c>)
 8000efc:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <timerRun+0x8c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <timerRun+0x24>
			timer1_flag = 1;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <timerRun+0x90>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <timerRun+0x94>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dd0b      	ble.n	8000f2c <timerRun+0x44>
		timer2_counter--;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <timerRun+0x94>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <timerRun+0x94>)
 8000f1c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <timerRun+0x94>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d102      	bne.n	8000f2c <timerRun+0x44>
			timer2_flag = 1;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <timerRun+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <timerRun+0x9c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dd0b      	ble.n	8000f4c <timerRun+0x64>
		timer3_counter--;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <timerRun+0x9c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <timerRun+0x9c>)
 8000f3c:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <timerRun+0x9c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <timerRun+0x64>
			timer3_flag = 1;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <timerRun+0xa0>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <timerRun+0xa4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dd0b      	ble.n	8000f6c <timerRun+0x84>
		timer4_counter--;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <timerRun+0xa4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <timerRun+0xa4>)
 8000f5c:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <timerRun+0xa4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <timerRun+0x84>
			timer4_flag = 1;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <timerRun+0xa8>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	200000bc 	.word	0x200000bc
 8000f78:	200000c0 	.word	0x200000c0
 8000f7c:	200000c4 	.word	0x200000c4
 8000f80:	200000c8 	.word	0x200000c8
 8000f84:	200000cc 	.word	0x200000cc
 8000f88:	200000d0 	.word	0x200000d0
 8000f8c:	200000d4 	.word	0x200000d4
 8000f90:	200000d8 	.word	0x200000d8

08000f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_MspInit+0x60>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_MspInit+0x60>)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000

08000ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001008:	d114      	bne.n	8001034 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	201c      	movs	r0, #28
 8001028:	f000 faab 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800102c:	201c      	movs	r0, #28
 800102e:	f000 fac4 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001032:	e010      	b.n	8001056 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_TIM_Base_MspInit+0x6c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10b      	bne.n	8001056 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	40000400 	.word	0x40000400

08001068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <HAL_TIM_MspPostInit+0x58>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d117      	bne.n	80010b8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_TIM_MspPostInit+0x5c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <HAL_TIM_MspPostInit+0x5c>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_TIM_MspPostInit+0x5c>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <HAL_TIM_MspPostInit+0x60>)
 80010b4:	f000 fb4c 	bl	8001750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40000400 	.word	0x40000400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010800 	.word	0x40010800

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <HAL_UART_MspInit+0x98>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d137      	bne.n	800115c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <HAL_UART_MspInit+0x9c>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <HAL_UART_MspInit+0x9c>)
 80010f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f6:	61d3      	str	r3, [r2, #28]
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <HAL_UART_MspInit+0x9c>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_UART_MspInit+0x9c>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a17      	ldr	r2, [pc, #92]	; (8001168 <HAL_UART_MspInit+0x9c>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_UART_MspInit+0x9c>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800111c:	2304      	movs	r3, #4
 800111e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	480f      	ldr	r0, [pc, #60]	; (800116c <HAL_UART_MspInit+0xa0>)
 8001130:	f000 fb0e 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001134:	2308      	movs	r3, #8
 8001136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	4809      	ldr	r0, [pc, #36]	; (800116c <HAL_UART_MspInit+0xa0>)
 8001148:	f000 fb02 	bl	8001750 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	2026      	movs	r0, #38	; 0x26
 8001152:	f000 fa16 	bl	8001582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001156:	2026      	movs	r0, #38	; 0x26
 8001158:	f000 fa2f 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40004400 	.word	0x40004400
 8001168:	40021000 	.word	0x40021000
 800116c:	40010800 	.word	0x40010800

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b6:	f000 f8f1 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <TIM2_IRQHandler+0x10>)
 80011c6:	f001 fa45 	bl	8002654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000130 	.word	0x20000130

080011d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <USART2_IRQHandler+0x10>)
 80011da:	f002 f8dd 	bl	8003398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000178 	.word	0x20000178

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f002 fcb6 	bl	8003b88 <__errno>
 800121c:	4603      	mov	r3, r0
 800121e:	220c      	movs	r2, #12
 8001220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20005000 	.word	0x20005000
 8001248:	00000400 	.word	0x00000400
 800124c:	200000dc 	.word	0x200000dc
 8001250:	20000208 	.word	0x20000208

08001254 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <transmitdata>:


#include "uart.h"
#include <stdio.h>
char str[50];
void transmitdata(){
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
	if(status == M1_RED_GREEN){
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <transmitdata+0x50>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b0b      	cmp	r3, #11
 800126a:	d110      	bne.n	800128e <transmitdata+0x2e>
		HAL_UART_Transmit(&huart2,(void*)str,sprintf(str,"!7SEG:%d#",count1+5),1000);
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <transmitdata+0x54>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	3305      	adds	r3, #5
 8001272:	461a      	mov	r2, r3
 8001274:	4910      	ldr	r1, [pc, #64]	; (80012b8 <transmitdata+0x58>)
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <transmitdata+0x5c>)
 8001278:	f002 fcb8 	bl	8003bec <siprintf>
 800127c:	4603      	mov	r3, r0
 800127e:	b29a      	uxth	r2, r3
 8001280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001284:	490d      	ldr	r1, [pc, #52]	; (80012bc <transmitdata+0x5c>)
 8001286:	480e      	ldr	r0, [pc, #56]	; (80012c0 <transmitdata+0x60>)
 8001288:	f001 fff3 	bl	8003272 <HAL_UART_Transmit>
	}
	else{
		HAL_UART_Transmit(&huart2,(void*)str,sprintf(str,"!7SEG:%d#",count1),1000);
	}
}
 800128c:	e00e      	b.n	80012ac <transmitdata+0x4c>
		HAL_UART_Transmit(&huart2,(void*)str,sprintf(str,"!7SEG:%d#",count1),1000);
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <transmitdata+0x54>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	4908      	ldr	r1, [pc, #32]	; (80012b8 <transmitdata+0x58>)
 8001296:	4809      	ldr	r0, [pc, #36]	; (80012bc <transmitdata+0x5c>)
 8001298:	f002 fca8 	bl	8003bec <siprintf>
 800129c:	4603      	mov	r3, r0
 800129e:	b29a      	uxth	r2, r3
 80012a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a4:	4905      	ldr	r1, [pc, #20]	; (80012bc <transmitdata+0x5c>)
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <transmitdata+0x60>)
 80012a8:	f001 ffe3 	bl	8003272 <HAL_UART_Transmit>
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200000a8 	.word	0x200000a8
 80012b4:	200000ac 	.word	0x200000ac
 80012b8:	08004478 	.word	0x08004478
 80012bc:	200001bc 	.word	0x200001bc
 80012c0:	20000178 	.word	0x20000178

080012c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	; (80012fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	; (8001308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ea:	f7ff ffb3 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f002 fc51 	bl	8003b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7ff fb97 	bl	8000a24 <main>
  bx lr
 80012f6:	4770      	bx	lr
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001300:	080044e8 	.word	0x080044e8
  ldr r2, =_sbss
 8001304:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001308:	20000204 	.word	0x20000204

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x28>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x28>)
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f923 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	200f      	movs	r0, #15
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fe32 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40022000 	.word	0x40022000

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 f93b 	bl	80015d6 <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 f903 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000001c 	.word	0x2000001c
 8001394:	20000024 	.word	0x20000024
 8001398:	20000020 	.word	0x20000020

0800139c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_IncTick+0x1c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_IncTick+0x20>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a03      	ldr	r2, [pc, #12]	; (80013bc <HAL_IncTick+0x20>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	20000024 	.word	0x20000024
 80013bc:	200001f0 	.word	0x200001f0

080013c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b02      	ldr	r3, [pc, #8]	; (80013d0 <HAL_GetTick+0x10>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	200001f0 	.word	0x200001f0

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4906      	ldr	r1, [pc, #24]	; (800146c <__NVIC_EnableIRQ+0x34>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff90 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff2d 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff42 	bl	800141c <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff90 	bl	80014c4 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5f 	bl	8001470 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff35 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b085      	sub	sp, #20
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001600:	2b02      	cmp	r3, #2
 8001602:	d008      	beq.n	8001616 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2204      	movs	r2, #4
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e020      	b.n	8001658 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 020e 	bic.w	r2, r2, #14
 8001624:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	2101      	movs	r1, #1
 8001640:	fa01 f202 	lsl.w	r2, r1, r2
 8001644:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001656:	7bfb      	ldrb	r3, [r7, #15]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
	...

08001664 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001676:	2b02      	cmp	r3, #2
 8001678:	d005      	beq.n	8001686 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2204      	movs	r2, #4
 800167e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	73fb      	strb	r3, [r7, #15]
 8001684:	e051      	b.n	800172a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 020e 	bic.w	r2, r2, #14
 8001694:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0201 	bic.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a22      	ldr	r2, [pc, #136]	; (8001734 <HAL_DMA_Abort_IT+0xd0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d029      	beq.n	8001704 <HAL_DMA_Abort_IT+0xa0>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a20      	ldr	r2, [pc, #128]	; (8001738 <HAL_DMA_Abort_IT+0xd4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d022      	beq.n	8001700 <HAL_DMA_Abort_IT+0x9c>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_DMA_Abort_IT+0xd8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d01a      	beq.n	80016fa <HAL_DMA_Abort_IT+0x96>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_DMA_Abort_IT+0xdc>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d012      	beq.n	80016f4 <HAL_DMA_Abort_IT+0x90>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1c      	ldr	r2, [pc, #112]	; (8001744 <HAL_DMA_Abort_IT+0xe0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d00a      	beq.n	80016ee <HAL_DMA_Abort_IT+0x8a>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_DMA_Abort_IT+0xe4>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d102      	bne.n	80016e8 <HAL_DMA_Abort_IT+0x84>
 80016e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016e6:	e00e      	b.n	8001706 <HAL_DMA_Abort_IT+0xa2>
 80016e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016ec:	e00b      	b.n	8001706 <HAL_DMA_Abort_IT+0xa2>
 80016ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f2:	e008      	b.n	8001706 <HAL_DMA_Abort_IT+0xa2>
 80016f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f8:	e005      	b.n	8001706 <HAL_DMA_Abort_IT+0xa2>
 80016fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fe:	e002      	b.n	8001706 <HAL_DMA_Abort_IT+0xa2>
 8001700:	2310      	movs	r3, #16
 8001702:	e000      	b.n	8001706 <HAL_DMA_Abort_IT+0xa2>
 8001704:	2301      	movs	r3, #1
 8001706:	4a11      	ldr	r2, [pc, #68]	; (800174c <HAL_DMA_Abort_IT+0xe8>)
 8001708:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
    } 
  }
  return status;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40020008 	.word	0x40020008
 8001738:	4002001c 	.word	0x4002001c
 800173c:	40020030 	.word	0x40020030
 8001740:	40020044 	.word	0x40020044
 8001744:	40020058 	.word	0x40020058
 8001748:	4002006c 	.word	0x4002006c
 800174c:	40020000 	.word	0x40020000

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b08b      	sub	sp, #44	; 0x2c
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	e169      	b.n	8001a38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001764:	2201      	movs	r2, #1
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	69fa      	ldr	r2, [r7, #28]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	429a      	cmp	r2, r3
 800177e:	f040 8158 	bne.w	8001a32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4a9a      	ldr	r2, [pc, #616]	; (80019f0 <HAL_GPIO_Init+0x2a0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d05e      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 800178c:	4a98      	ldr	r2, [pc, #608]	; (80019f0 <HAL_GPIO_Init+0x2a0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d875      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 8001792:	4a98      	ldr	r2, [pc, #608]	; (80019f4 <HAL_GPIO_Init+0x2a4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d058      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 8001798:	4a96      	ldr	r2, [pc, #600]	; (80019f4 <HAL_GPIO_Init+0x2a4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d86f      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 800179e:	4a96      	ldr	r2, [pc, #600]	; (80019f8 <HAL_GPIO_Init+0x2a8>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d052      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017a4:	4a94      	ldr	r2, [pc, #592]	; (80019f8 <HAL_GPIO_Init+0x2a8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d869      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017aa:	4a94      	ldr	r2, [pc, #592]	; (80019fc <HAL_GPIO_Init+0x2ac>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d04c      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017b0:	4a92      	ldr	r2, [pc, #584]	; (80019fc <HAL_GPIO_Init+0x2ac>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d863      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017b6:	4a92      	ldr	r2, [pc, #584]	; (8001a00 <HAL_GPIO_Init+0x2b0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d046      	beq.n	800184a <HAL_GPIO_Init+0xfa>
 80017bc:	4a90      	ldr	r2, [pc, #576]	; (8001a00 <HAL_GPIO_Init+0x2b0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d85d      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017c2:	2b12      	cmp	r3, #18
 80017c4:	d82a      	bhi.n	800181c <HAL_GPIO_Init+0xcc>
 80017c6:	2b12      	cmp	r3, #18
 80017c8:	d859      	bhi.n	800187e <HAL_GPIO_Init+0x12e>
 80017ca:	a201      	add	r2, pc, #4	; (adr r2, 80017d0 <HAL_GPIO_Init+0x80>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	0800184b 	.word	0x0800184b
 80017d4:	08001825 	.word	0x08001825
 80017d8:	08001837 	.word	0x08001837
 80017dc:	08001879 	.word	0x08001879
 80017e0:	0800187f 	.word	0x0800187f
 80017e4:	0800187f 	.word	0x0800187f
 80017e8:	0800187f 	.word	0x0800187f
 80017ec:	0800187f 	.word	0x0800187f
 80017f0:	0800187f 	.word	0x0800187f
 80017f4:	0800187f 	.word	0x0800187f
 80017f8:	0800187f 	.word	0x0800187f
 80017fc:	0800187f 	.word	0x0800187f
 8001800:	0800187f 	.word	0x0800187f
 8001804:	0800187f 	.word	0x0800187f
 8001808:	0800187f 	.word	0x0800187f
 800180c:	0800187f 	.word	0x0800187f
 8001810:	0800187f 	.word	0x0800187f
 8001814:	0800182d 	.word	0x0800182d
 8001818:	08001841 	.word	0x08001841
 800181c:	4a79      	ldr	r2, [pc, #484]	; (8001a04 <HAL_GPIO_Init+0x2b4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001822:	e02c      	b.n	800187e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	623b      	str	r3, [r7, #32]
          break;
 800182a:	e029      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	3304      	adds	r3, #4
 8001832:	623b      	str	r3, [r7, #32]
          break;
 8001834:	e024      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	3308      	adds	r3, #8
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e01f      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	330c      	adds	r3, #12
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e01a      	b.n	8001880 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001852:	2304      	movs	r3, #4
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e013      	b.n	8001880 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d105      	bne.n	800186c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001860:	2308      	movs	r3, #8
 8001862:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	611a      	str	r2, [r3, #16]
          break;
 800186a:	e009      	b.n	8001880 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800186c:	2308      	movs	r3, #8
 800186e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	615a      	str	r2, [r3, #20]
          break;
 8001876:	e003      	b.n	8001880 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
          break;
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x130>
          break;
 800187e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	; 0xff
 8001884:	d801      	bhi.n	800188a <HAL_GPIO_Init+0x13a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	e001      	b.n	800188e <HAL_GPIO_Init+0x13e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3304      	adds	r3, #4
 800188e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2bff      	cmp	r3, #255	; 0xff
 8001894:	d802      	bhi.n	800189c <HAL_GPIO_Init+0x14c>
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	e002      	b.n	80018a2 <HAL_GPIO_Init+0x152>
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3b08      	subs	r3, #8
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	210f      	movs	r1, #15
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	401a      	ands	r2, r3
 80018b4:	6a39      	ldr	r1, [r7, #32]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	431a      	orrs	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80b1 	beq.w	8001a32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018d0:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a4c      	ldr	r2, [pc, #304]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_GPIO_Init+0x2b8>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018e8:	4a48      	ldr	r2, [pc, #288]	; (8001a0c <HAL_GPIO_Init+0x2bc>)
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	220f      	movs	r2, #15
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4013      	ands	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a40      	ldr	r2, [pc, #256]	; (8001a10 <HAL_GPIO_Init+0x2c0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d013      	beq.n	800193c <HAL_GPIO_Init+0x1ec>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3f      	ldr	r2, [pc, #252]	; (8001a14 <HAL_GPIO_Init+0x2c4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00d      	beq.n	8001938 <HAL_GPIO_Init+0x1e8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a3e      	ldr	r2, [pc, #248]	; (8001a18 <HAL_GPIO_Init+0x2c8>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d007      	beq.n	8001934 <HAL_GPIO_Init+0x1e4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3d      	ldr	r2, [pc, #244]	; (8001a1c <HAL_GPIO_Init+0x2cc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d101      	bne.n	8001930 <HAL_GPIO_Init+0x1e0>
 800192c:	2303      	movs	r3, #3
 800192e:	e006      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001930:	2304      	movs	r3, #4
 8001932:	e004      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001934:	2302      	movs	r3, #2
 8001936:	e002      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_GPIO_Init+0x1ee>
 800193c:	2300      	movs	r3, #0
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	f002 0203 	and.w	r2, r2, #3
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	4093      	lsls	r3, r2
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800194e:	492f      	ldr	r1, [pc, #188]	; (8001a0c <HAL_GPIO_Init+0x2bc>)
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d006      	beq.n	8001976 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	492c      	ldr	r1, [pc, #176]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e006      	b.n	8001984 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	43db      	mvns	r3, r3
 800197e:	4928      	ldr	r1, [pc, #160]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001980:	4013      	ands	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d006      	beq.n	800199e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001990:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	4922      	ldr	r1, [pc, #136]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	491e      	ldr	r1, [pc, #120]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4918      	ldr	r1, [pc, #96]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4914      	ldr	r1, [pc, #80]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d021      	beq.n	8001a24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <HAL_GPIO_Init+0x2d0>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
 80019ec:	e021      	b.n	8001a32 <HAL_GPIO_Init+0x2e2>
 80019ee:	bf00      	nop
 80019f0:	10320000 	.word	0x10320000
 80019f4:	10310000 	.word	0x10310000
 80019f8:	10220000 	.word	0x10220000
 80019fc:	10210000 	.word	0x10210000
 8001a00:	10120000 	.word	0x10120000
 8001a04:	10110000 	.word	0x10110000
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40010800 	.word	0x40010800
 8001a14:	40010c00 	.word	0x40010c00
 8001a18:	40011000 	.word	0x40011000
 8001a1c:	40011400 	.word	0x40011400
 8001a20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_GPIO_Init+0x304>)
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	4909      	ldr	r1, [pc, #36]	; (8001a54 <HAL_GPIO_Init+0x304>)
 8001a2e:	4013      	ands	r3, r2
 8001a30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	3301      	adds	r3, #1
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f47f ae8e 	bne.w	8001764 <HAL_GPIO_Init+0x14>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	372c      	adds	r7, #44	; 0x2c
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
 8001a74:	e001      	b.n	8001a7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	807b      	strh	r3, [r7, #2]
 8001a92:	4613      	mov	r3, r2
 8001a94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a96:	787b      	ldrb	r3, [r7, #1]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aa2:	e003      	b.n	8001aac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	041a      	lsls	r2, r3, #16
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	611a      	str	r2, [r3, #16]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ac8:	887a      	ldrh	r2, [r7, #2]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4013      	ands	r3, r2
 8001ace:	041a      	lsls	r2, r3, #16
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43d9      	mvns	r1, r3
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	400b      	ands	r3, r1
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	611a      	str	r2, [r3, #16]
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e26c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8087 	beq.w	8001c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b08:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d00c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b14:	4b8f      	ldr	r3, [pc, #572]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d112      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
 8001b20:	4b8c      	ldr	r3, [pc, #560]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d10b      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2e:	4b89      	ldr	r3, [pc, #548]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d06c      	beq.n	8001c14 <HAL_RCC_OscConfig+0x12c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d168      	bne.n	8001c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e246      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x76>
 8001b50:	4b80      	ldr	r3, [pc, #512]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a7f      	ldr	r2, [pc, #508]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e02e      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x98>
 8001b66:	4b7b      	ldr	r3, [pc, #492]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a7a      	ldr	r2, [pc, #488]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b78      	ldr	r3, [pc, #480]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a77      	ldr	r2, [pc, #476]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e01d      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xbc>
 8001b8a:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a71      	ldr	r2, [pc, #452]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6e      	ldr	r2, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001ba4:	4b6b      	ldr	r3, [pc, #428]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a6a      	ldr	r2, [pc, #424]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a67      	ldr	r2, [pc, #412]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fbfc 	bl	80013c0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fbf8 	bl	80013c0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1fa      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe4>
 8001bea:	e014      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fbe8 	bl	80013c0 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fbe4 	bl	80013c0 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e1e6      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x10c>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d063      	beq.n	8001cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d11c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x18c>
 8001c3a:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d116      	bne.n	8001c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <HAL_RCC_OscConfig+0x176>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e1ba      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4939      	ldr	r1, [pc, #228]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	e03a      	b.n	8001cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c7c:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fb9d 	bl	80013c0 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fb99 	bl	80013c0 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e19b      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4927      	ldr	r1, [pc, #156]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e015      	b.n	8001cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fb7c 	bl	80013c0 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fb78 	bl	80013c0 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e17a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d03a      	beq.n	8001d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d019      	beq.n	8001d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7ff fb5c 	bl	80013c0 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fb58 	bl	80013c0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e15a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f000 fad8 	bl	80022e0 <RCC_Delay>
 8001d30:	e01c      	b.n	8001d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7ff fb42 	bl	80013c0 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3e:	e00f      	b.n	8001d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d40:	f7ff fb3e 	bl	80013c0 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d908      	bls.n	8001d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e140      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	42420000 	.word	0x42420000
 8001d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	4b9e      	ldr	r3, [pc, #632]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e9      	bne.n	8001d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a6 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b97      	ldr	r3, [pc, #604]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b94      	ldr	r3, [pc, #592]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a93      	ldr	r2, [pc, #588]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b91      	ldr	r3, [pc, #580]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da6:	4b8e      	ldr	r3, [pc, #568]	; (8001fe0 <HAL_RCC_OscConfig+0x4f8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d118      	bne.n	8001de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	4b8b      	ldr	r3, [pc, #556]	; (8001fe0 <HAL_RCC_OscConfig+0x4f8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a8a      	ldr	r2, [pc, #552]	; (8001fe0 <HAL_RCC_OscConfig+0x4f8>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff faff 	bl	80013c0 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc6:	f7ff fafb 	bl	80013c0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b64      	cmp	r3, #100	; 0x64
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0fd      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	4b81      	ldr	r3, [pc, #516]	; (8001fe0 <HAL_RCC_OscConfig+0x4f8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x312>
 8001dec:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a7a      	ldr	r2, [pc, #488]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	e02d      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x334>
 8001e02:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a75      	ldr	r2, [pc, #468]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a72      	ldr	r2, [pc, #456]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	e01c      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d10c      	bne.n	8001e3e <HAL_RCC_OscConfig+0x356>
 8001e24:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a6c      	ldr	r2, [pc, #432]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a69      	ldr	r2, [pc, #420]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	e00b      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a66      	ldr	r2, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a63      	ldr	r2, [pc, #396]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d015      	beq.n	8001e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff faaf 	bl	80013c0 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff faab 	bl	80013c0 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0ab      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ee      	beq.n	8001e66 <HAL_RCC_OscConfig+0x37e>
 8001e88:	e014      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fa99 	bl	80013c0 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7ff fa95 	bl	80013c0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e095      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea8:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ee      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eba:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a47      	ldr	r2, [pc, #284]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8081 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed0:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d061      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d146      	bne.n	8001f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <HAL_RCC_OscConfig+0x4fc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7ff fa69 	bl	80013c0 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff fa65 	bl	80013c0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e067      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f04:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d108      	bne.n	8001f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f1a:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	492d      	ldr	r1, [pc, #180]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a19      	ldr	r1, [r3, #32]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	4927      	ldr	r1, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_RCC_OscConfig+0x4fc>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7ff fa39 	bl	80013c0 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f52:	f7ff fa35 	bl	80013c0 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e037      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x46a>
 8001f70:	e02f      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_RCC_OscConfig+0x4fc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fa22 	bl	80013c0 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff fa1e 	bl	80013c0 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e020      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x498>
 8001f9e:	e018      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e013      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	42420060 	.word	0x42420060

08001fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0d0      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d910      	bls.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b67      	ldr	r3, [pc, #412]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 0207 	bic.w	r2, r3, #7
 8002012:	4965      	ldr	r1, [pc, #404]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4a58      	ldr	r2, [pc, #352]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800204e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002066:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	494d      	ldr	r1, [pc, #308]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d040      	beq.n	8002108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d115      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	4b41      	ldr	r3, [pc, #260]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e073      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06b      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c6:	4b39      	ldr	r3, [pc, #228]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f023 0203 	bic.w	r2, r3, #3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	4936      	ldr	r1, [pc, #216]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d8:	f7ff f972 	bl	80013c0 <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e0:	f7ff f96e 	bl	80013c0 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e053      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 020c 	and.w	r2, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	429a      	cmp	r2, r3
 8002106:	d1eb      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002108:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d210      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 0207 	bic.w	r2, r3, #7
 800211e:	4922      	ldr	r1, [pc, #136]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4916      	ldr	r1, [pc, #88]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	4313      	orrs	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	490e      	ldr	r1, [pc, #56]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4602      	mov	r2, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	490a      	ldr	r1, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002188:	5ccb      	ldrb	r3, [r1, r3]
 800218a:	fa22 f303 	lsr.w	r3, r2, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f8d0 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08004494 	.word	0x08004494
 80021b4:	2000001c 	.word	0x2000001c
 80021b8:	20000020 	.word	0x20000020

080021bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	b490      	push	{r4, r7}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021c4:	1d3c      	adds	r4, r7, #4
 80021c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021cc:	f240 2301 	movw	r3, #513	; 0x201
 80021d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021e6:	4b22      	ldr	r3, [pc, #136]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d002      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x40>
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_GetSysClockFreq+0x46>
 80021fa:	e02d      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fe:	623b      	str	r3, [r7, #32]
      break;
 8002200:	e02d      	b.n	800225e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	0c9b      	lsrs	r3, r3, #18
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800220e:	4413      	add	r3, r2
 8002210:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002214:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	0c5b      	lsrs	r3, r3, #17
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800222e:	4413      	add	r3, r2
 8002230:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002234:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 800223a:	fb02 f203 	mul.w	r2, r2, r3
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e004      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <HAL_RCC_GetSysClockFreq+0xbc>)
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	623b      	str	r3, [r7, #32]
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 800225a:	623b      	str	r3, [r7, #32]
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	6a3b      	ldr	r3, [r7, #32]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3728      	adds	r7, #40	; 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bc90      	pop	{r4, r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	08004484 	.word	0x08004484
 8002270:	40021000 	.word	0x40021000
 8002274:	007a1200 	.word	0x007a1200
 8002278:	003d0900 	.word	0x003d0900

0800227c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002280:	4b02      	ldr	r3, [pc, #8]	; (800228c <HAL_RCC_GetHCLKFreq+0x10>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	2000001c 	.word	0x2000001c

08002290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002294:	f7ff fff2 	bl	800227c <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4903      	ldr	r1, [pc, #12]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	080044a4 	.word	0x080044a4

080022b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022bc:	f7ff ffde 	bl	800227c <HAL_RCC_GetHCLKFreq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	0adb      	lsrs	r3, r3, #11
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	4903      	ldr	r1, [pc, #12]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ce:	5ccb      	ldrb	r3, [r1, r3]
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	080044a4 	.word	0x080044a4

080022e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <RCC_Delay+0x34>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <RCC_Delay+0x38>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	0a5b      	lsrs	r3, r3, #9
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022fc:	bf00      	nop
  }
  while (Delay --);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e5a      	subs	r2, r3, #1
 8002302:	60fa      	str	r2, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f9      	bne.n	80022fc <RCC_Delay+0x1c>
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	2000001c 	.word	0x2000001c
 8002318:	10624dd3 	.word	0x10624dd3

0800231c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e041      	b.n	80023b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fe58 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4610      	mov	r0, r2
 800235c:	f000 fc28 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d001      	beq.n	80023d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e03a      	b.n	800244a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2202      	movs	r2, #2
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a18      	ldr	r2, [pc, #96]	; (8002454 <HAL_TIM_Base_Start_IT+0x98>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00e      	beq.n	8002414 <HAL_TIM_Base_Start_IT+0x58>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fe:	d009      	beq.n	8002414 <HAL_TIM_Base_Start_IT+0x58>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_TIM_Base_Start_IT+0x9c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_TIM_Base_Start_IT+0x58>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a13      	ldr	r2, [pc, #76]	; (800245c <HAL_TIM_Base_Start_IT+0xa0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d111      	bne.n	8002438 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b06      	cmp	r3, #6
 8002424:	d010      	beq.n	8002448 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0201 	orr.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002436:	e007      	b.n	8002448 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	40012c00 	.word	0x40012c00
 8002458:	40000400 	.word	0x40000400
 800245c:	40000800 	.word	0x40000800

08002460 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e041      	b.n	80024f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f839 	bl	80024fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3304      	adds	r3, #4
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f000 fb86 	bl	8002bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024fe:	b480      	push	{r7}
 8002500:	b083      	sub	sp, #12
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr

08002510 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <HAL_TIM_PWM_Start+0x24>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e022      	b.n	800257a <HAL_TIM_PWM_Start+0x6a>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b04      	cmp	r3, #4
 8002538:	d109      	bne.n	800254e <HAL_TIM_PWM_Start+0x3e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b01      	cmp	r3, #1
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e015      	b.n	800257a <HAL_TIM_PWM_Start+0x6a>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b08      	cmp	r3, #8
 8002552:	d109      	bne.n	8002568 <HAL_TIM_PWM_Start+0x58>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b01      	cmp	r3, #1
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	e008      	b.n	800257a <HAL_TIM_PWM_Start+0x6a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e05e      	b.n	8002640 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d104      	bne.n	8002592 <HAL_TIM_PWM_Start+0x82>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002590:	e013      	b.n	80025ba <HAL_TIM_PWM_Start+0xaa>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d104      	bne.n	80025a2 <HAL_TIM_PWM_Start+0x92>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025a0:	e00b      	b.n	80025ba <HAL_TIM_PWM_Start+0xaa>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d104      	bne.n	80025b2 <HAL_TIM_PWM_Start+0xa2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025b0:	e003      	b.n	80025ba <HAL_TIM_PWM_Start+0xaa>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2201      	movs	r2, #1
 80025c0:	6839      	ldr	r1, [r7, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fd74 	bl	80030b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1e      	ldr	r2, [pc, #120]	; (8002648 <HAL_TIM_PWM_Start+0x138>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d107      	bne.n	80025e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a18      	ldr	r2, [pc, #96]	; (8002648 <HAL_TIM_PWM_Start+0x138>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d00e      	beq.n	800260a <HAL_TIM_PWM_Start+0xfa>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f4:	d009      	beq.n	800260a <HAL_TIM_PWM_Start+0xfa>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a14      	ldr	r2, [pc, #80]	; (800264c <HAL_TIM_PWM_Start+0x13c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_TIM_PWM_Start+0xfa>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a12      	ldr	r2, [pc, #72]	; (8002650 <HAL_TIM_PWM_Start+0x140>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d111      	bne.n	800262e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b06      	cmp	r3, #6
 800261a:	d010      	beq.n	800263e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0201 	orr.w	r2, r2, #1
 800262a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800262c:	e007      	b.n	800263e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0201 	orr.w	r2, r2, #1
 800263c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40000400 	.word	0x40000400
 8002650:	40000800 	.word	0x40000800

08002654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d122      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b02      	cmp	r3, #2
 8002676:	d11b      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0202 	mvn.w	r2, #2
 8002680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa6f 	bl	8002b7a <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fa62 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 fa71 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0204 	mvn.w	r2, #4
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fa45 	bl	8002b7a <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fa38 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fa47 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b08      	cmp	r3, #8
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b08      	cmp	r3, #8
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0208 	mvn.w	r2, #8
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2204      	movs	r2, #4
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa1b 	bl	8002b7a <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa0e 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fa1d 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b10      	cmp	r3, #16
 8002764:	d122      	bne.n	80027ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b10      	cmp	r3, #16
 8002772:	d11b      	bne.n	80027ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0210 	mvn.w	r2, #16
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2208      	movs	r2, #8
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f9f1 	bl	8002b7a <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f9e4 	bl	8002b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f9f3 	bl	8002b8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10e      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d107      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0201 	mvn.w	r2, #1
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe fae8 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b80      	cmp	r3, #128	; 0x80
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b80      	cmp	r3, #128	; 0x80
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fce1 	bl	80031c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d107      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f9b7 	bl	8002b9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b20      	cmp	r3, #32
 800283c:	d10e      	bne.n	800285c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0320 	and.w	r3, r3, #32
 8002848:	2b20      	cmp	r3, #32
 800284a:	d107      	bne.n	800285c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0220 	mvn.w	r2, #32
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fcac 	bl	80031b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800287a:	2302      	movs	r3, #2
 800287c:	e0ac      	b.n	80029d8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b0c      	cmp	r3, #12
 800288a:	f200 809f 	bhi.w	80029cc <HAL_TIM_PWM_ConfigChannel+0x168>
 800288e:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002894:	080028c9 	.word	0x080028c9
 8002898:	080029cd 	.word	0x080029cd
 800289c:	080029cd 	.word	0x080029cd
 80028a0:	080029cd 	.word	0x080029cd
 80028a4:	08002909 	.word	0x08002909
 80028a8:	080029cd 	.word	0x080029cd
 80028ac:	080029cd 	.word	0x080029cd
 80028b0:	080029cd 	.word	0x080029cd
 80028b4:	0800294b 	.word	0x0800294b
 80028b8:	080029cd 	.word	0x080029cd
 80028bc:	080029cd 	.word	0x080029cd
 80028c0:	080029cd 	.word	0x080029cd
 80028c4:	0800298b 	.word	0x0800298b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 f9d0 	bl	8002c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0208 	orr.w	r2, r2, #8
 80028e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0204 	bic.w	r2, r2, #4
 80028f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6999      	ldr	r1, [r3, #24]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	619a      	str	r2, [r3, #24]
      break;
 8002906:	e062      	b.n	80029ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fa16 	bl	8002d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6999      	ldr	r1, [r3, #24]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	021a      	lsls	r2, r3, #8
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	619a      	str	r2, [r3, #24]
      break;
 8002948:	e041      	b.n	80029ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fa5f 	bl	8002e14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0208 	orr.w	r2, r2, #8
 8002964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f022 0204 	bic.w	r2, r2, #4
 8002974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69d9      	ldr	r1, [r3, #28]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	61da      	str	r2, [r3, #28]
      break;
 8002988:	e021      	b.n	80029ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 faa9 	bl	8002ee8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69d9      	ldr	r1, [r3, #28]
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	021a      	lsls	r2, r3, #8
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	61da      	str	r2, [r3, #28]
      break;
 80029ca:	e000      	b.n	80029ce <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80029cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIM_ConfigClockSource+0x18>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e0b3      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x180>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a30:	d03e      	beq.n	8002ab0 <HAL_TIM_ConfigClockSource+0xd0>
 8002a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a36:	f200 8087 	bhi.w	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3e:	f000 8085 	beq.w	8002b4c <HAL_TIM_ConfigClockSource+0x16c>
 8002a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a46:	d87f      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a48:	2b70      	cmp	r3, #112	; 0x70
 8002a4a:	d01a      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0xa2>
 8002a4c:	2b70      	cmp	r3, #112	; 0x70
 8002a4e:	d87b      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a50:	2b60      	cmp	r3, #96	; 0x60
 8002a52:	d050      	beq.n	8002af6 <HAL_TIM_ConfigClockSource+0x116>
 8002a54:	2b60      	cmp	r3, #96	; 0x60
 8002a56:	d877      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a58:	2b50      	cmp	r3, #80	; 0x50
 8002a5a:	d03c      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0xf6>
 8002a5c:	2b50      	cmp	r3, #80	; 0x50
 8002a5e:	d873      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d058      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0x136>
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d86f      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a68:	2b30      	cmp	r3, #48	; 0x30
 8002a6a:	d064      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x156>
 8002a6c:	2b30      	cmp	r3, #48	; 0x30
 8002a6e:	d86b      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d060      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x156>
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d867      	bhi.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d05c      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x156>
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d05a      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a80:	e062      	b.n	8002b48 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	6899      	ldr	r1, [r3, #8]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f000 faee 	bl	8003072 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002aa4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	609a      	str	r2, [r3, #8]
      break;
 8002aae:	e04e      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6899      	ldr	r1, [r3, #8]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f000 fad7 	bl	8003072 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ad2:	609a      	str	r2, [r3, #8]
      break;
 8002ad4:	e03b      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f000 fa4e 	bl	8002f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2150      	movs	r1, #80	; 0x50
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 faa5 	bl	800303e <TIM_ITRx_SetConfig>
      break;
 8002af4:	e02b      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	461a      	mov	r2, r3
 8002b04:	f000 fa6c 	bl	8002fe0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2160      	movs	r1, #96	; 0x60
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fa95 	bl	800303e <TIM_ITRx_SetConfig>
      break;
 8002b14:	e01b      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f000 fa2e 	bl	8002f84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2140      	movs	r1, #64	; 0x40
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fa85 	bl	800303e <TIM_ITRx_SetConfig>
      break;
 8002b34:	e00b      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4610      	mov	r0, r2
 8002b42:	f000 fa7c 	bl	800303e <TIM_ITRx_SetConfig>
        break;
 8002b46:	e002      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b48:	bf00      	nop
 8002b4a:	e000      	b.n	8002b4e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <TIM_Base_SetConfig+0xb8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00b      	beq.n	8002be0 <TIM_Base_SetConfig+0x30>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bce:	d007      	beq.n	8002be0 <TIM_Base_SetConfig+0x30>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a26      	ldr	r2, [pc, #152]	; (8002c6c <TIM_Base_SetConfig+0xbc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d003      	beq.n	8002be0 <TIM_Base_SetConfig+0x30>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <TIM_Base_SetConfig+0xc0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d108      	bne.n	8002bf2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1c      	ldr	r2, [pc, #112]	; (8002c68 <TIM_Base_SetConfig+0xb8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00b      	beq.n	8002c12 <TIM_Base_SetConfig+0x62>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c00:	d007      	beq.n	8002c12 <TIM_Base_SetConfig+0x62>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <TIM_Base_SetConfig+0xbc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d003      	beq.n	8002c12 <TIM_Base_SetConfig+0x62>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <TIM_Base_SetConfig+0xc0>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d108      	bne.n	8002c24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a07      	ldr	r2, [pc, #28]	; (8002c68 <TIM_Base_SetConfig+0xb8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d103      	bne.n	8002c58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	615a      	str	r2, [r3, #20]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800

08002c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	f023 0201 	bic.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f023 0302 	bic.w	r3, r3, #2
 8002cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a1c      	ldr	r2, [pc, #112]	; (8002d3c <TIM_OC1_SetConfig+0xc8>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10c      	bne.n	8002cea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0308 	bic.w	r3, r3, #8
 8002cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f023 0304 	bic.w	r3, r3, #4
 8002ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <TIM_OC1_SetConfig+0xc8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d111      	bne.n	8002d16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	621a      	str	r2, [r3, #32]
}
 8002d30:	bf00      	nop
 8002d32:	371c      	adds	r7, #28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40012c00 	.word	0x40012c00

08002d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	f023 0210 	bic.w	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f023 0320 	bic.w	r3, r3, #32
 8002d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <TIM_OC2_SetConfig+0xd0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d10d      	bne.n	8002dbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a14      	ldr	r2, [pc, #80]	; (8002e10 <TIM_OC2_SetConfig+0xd0>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d113      	bne.n	8002dec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	40012c00 	.word	0x40012c00

08002e14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0303 	bic.w	r3, r3, #3
 8002e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <TIM_OC3_SetConfig+0xd0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d10d      	bne.n	8002e8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <TIM_OC3_SetConfig+0xd0>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d113      	bne.n	8002ebe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	621a      	str	r2, [r3, #32]
}
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40012c00 	.word	0x40012c00

08002ee8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	031b      	lsls	r3, r3, #12
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <TIM_OC4_SetConfig+0x98>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d109      	bne.n	8002f5c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	019b      	lsls	r3, r3, #6
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	621a      	str	r2, [r3, #32]
}
 8002f76:	bf00      	nop
 8002f78:	371c      	adds	r7, #28
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	40012c00 	.word	0x40012c00

08002f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f023 0201 	bic.w	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f023 030a 	bic.w	r3, r3, #10
 8002fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	621a      	str	r2, [r3, #32]
}
 8002fd6:	bf00      	nop
 8002fd8:	371c      	adds	r7, #28
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	f023 0210 	bic.w	r2, r3, #16
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800300a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	031b      	lsls	r3, r3, #12
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	4313      	orrs	r3, r2
 8003014:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800301c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	621a      	str	r2, [r3, #32]
}
 8003034:	bf00      	nop
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003054:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	f043 0307 	orr.w	r3, r3, #7
 8003060:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	609a      	str	r2, [r3, #8]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003072:	b480      	push	{r7}
 8003074:	b087      	sub	sp, #28
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800308c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	431a      	orrs	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4313      	orrs	r3, r2
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	609a      	str	r2, [r3, #8]
}
 80030a6:	bf00      	nop
 80030a8:	371c      	adds	r7, #28
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr

080030b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2201      	movs	r2, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6a1a      	ldr	r2, [r3, #32]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	401a      	ands	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a1a      	ldr	r2, [r3, #32]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800310c:	2302      	movs	r3, #2
 800310e:	e046      	b.n	800319e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00e      	beq.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315c:	d009      	beq.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a12      	ldr	r2, [pc, #72]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d004      	beq.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a10      	ldr	r2, [pc, #64]	; (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d10c      	bne.n	800318c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	4313      	orrs	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40000800 	.word	0x40000800

080031b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e03f      	b.n	800326a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd ff64 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800321a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fc25 	bl	8003a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695a      	ldr	r2, [r3, #20]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b08a      	sub	sp, #40	; 0x28
 8003276:	af02      	add	r7, sp, #8
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	d17c      	bne.n	800338c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_UART_Transmit+0x2c>
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e075      	b.n	800338e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Transmit+0x3e>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e06e      	b.n	800338e <HAL_UART_Transmit+0x11c>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c6:	f7fe f87b 	bl	80013c0 <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e0:	d108      	bne.n	80032f4 <HAL_UART_Transmit+0x82>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d104      	bne.n	80032f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	e003      	b.n	80032fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003304:	e02a      	b.n	800335c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	2180      	movs	r1, #128	; 0x80
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fa11 	bl	8003738 <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e036      	b.n	800338e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10b      	bne.n	800333e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003334:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	3302      	adds	r3, #2
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	e007      	b.n	800334e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	3301      	adds	r3, #1
 800334c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1cf      	bne.n	8003306 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2200      	movs	r2, #0
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f9e1 	bl	8003738 <UART_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e006      	b.n	800338e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10d      	bne.n	80033ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <HAL_UART_IRQHandler+0x52>
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fa99 	bl	800391a <UART_Receive_IT>
      return;
 80033e8:	e17b      	b.n	80036e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80b1 	beq.w	8003554 <HAL_UART_IRQHandler+0x1bc>
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d105      	bne.n	8003408 <HAL_UART_IRQHandler+0x70>
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80a6 	beq.w	8003554 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_UART_IRQHandler+0x90>
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_UART_IRQHandler+0xb0>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f043 0202 	orr.w	r2, r3, #2
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <HAL_UART_IRQHandler+0xd0>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003460:	f043 0204 	orr.w	r2, r3, #4
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00f      	beq.n	8003492 <HAL_UART_IRQHandler+0xfa>
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <HAL_UART_IRQHandler+0xee>
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f043 0208 	orr.w	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 811e 	beq.w	80036d8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <HAL_UART_IRQHandler+0x11e>
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fa32 	bl	800391a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <HAL_UART_IRQHandler+0x146>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d031      	beq.n	8003542 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f974 	bl	80037cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d023      	beq.n	800353a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003500:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	2b00      	cmp	r3, #0
 8003508:	d013      	beq.n	8003532 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	4a76      	ldr	r2, [pc, #472]	; (80036e8 <HAL_UART_IRQHandler+0x350>)
 8003510:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe f8a4 	bl	8001664 <HAL_DMA_Abort_IT>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d016      	beq.n	8003550 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800352c:	4610      	mov	r0, r2
 800352e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003530:	e00e      	b.n	8003550 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8ec 	bl	8003710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003538:	e00a      	b.n	8003550 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f8e8 	bl	8003710 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	e006      	b.n	8003550 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8e4 	bl	8003710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800354e:	e0c3      	b.n	80036d8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003550:	bf00      	nop
    return;
 8003552:	e0c1      	b.n	80036d8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	2b01      	cmp	r3, #1
 800355a:	f040 80a1 	bne.w	80036a0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 809b 	beq.w	80036a0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8095 	beq.w	80036a0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b00      	cmp	r3, #0
 8003598:	d04e      	beq.n	8003638 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80035a4:	8a3b      	ldrh	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8098 	beq.w	80036dc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035b0:	8a3a      	ldrh	r2, [r7, #16]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	f080 8092 	bcs.w	80036dc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8a3a      	ldrh	r2, [r7, #16]
 80035bc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d02b      	beq.n	8003620 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035d6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695a      	ldr	r2, [r3, #20]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035f6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0210 	bic.w	r2, r2, #16
 8003614:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd ffe7 	bl	80015ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003628:	b29b      	uxth	r3, r3
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	b29b      	uxth	r3, r3
 800362e:	4619      	mov	r1, r3
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f876 	bl	8003722 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003636:	e051      	b.n	80036dc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003640:	b29b      	uxth	r3, r3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d047      	beq.n	80036e0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003650:	8a7b      	ldrh	r3, [r7, #18]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d044      	beq.n	80036e0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003664:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0210 	bic.w	r2, r2, #16
 8003692:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003694:	8a7b      	ldrh	r3, [r7, #18]
 8003696:	4619      	mov	r1, r3
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f842 	bl	8003722 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800369e:	e01f      	b.n	80036e0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_UART_IRQHandler+0x324>
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f8c9 	bl	800384c <UART_Transmit_IT>
    return;
 80036ba:	e012      	b.n	80036e2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00d      	beq.n	80036e2 <HAL_UART_IRQHandler+0x34a>
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f90a 	bl	80038ea <UART_EndTransmit_IT>
    return;
 80036d6:	e004      	b.n	80036e2 <HAL_UART_IRQHandler+0x34a>
    return;
 80036d8:	bf00      	nop
 80036da:	e002      	b.n	80036e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80036dc:	bf00      	nop
 80036de:	e000      	b.n	80036e2 <HAL_UART_IRQHandler+0x34a>
      return;
 80036e0:	bf00      	nop
  }
}
 80036e2:	3728      	adds	r7, #40	; 0x28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	08003825 	.word	0x08003825

080036ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	460b      	mov	r3, r1
 800372c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003748:	e02c      	b.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d028      	beq.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d007      	beq.n	8003768 <UART_WaitOnFlagUntilTimeout+0x30>
 8003758:	f7fd fe32 	bl	80013c0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	429a      	cmp	r2, r3
 8003766:	d21d      	bcs.n	80037a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003776:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 0201 	bic.w	r2, r2, #1
 8003786:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e00f      	b.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4013      	ands	r3, r2
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	461a      	mov	r2, r3
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d0c3      	beq.n	800374a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695a      	ldr	r2, [r3, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d107      	bne.n	800380c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0210 	bic.w	r2, r2, #16
 800380a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff ff66 	bl	8003710 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b21      	cmp	r3, #33	; 0x21
 800385e:	d13e      	bne.n	80038de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003868:	d114      	bne.n	8003894 <UART_Transmit_IT+0x48>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d110      	bne.n	8003894 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003886:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	1c9a      	adds	r2, r3, #2
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	621a      	str	r2, [r3, #32]
 8003892:	e008      	b.n	80038a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	1c59      	adds	r1, r3, #1
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6211      	str	r1, [r2, #32]
 800389e:	781a      	ldrb	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	4619      	mov	r1, r3
 80038b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038de:	2302      	movs	r3, #2
  }
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr

080038ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003900:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff feee 	bl	80036ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b086      	sub	sp, #24
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b22      	cmp	r3, #34	; 0x22
 800392c:	f040 8099 	bne.w	8003a62 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003938:	d117      	bne.n	800396a <UART_Receive_IT+0x50>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d113      	bne.n	800396a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	b29b      	uxth	r3, r3
 8003954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003958:	b29a      	uxth	r2, r3
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003962:	1c9a      	adds	r2, r3, #2
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	; 0x28
 8003968:	e026      	b.n	80039b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397c:	d007      	beq.n	800398e <UART_Receive_IT+0x74>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <UART_Receive_IT+0x82>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d106      	bne.n	800399c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e008      	b.n	80039ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039bc:	b29b      	uxth	r3, r3
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	4619      	mov	r1, r3
 80039c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d148      	bne.n	8003a5e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0220 	bic.w	r2, r2, #32
 80039da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d123      	bne.n	8003a54 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0210 	bic.w	r2, r2, #16
 8003a20:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2b10      	cmp	r3, #16
 8003a2e:	d10a      	bne.n	8003a46 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a30:	2300      	movs	r3, #0
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff fe68 	bl	8003722 <HAL_UARTEx_RxEventCallback>
 8003a52:	e002      	b.n	8003a5a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fe52 	bl	80036fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e002      	b.n	8003a64 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e000      	b.n	8003a64 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a62:	2302      	movs	r3, #2
  }
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003aa6:	f023 030c 	bic.w	r3, r3, #12
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <UART_SetConfig+0x114>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d103      	bne.n	8003adc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ad4:	f7fe fbf0 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	e002      	b.n	8003ae2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003adc:	f7fe fbd8 	bl	8002290 <HAL_RCC_GetPCLK1Freq>
 8003ae0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009a      	lsls	r2, r3, #2
 8003aec:	441a      	add	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	4a22      	ldr	r2, [pc, #136]	; (8003b84 <UART_SetConfig+0x118>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	0119      	lsls	r1, r3, #4
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4613      	mov	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	009a      	lsls	r2, r3, #2
 8003b0c:	441a      	add	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b18:	4b1a      	ldr	r3, [pc, #104]	; (8003b84 <UART_SetConfig+0x118>)
 8003b1a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b1e:	095b      	lsrs	r3, r3, #5
 8003b20:	2064      	movs	r0, #100	; 0x64
 8003b22:	fb00 f303 	mul.w	r3, r0, r3
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	3332      	adds	r3, #50	; 0x32
 8003b2c:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <UART_SetConfig+0x118>)
 8003b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b38:	4419      	add	r1, r3
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	009a      	lsls	r2, r3, #2
 8003b44:	441a      	add	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b50:	4b0c      	ldr	r3, [pc, #48]	; (8003b84 <UART_SetConfig+0x118>)
 8003b52:	fba3 0302 	umull	r0, r3, r3, r2
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2064      	movs	r0, #100	; 0x64
 8003b5a:	fb00 f303 	mul.w	r3, r0, r3
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	3332      	adds	r3, #50	; 0x32
 8003b64:	4a07      	ldr	r2, [pc, #28]	; (8003b84 <UART_SetConfig+0x118>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	f003 020f 	and.w	r2, r3, #15
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	440a      	add	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b78:	bf00      	nop
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40013800 	.word	0x40013800
 8003b84:	51eb851f 	.word	0x51eb851f

08003b88 <__errno>:
 8003b88:	4b01      	ldr	r3, [pc, #4]	; (8003b90 <__errno+0x8>)
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000028 	.word	0x20000028

08003b94 <__libc_init_array>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	2600      	movs	r6, #0
 8003b98:	4d0c      	ldr	r5, [pc, #48]	; (8003bcc <__libc_init_array+0x38>)
 8003b9a:	4c0d      	ldr	r4, [pc, #52]	; (8003bd0 <__libc_init_array+0x3c>)
 8003b9c:	1b64      	subs	r4, r4, r5
 8003b9e:	10a4      	asrs	r4, r4, #2
 8003ba0:	42a6      	cmp	r6, r4
 8003ba2:	d109      	bne.n	8003bb8 <__libc_init_array+0x24>
 8003ba4:	f000 fc5c 	bl	8004460 <_init>
 8003ba8:	2600      	movs	r6, #0
 8003baa:	4d0a      	ldr	r5, [pc, #40]	; (8003bd4 <__libc_init_array+0x40>)
 8003bac:	4c0a      	ldr	r4, [pc, #40]	; (8003bd8 <__libc_init_array+0x44>)
 8003bae:	1b64      	subs	r4, r4, r5
 8003bb0:	10a4      	asrs	r4, r4, #2
 8003bb2:	42a6      	cmp	r6, r4
 8003bb4:	d105      	bne.n	8003bc2 <__libc_init_array+0x2e>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bbc:	4798      	blx	r3
 8003bbe:	3601      	adds	r6, #1
 8003bc0:	e7ee      	b.n	8003ba0 <__libc_init_array+0xc>
 8003bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc6:	4798      	blx	r3
 8003bc8:	3601      	adds	r6, #1
 8003bca:	e7f2      	b.n	8003bb2 <__libc_init_array+0x1e>
 8003bcc:	080044e0 	.word	0x080044e0
 8003bd0:	080044e0 	.word	0x080044e0
 8003bd4:	080044e0 	.word	0x080044e0
 8003bd8:	080044e4 	.word	0x080044e4

08003bdc <memset>:
 8003bdc:	4603      	mov	r3, r0
 8003bde:	4402      	add	r2, r0
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d100      	bne.n	8003be6 <memset+0xa>
 8003be4:	4770      	bx	lr
 8003be6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bea:	e7f9      	b.n	8003be0 <memset+0x4>

08003bec <siprintf>:
 8003bec:	b40e      	push	{r1, r2, r3}
 8003bee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bf2:	b500      	push	{lr}
 8003bf4:	b09c      	sub	sp, #112	; 0x70
 8003bf6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bf8:	9002      	str	r0, [sp, #8]
 8003bfa:	9006      	str	r0, [sp, #24]
 8003bfc:	9107      	str	r1, [sp, #28]
 8003bfe:	9104      	str	r1, [sp, #16]
 8003c00:	4808      	ldr	r0, [pc, #32]	; (8003c24 <siprintf+0x38>)
 8003c02:	4909      	ldr	r1, [pc, #36]	; (8003c28 <siprintf+0x3c>)
 8003c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c08:	9105      	str	r1, [sp, #20]
 8003c0a:	6800      	ldr	r0, [r0, #0]
 8003c0c:	a902      	add	r1, sp, #8
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	f000 f868 	bl	8003ce4 <_svfiprintf_r>
 8003c14:	2200      	movs	r2, #0
 8003c16:	9b02      	ldr	r3, [sp, #8]
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	b01c      	add	sp, #112	; 0x70
 8003c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c20:	b003      	add	sp, #12
 8003c22:	4770      	bx	lr
 8003c24:	20000028 	.word	0x20000028
 8003c28:	ffff0208 	.word	0xffff0208

08003c2c <__ssputs_r>:
 8003c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c30:	688e      	ldr	r6, [r1, #8]
 8003c32:	4682      	mov	sl, r0
 8003c34:	429e      	cmp	r6, r3
 8003c36:	460c      	mov	r4, r1
 8003c38:	4690      	mov	r8, r2
 8003c3a:	461f      	mov	r7, r3
 8003c3c:	d838      	bhi.n	8003cb0 <__ssputs_r+0x84>
 8003c3e:	898a      	ldrh	r2, [r1, #12]
 8003c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c44:	d032      	beq.n	8003cac <__ssputs_r+0x80>
 8003c46:	6825      	ldr	r5, [r4, #0]
 8003c48:	6909      	ldr	r1, [r1, #16]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	eba5 0901 	sub.w	r9, r5, r1
 8003c50:	6965      	ldr	r5, [r4, #20]
 8003c52:	444b      	add	r3, r9
 8003c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c5c:	106d      	asrs	r5, r5, #1
 8003c5e:	429d      	cmp	r5, r3
 8003c60:	bf38      	it	cc
 8003c62:	461d      	movcc	r5, r3
 8003c64:	0553      	lsls	r3, r2, #21
 8003c66:	d531      	bpl.n	8003ccc <__ssputs_r+0xa0>
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f000 fb53 	bl	8004314 <_malloc_r>
 8003c6e:	4606      	mov	r6, r0
 8003c70:	b950      	cbnz	r0, 8003c88 <__ssputs_r+0x5c>
 8003c72:	230c      	movs	r3, #12
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	f8ca 3000 	str.w	r3, [sl]
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c82:	81a3      	strh	r3, [r4, #12]
 8003c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c88:	464a      	mov	r2, r9
 8003c8a:	6921      	ldr	r1, [r4, #16]
 8003c8c:	f000 face 	bl	800422c <memcpy>
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9a:	81a3      	strh	r3, [r4, #12]
 8003c9c:	6126      	str	r6, [r4, #16]
 8003c9e:	444e      	add	r6, r9
 8003ca0:	6026      	str	r6, [r4, #0]
 8003ca2:	463e      	mov	r6, r7
 8003ca4:	6165      	str	r5, [r4, #20]
 8003ca6:	eba5 0509 	sub.w	r5, r5, r9
 8003caa:	60a5      	str	r5, [r4, #8]
 8003cac:	42be      	cmp	r6, r7
 8003cae:	d900      	bls.n	8003cb2 <__ssputs_r+0x86>
 8003cb0:	463e      	mov	r6, r7
 8003cb2:	4632      	mov	r2, r6
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	6820      	ldr	r0, [r4, #0]
 8003cb8:	f000 fac6 	bl	8004248 <memmove>
 8003cbc:	68a3      	ldr	r3, [r4, #8]
 8003cbe:	6822      	ldr	r2, [r4, #0]
 8003cc0:	1b9b      	subs	r3, r3, r6
 8003cc2:	4432      	add	r2, r6
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	60a3      	str	r3, [r4, #8]
 8003cc8:	6022      	str	r2, [r4, #0]
 8003cca:	e7db      	b.n	8003c84 <__ssputs_r+0x58>
 8003ccc:	462a      	mov	r2, r5
 8003cce:	f000 fb7b 	bl	80043c8 <_realloc_r>
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d1e1      	bne.n	8003c9c <__ssputs_r+0x70>
 8003cd8:	4650      	mov	r0, sl
 8003cda:	6921      	ldr	r1, [r4, #16]
 8003cdc:	f000 face 	bl	800427c <_free_r>
 8003ce0:	e7c7      	b.n	8003c72 <__ssputs_r+0x46>
	...

08003ce4 <_svfiprintf_r>:
 8003ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ce8:	4698      	mov	r8, r3
 8003cea:	898b      	ldrh	r3, [r1, #12]
 8003cec:	4607      	mov	r7, r0
 8003cee:	061b      	lsls	r3, r3, #24
 8003cf0:	460d      	mov	r5, r1
 8003cf2:	4614      	mov	r4, r2
 8003cf4:	b09d      	sub	sp, #116	; 0x74
 8003cf6:	d50e      	bpl.n	8003d16 <_svfiprintf_r+0x32>
 8003cf8:	690b      	ldr	r3, [r1, #16]
 8003cfa:	b963      	cbnz	r3, 8003d16 <_svfiprintf_r+0x32>
 8003cfc:	2140      	movs	r1, #64	; 0x40
 8003cfe:	f000 fb09 	bl	8004314 <_malloc_r>
 8003d02:	6028      	str	r0, [r5, #0]
 8003d04:	6128      	str	r0, [r5, #16]
 8003d06:	b920      	cbnz	r0, 8003d12 <_svfiprintf_r+0x2e>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	e0d1      	b.n	8003eb6 <_svfiprintf_r+0x1d2>
 8003d12:	2340      	movs	r3, #64	; 0x40
 8003d14:	616b      	str	r3, [r5, #20]
 8003d16:	2300      	movs	r3, #0
 8003d18:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d20:	2330      	movs	r3, #48	; 0x30
 8003d22:	f04f 0901 	mov.w	r9, #1
 8003d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ed0 <_svfiprintf_r+0x1ec>
 8003d2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d32:	4623      	mov	r3, r4
 8003d34:	469a      	mov	sl, r3
 8003d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d3a:	b10a      	cbz	r2, 8003d40 <_svfiprintf_r+0x5c>
 8003d3c:	2a25      	cmp	r2, #37	; 0x25
 8003d3e:	d1f9      	bne.n	8003d34 <_svfiprintf_r+0x50>
 8003d40:	ebba 0b04 	subs.w	fp, sl, r4
 8003d44:	d00b      	beq.n	8003d5e <_svfiprintf_r+0x7a>
 8003d46:	465b      	mov	r3, fp
 8003d48:	4622      	mov	r2, r4
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	f7ff ff6d 	bl	8003c2c <__ssputs_r>
 8003d52:	3001      	adds	r0, #1
 8003d54:	f000 80aa 	beq.w	8003eac <_svfiprintf_r+0x1c8>
 8003d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d5a:	445a      	add	r2, fp
 8003d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80a2 	beq.w	8003eac <_svfiprintf_r+0x1c8>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d72:	f10a 0a01 	add.w	sl, sl, #1
 8003d76:	9304      	str	r3, [sp, #16]
 8003d78:	9307      	str	r3, [sp, #28]
 8003d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d80:	4654      	mov	r4, sl
 8003d82:	2205      	movs	r2, #5
 8003d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d88:	4851      	ldr	r0, [pc, #324]	; (8003ed0 <_svfiprintf_r+0x1ec>)
 8003d8a:	f000 fa41 	bl	8004210 <memchr>
 8003d8e:	9a04      	ldr	r2, [sp, #16]
 8003d90:	b9d8      	cbnz	r0, 8003dca <_svfiprintf_r+0xe6>
 8003d92:	06d0      	lsls	r0, r2, #27
 8003d94:	bf44      	itt	mi
 8003d96:	2320      	movmi	r3, #32
 8003d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d9c:	0711      	lsls	r1, r2, #28
 8003d9e:	bf44      	itt	mi
 8003da0:	232b      	movmi	r3, #43	; 0x2b
 8003da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003da6:	f89a 3000 	ldrb.w	r3, [sl]
 8003daa:	2b2a      	cmp	r3, #42	; 0x2a
 8003dac:	d015      	beq.n	8003dda <_svfiprintf_r+0xf6>
 8003dae:	4654      	mov	r4, sl
 8003db0:	2000      	movs	r0, #0
 8003db2:	f04f 0c0a 	mov.w	ip, #10
 8003db6:	9a07      	ldr	r2, [sp, #28]
 8003db8:	4621      	mov	r1, r4
 8003dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dbe:	3b30      	subs	r3, #48	; 0x30
 8003dc0:	2b09      	cmp	r3, #9
 8003dc2:	d94e      	bls.n	8003e62 <_svfiprintf_r+0x17e>
 8003dc4:	b1b0      	cbz	r0, 8003df4 <_svfiprintf_r+0x110>
 8003dc6:	9207      	str	r2, [sp, #28]
 8003dc8:	e014      	b.n	8003df4 <_svfiprintf_r+0x110>
 8003dca:	eba0 0308 	sub.w	r3, r0, r8
 8003dce:	fa09 f303 	lsl.w	r3, r9, r3
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	46a2      	mov	sl, r4
 8003dd6:	9304      	str	r3, [sp, #16]
 8003dd8:	e7d2      	b.n	8003d80 <_svfiprintf_r+0x9c>
 8003dda:	9b03      	ldr	r3, [sp, #12]
 8003ddc:	1d19      	adds	r1, r3, #4
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	9103      	str	r1, [sp, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bfbb      	ittet	lt
 8003de6:	425b      	neglt	r3, r3
 8003de8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dec:	9307      	strge	r3, [sp, #28]
 8003dee:	9307      	strlt	r3, [sp, #28]
 8003df0:	bfb8      	it	lt
 8003df2:	9204      	strlt	r2, [sp, #16]
 8003df4:	7823      	ldrb	r3, [r4, #0]
 8003df6:	2b2e      	cmp	r3, #46	; 0x2e
 8003df8:	d10c      	bne.n	8003e14 <_svfiprintf_r+0x130>
 8003dfa:	7863      	ldrb	r3, [r4, #1]
 8003dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dfe:	d135      	bne.n	8003e6c <_svfiprintf_r+0x188>
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	3402      	adds	r4, #2
 8003e04:	1d1a      	adds	r2, r3, #4
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	9203      	str	r2, [sp, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	bfb8      	it	lt
 8003e0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e12:	9305      	str	r3, [sp, #20]
 8003e14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ee0 <_svfiprintf_r+0x1fc>
 8003e18:	2203      	movs	r2, #3
 8003e1a:	4650      	mov	r0, sl
 8003e1c:	7821      	ldrb	r1, [r4, #0]
 8003e1e:	f000 f9f7 	bl	8004210 <memchr>
 8003e22:	b140      	cbz	r0, 8003e36 <_svfiprintf_r+0x152>
 8003e24:	2340      	movs	r3, #64	; 0x40
 8003e26:	eba0 000a 	sub.w	r0, r0, sl
 8003e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e2e:	9b04      	ldr	r3, [sp, #16]
 8003e30:	3401      	adds	r4, #1
 8003e32:	4303      	orrs	r3, r0
 8003e34:	9304      	str	r3, [sp, #16]
 8003e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e3a:	2206      	movs	r2, #6
 8003e3c:	4825      	ldr	r0, [pc, #148]	; (8003ed4 <_svfiprintf_r+0x1f0>)
 8003e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e42:	f000 f9e5 	bl	8004210 <memchr>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	d038      	beq.n	8003ebc <_svfiprintf_r+0x1d8>
 8003e4a:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <_svfiprintf_r+0x1f4>)
 8003e4c:	bb1b      	cbnz	r3, 8003e96 <_svfiprintf_r+0x1b2>
 8003e4e:	9b03      	ldr	r3, [sp, #12]
 8003e50:	3307      	adds	r3, #7
 8003e52:	f023 0307 	bic.w	r3, r3, #7
 8003e56:	3308      	adds	r3, #8
 8003e58:	9303      	str	r3, [sp, #12]
 8003e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e5c:	4433      	add	r3, r6
 8003e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e60:	e767      	b.n	8003d32 <_svfiprintf_r+0x4e>
 8003e62:	460c      	mov	r4, r1
 8003e64:	2001      	movs	r0, #1
 8003e66:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e6a:	e7a5      	b.n	8003db8 <_svfiprintf_r+0xd4>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f04f 0c0a 	mov.w	ip, #10
 8003e72:	4619      	mov	r1, r3
 8003e74:	3401      	adds	r4, #1
 8003e76:	9305      	str	r3, [sp, #20]
 8003e78:	4620      	mov	r0, r4
 8003e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e7e:	3a30      	subs	r2, #48	; 0x30
 8003e80:	2a09      	cmp	r2, #9
 8003e82:	d903      	bls.n	8003e8c <_svfiprintf_r+0x1a8>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0c5      	beq.n	8003e14 <_svfiprintf_r+0x130>
 8003e88:	9105      	str	r1, [sp, #20]
 8003e8a:	e7c3      	b.n	8003e14 <_svfiprintf_r+0x130>
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	2301      	movs	r3, #1
 8003e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e94:	e7f0      	b.n	8003e78 <_svfiprintf_r+0x194>
 8003e96:	ab03      	add	r3, sp, #12
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	462a      	mov	r2, r5
 8003e9c:	4638      	mov	r0, r7
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <_svfiprintf_r+0x1f8>)
 8003ea0:	a904      	add	r1, sp, #16
 8003ea2:	f3af 8000 	nop.w
 8003ea6:	1c42      	adds	r2, r0, #1
 8003ea8:	4606      	mov	r6, r0
 8003eaa:	d1d6      	bne.n	8003e5a <_svfiprintf_r+0x176>
 8003eac:	89ab      	ldrh	r3, [r5, #12]
 8003eae:	065b      	lsls	r3, r3, #25
 8003eb0:	f53f af2c 	bmi.w	8003d0c <_svfiprintf_r+0x28>
 8003eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003eb6:	b01d      	add	sp, #116	; 0x74
 8003eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ebc:	ab03      	add	r3, sp, #12
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	462a      	mov	r2, r5
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <_svfiprintf_r+0x1f8>)
 8003ec6:	a904      	add	r1, sp, #16
 8003ec8:	f000 f87c 	bl	8003fc4 <_printf_i>
 8003ecc:	e7eb      	b.n	8003ea6 <_svfiprintf_r+0x1c2>
 8003ece:	bf00      	nop
 8003ed0:	080044ac 	.word	0x080044ac
 8003ed4:	080044b6 	.word	0x080044b6
 8003ed8:	00000000 	.word	0x00000000
 8003edc:	08003c2d 	.word	0x08003c2d
 8003ee0:	080044b2 	.word	0x080044b2

08003ee4 <_printf_common>:
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	4616      	mov	r6, r2
 8003eea:	4699      	mov	r9, r3
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	690b      	ldr	r3, [r1, #16]
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	bfb8      	it	lt
 8003ef6:	4613      	movlt	r3, r2
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003efe:	460c      	mov	r4, r1
 8003f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f04:	b10a      	cbz	r2, 8003f0a <_printf_common+0x26>
 8003f06:	3301      	adds	r3, #1
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	0699      	lsls	r1, r3, #26
 8003f0e:	bf42      	ittt	mi
 8003f10:	6833      	ldrmi	r3, [r6, #0]
 8003f12:	3302      	addmi	r3, #2
 8003f14:	6033      	strmi	r3, [r6, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	f015 0506 	ands.w	r5, r5, #6
 8003f1c:	d106      	bne.n	8003f2c <_printf_common+0x48>
 8003f1e:	f104 0a19 	add.w	sl, r4, #25
 8003f22:	68e3      	ldr	r3, [r4, #12]
 8003f24:	6832      	ldr	r2, [r6, #0]
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	42ab      	cmp	r3, r5
 8003f2a:	dc28      	bgt.n	8003f7e <_printf_common+0x9a>
 8003f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f30:	1e13      	subs	r3, r2, #0
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	bf18      	it	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	0692      	lsls	r2, r2, #26
 8003f3a:	d42d      	bmi.n	8003f98 <_printf_common+0xb4>
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	4638      	mov	r0, r7
 8003f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f44:	47c0      	blx	r8
 8003f46:	3001      	adds	r0, #1
 8003f48:	d020      	beq.n	8003f8c <_printf_common+0xa8>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	68e5      	ldr	r5, [r4, #12]
 8003f4e:	f003 0306 	and.w	r3, r3, #6
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf18      	it	ne
 8003f56:	2500      	movne	r5, #0
 8003f58:	6832      	ldr	r2, [r6, #0]
 8003f5a:	f04f 0600 	mov.w	r6, #0
 8003f5e:	68a3      	ldr	r3, [r4, #8]
 8003f60:	bf08      	it	eq
 8003f62:	1aad      	subeq	r5, r5, r2
 8003f64:	6922      	ldr	r2, [r4, #16]
 8003f66:	bf08      	it	eq
 8003f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	bfc4      	itt	gt
 8003f70:	1a9b      	subgt	r3, r3, r2
 8003f72:	18ed      	addgt	r5, r5, r3
 8003f74:	341a      	adds	r4, #26
 8003f76:	42b5      	cmp	r5, r6
 8003f78:	d11a      	bne.n	8003fb0 <_printf_common+0xcc>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e008      	b.n	8003f90 <_printf_common+0xac>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4652      	mov	r2, sl
 8003f82:	4649      	mov	r1, r9
 8003f84:	4638      	mov	r0, r7
 8003f86:	47c0      	blx	r8
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d103      	bne.n	8003f94 <_printf_common+0xb0>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f94:	3501      	adds	r5, #1
 8003f96:	e7c4      	b.n	8003f22 <_printf_common+0x3e>
 8003f98:	2030      	movs	r0, #48	; 0x30
 8003f9a:	18e1      	adds	r1, r4, r3
 8003f9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fa6:	4422      	add	r2, r4
 8003fa8:	3302      	adds	r3, #2
 8003faa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fae:	e7c5      	b.n	8003f3c <_printf_common+0x58>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	47c0      	blx	r8
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d0e6      	beq.n	8003f8c <_printf_common+0xa8>
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7d9      	b.n	8003f76 <_printf_common+0x92>
	...

08003fc4 <_printf_i>:
 8003fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	460c      	mov	r4, r1
 8003fca:	7e27      	ldrb	r7, [r4, #24]
 8003fcc:	4691      	mov	r9, r2
 8003fce:	2f78      	cmp	r7, #120	; 0x78
 8003fd0:	4680      	mov	r8, r0
 8003fd2:	469a      	mov	sl, r3
 8003fd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fda:	d807      	bhi.n	8003fec <_printf_i+0x28>
 8003fdc:	2f62      	cmp	r7, #98	; 0x62
 8003fde:	d80a      	bhi.n	8003ff6 <_printf_i+0x32>
 8003fe0:	2f00      	cmp	r7, #0
 8003fe2:	f000 80d9 	beq.w	8004198 <_printf_i+0x1d4>
 8003fe6:	2f58      	cmp	r7, #88	; 0x58
 8003fe8:	f000 80a4 	beq.w	8004134 <_printf_i+0x170>
 8003fec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff4:	e03a      	b.n	800406c <_printf_i+0xa8>
 8003ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ffa:	2b15      	cmp	r3, #21
 8003ffc:	d8f6      	bhi.n	8003fec <_printf_i+0x28>
 8003ffe:	a001      	add	r0, pc, #4	; (adr r0, 8004004 <_printf_i+0x40>)
 8004000:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004004:	0800405d 	.word	0x0800405d
 8004008:	08004071 	.word	0x08004071
 800400c:	08003fed 	.word	0x08003fed
 8004010:	08003fed 	.word	0x08003fed
 8004014:	08003fed 	.word	0x08003fed
 8004018:	08003fed 	.word	0x08003fed
 800401c:	08004071 	.word	0x08004071
 8004020:	08003fed 	.word	0x08003fed
 8004024:	08003fed 	.word	0x08003fed
 8004028:	08003fed 	.word	0x08003fed
 800402c:	08003fed 	.word	0x08003fed
 8004030:	0800417f 	.word	0x0800417f
 8004034:	080040a1 	.word	0x080040a1
 8004038:	08004161 	.word	0x08004161
 800403c:	08003fed 	.word	0x08003fed
 8004040:	08003fed 	.word	0x08003fed
 8004044:	080041a1 	.word	0x080041a1
 8004048:	08003fed 	.word	0x08003fed
 800404c:	080040a1 	.word	0x080040a1
 8004050:	08003fed 	.word	0x08003fed
 8004054:	08003fed 	.word	0x08003fed
 8004058:	08004169 	.word	0x08004169
 800405c:	680b      	ldr	r3, [r1, #0]
 800405e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004062:	1d1a      	adds	r2, r3, #4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	600a      	str	r2, [r1, #0]
 8004068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800406c:	2301      	movs	r3, #1
 800406e:	e0a4      	b.n	80041ba <_printf_i+0x1f6>
 8004070:	6825      	ldr	r5, [r4, #0]
 8004072:	6808      	ldr	r0, [r1, #0]
 8004074:	062e      	lsls	r6, r5, #24
 8004076:	f100 0304 	add.w	r3, r0, #4
 800407a:	d50a      	bpl.n	8004092 <_printf_i+0xce>
 800407c:	6805      	ldr	r5, [r0, #0]
 800407e:	600b      	str	r3, [r1, #0]
 8004080:	2d00      	cmp	r5, #0
 8004082:	da03      	bge.n	800408c <_printf_i+0xc8>
 8004084:	232d      	movs	r3, #45	; 0x2d
 8004086:	426d      	negs	r5, r5
 8004088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800408c:	230a      	movs	r3, #10
 800408e:	485e      	ldr	r0, [pc, #376]	; (8004208 <_printf_i+0x244>)
 8004090:	e019      	b.n	80040c6 <_printf_i+0x102>
 8004092:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004096:	6805      	ldr	r5, [r0, #0]
 8004098:	600b      	str	r3, [r1, #0]
 800409a:	bf18      	it	ne
 800409c:	b22d      	sxthne	r5, r5
 800409e:	e7ef      	b.n	8004080 <_printf_i+0xbc>
 80040a0:	680b      	ldr	r3, [r1, #0]
 80040a2:	6825      	ldr	r5, [r4, #0]
 80040a4:	1d18      	adds	r0, r3, #4
 80040a6:	6008      	str	r0, [r1, #0]
 80040a8:	0628      	lsls	r0, r5, #24
 80040aa:	d501      	bpl.n	80040b0 <_printf_i+0xec>
 80040ac:	681d      	ldr	r5, [r3, #0]
 80040ae:	e002      	b.n	80040b6 <_printf_i+0xf2>
 80040b0:	0669      	lsls	r1, r5, #25
 80040b2:	d5fb      	bpl.n	80040ac <_printf_i+0xe8>
 80040b4:	881d      	ldrh	r5, [r3, #0]
 80040b6:	2f6f      	cmp	r7, #111	; 0x6f
 80040b8:	bf0c      	ite	eq
 80040ba:	2308      	moveq	r3, #8
 80040bc:	230a      	movne	r3, #10
 80040be:	4852      	ldr	r0, [pc, #328]	; (8004208 <_printf_i+0x244>)
 80040c0:	2100      	movs	r1, #0
 80040c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040c6:	6866      	ldr	r6, [r4, #4]
 80040c8:	2e00      	cmp	r6, #0
 80040ca:	bfa8      	it	ge
 80040cc:	6821      	ldrge	r1, [r4, #0]
 80040ce:	60a6      	str	r6, [r4, #8]
 80040d0:	bfa4      	itt	ge
 80040d2:	f021 0104 	bicge.w	r1, r1, #4
 80040d6:	6021      	strge	r1, [r4, #0]
 80040d8:	b90d      	cbnz	r5, 80040de <_printf_i+0x11a>
 80040da:	2e00      	cmp	r6, #0
 80040dc:	d04d      	beq.n	800417a <_printf_i+0x1b6>
 80040de:	4616      	mov	r6, r2
 80040e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80040e4:	fb03 5711 	mls	r7, r3, r1, r5
 80040e8:	5dc7      	ldrb	r7, [r0, r7]
 80040ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040ee:	462f      	mov	r7, r5
 80040f0:	42bb      	cmp	r3, r7
 80040f2:	460d      	mov	r5, r1
 80040f4:	d9f4      	bls.n	80040e0 <_printf_i+0x11c>
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d10b      	bne.n	8004112 <_printf_i+0x14e>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	07df      	lsls	r7, r3, #31
 80040fe:	d508      	bpl.n	8004112 <_printf_i+0x14e>
 8004100:	6923      	ldr	r3, [r4, #16]
 8004102:	6861      	ldr	r1, [r4, #4]
 8004104:	4299      	cmp	r1, r3
 8004106:	bfde      	ittt	le
 8004108:	2330      	movle	r3, #48	; 0x30
 800410a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800410e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004112:	1b92      	subs	r2, r2, r6
 8004114:	6122      	str	r2, [r4, #16]
 8004116:	464b      	mov	r3, r9
 8004118:	4621      	mov	r1, r4
 800411a:	4640      	mov	r0, r8
 800411c:	f8cd a000 	str.w	sl, [sp]
 8004120:	aa03      	add	r2, sp, #12
 8004122:	f7ff fedf 	bl	8003ee4 <_printf_common>
 8004126:	3001      	adds	r0, #1
 8004128:	d14c      	bne.n	80041c4 <_printf_i+0x200>
 800412a:	f04f 30ff 	mov.w	r0, #4294967295
 800412e:	b004      	add	sp, #16
 8004130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004134:	4834      	ldr	r0, [pc, #208]	; (8004208 <_printf_i+0x244>)
 8004136:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800413a:	680e      	ldr	r6, [r1, #0]
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004142:	061f      	lsls	r7, r3, #24
 8004144:	600e      	str	r6, [r1, #0]
 8004146:	d514      	bpl.n	8004172 <_printf_i+0x1ae>
 8004148:	07d9      	lsls	r1, r3, #31
 800414a:	bf44      	itt	mi
 800414c:	f043 0320 	orrmi.w	r3, r3, #32
 8004150:	6023      	strmi	r3, [r4, #0]
 8004152:	b91d      	cbnz	r5, 800415c <_printf_i+0x198>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f023 0320 	bic.w	r3, r3, #32
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	2310      	movs	r3, #16
 800415e:	e7af      	b.n	80040c0 <_printf_i+0xfc>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f043 0320 	orr.w	r3, r3, #32
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	2378      	movs	r3, #120	; 0x78
 800416a:	4828      	ldr	r0, [pc, #160]	; (800420c <_printf_i+0x248>)
 800416c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004170:	e7e3      	b.n	800413a <_printf_i+0x176>
 8004172:	065e      	lsls	r6, r3, #25
 8004174:	bf48      	it	mi
 8004176:	b2ad      	uxthmi	r5, r5
 8004178:	e7e6      	b.n	8004148 <_printf_i+0x184>
 800417a:	4616      	mov	r6, r2
 800417c:	e7bb      	b.n	80040f6 <_printf_i+0x132>
 800417e:	680b      	ldr	r3, [r1, #0]
 8004180:	6826      	ldr	r6, [r4, #0]
 8004182:	1d1d      	adds	r5, r3, #4
 8004184:	6960      	ldr	r0, [r4, #20]
 8004186:	600d      	str	r5, [r1, #0]
 8004188:	0635      	lsls	r5, r6, #24
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	d501      	bpl.n	8004192 <_printf_i+0x1ce>
 800418e:	6018      	str	r0, [r3, #0]
 8004190:	e002      	b.n	8004198 <_printf_i+0x1d4>
 8004192:	0671      	lsls	r1, r6, #25
 8004194:	d5fb      	bpl.n	800418e <_printf_i+0x1ca>
 8004196:	8018      	strh	r0, [r3, #0]
 8004198:	2300      	movs	r3, #0
 800419a:	4616      	mov	r6, r2
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	e7ba      	b.n	8004116 <_printf_i+0x152>
 80041a0:	680b      	ldr	r3, [r1, #0]
 80041a2:	1d1a      	adds	r2, r3, #4
 80041a4:	600a      	str	r2, [r1, #0]
 80041a6:	681e      	ldr	r6, [r3, #0]
 80041a8:	2100      	movs	r1, #0
 80041aa:	4630      	mov	r0, r6
 80041ac:	6862      	ldr	r2, [r4, #4]
 80041ae:	f000 f82f 	bl	8004210 <memchr>
 80041b2:	b108      	cbz	r0, 80041b8 <_printf_i+0x1f4>
 80041b4:	1b80      	subs	r0, r0, r6
 80041b6:	6060      	str	r0, [r4, #4]
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	6123      	str	r3, [r4, #16]
 80041bc:	2300      	movs	r3, #0
 80041be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c2:	e7a8      	b.n	8004116 <_printf_i+0x152>
 80041c4:	4632      	mov	r2, r6
 80041c6:	4649      	mov	r1, r9
 80041c8:	4640      	mov	r0, r8
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	47d0      	blx	sl
 80041ce:	3001      	adds	r0, #1
 80041d0:	d0ab      	beq.n	800412a <_printf_i+0x166>
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	079b      	lsls	r3, r3, #30
 80041d6:	d413      	bmi.n	8004200 <_printf_i+0x23c>
 80041d8:	68e0      	ldr	r0, [r4, #12]
 80041da:	9b03      	ldr	r3, [sp, #12]
 80041dc:	4298      	cmp	r0, r3
 80041de:	bfb8      	it	lt
 80041e0:	4618      	movlt	r0, r3
 80041e2:	e7a4      	b.n	800412e <_printf_i+0x16a>
 80041e4:	2301      	movs	r3, #1
 80041e6:	4632      	mov	r2, r6
 80041e8:	4649      	mov	r1, r9
 80041ea:	4640      	mov	r0, r8
 80041ec:	47d0      	blx	sl
 80041ee:	3001      	adds	r0, #1
 80041f0:	d09b      	beq.n	800412a <_printf_i+0x166>
 80041f2:	3501      	adds	r5, #1
 80041f4:	68e3      	ldr	r3, [r4, #12]
 80041f6:	9903      	ldr	r1, [sp, #12]
 80041f8:	1a5b      	subs	r3, r3, r1
 80041fa:	42ab      	cmp	r3, r5
 80041fc:	dcf2      	bgt.n	80041e4 <_printf_i+0x220>
 80041fe:	e7eb      	b.n	80041d8 <_printf_i+0x214>
 8004200:	2500      	movs	r5, #0
 8004202:	f104 0619 	add.w	r6, r4, #25
 8004206:	e7f5      	b.n	80041f4 <_printf_i+0x230>
 8004208:	080044bd 	.word	0x080044bd
 800420c:	080044ce 	.word	0x080044ce

08004210 <memchr>:
 8004210:	4603      	mov	r3, r0
 8004212:	b510      	push	{r4, lr}
 8004214:	b2c9      	uxtb	r1, r1
 8004216:	4402      	add	r2, r0
 8004218:	4293      	cmp	r3, r2
 800421a:	4618      	mov	r0, r3
 800421c:	d101      	bne.n	8004222 <memchr+0x12>
 800421e:	2000      	movs	r0, #0
 8004220:	e003      	b.n	800422a <memchr+0x1a>
 8004222:	7804      	ldrb	r4, [r0, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	428c      	cmp	r4, r1
 8004228:	d1f6      	bne.n	8004218 <memchr+0x8>
 800422a:	bd10      	pop	{r4, pc}

0800422c <memcpy>:
 800422c:	440a      	add	r2, r1
 800422e:	4291      	cmp	r1, r2
 8004230:	f100 33ff 	add.w	r3, r0, #4294967295
 8004234:	d100      	bne.n	8004238 <memcpy+0xc>
 8004236:	4770      	bx	lr
 8004238:	b510      	push	{r4, lr}
 800423a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800423e:	4291      	cmp	r1, r2
 8004240:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004244:	d1f9      	bne.n	800423a <memcpy+0xe>
 8004246:	bd10      	pop	{r4, pc}

08004248 <memmove>:
 8004248:	4288      	cmp	r0, r1
 800424a:	b510      	push	{r4, lr}
 800424c:	eb01 0402 	add.w	r4, r1, r2
 8004250:	d902      	bls.n	8004258 <memmove+0x10>
 8004252:	4284      	cmp	r4, r0
 8004254:	4623      	mov	r3, r4
 8004256:	d807      	bhi.n	8004268 <memmove+0x20>
 8004258:	1e43      	subs	r3, r0, #1
 800425a:	42a1      	cmp	r1, r4
 800425c:	d008      	beq.n	8004270 <memmove+0x28>
 800425e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004262:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004266:	e7f8      	b.n	800425a <memmove+0x12>
 8004268:	4601      	mov	r1, r0
 800426a:	4402      	add	r2, r0
 800426c:	428a      	cmp	r2, r1
 800426e:	d100      	bne.n	8004272 <memmove+0x2a>
 8004270:	bd10      	pop	{r4, pc}
 8004272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800427a:	e7f7      	b.n	800426c <memmove+0x24>

0800427c <_free_r>:
 800427c:	b538      	push	{r3, r4, r5, lr}
 800427e:	4605      	mov	r5, r0
 8004280:	2900      	cmp	r1, #0
 8004282:	d043      	beq.n	800430c <_free_r+0x90>
 8004284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004288:	1f0c      	subs	r4, r1, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	bfb8      	it	lt
 800428e:	18e4      	addlt	r4, r4, r3
 8004290:	f000 f8d0 	bl	8004434 <__malloc_lock>
 8004294:	4a1e      	ldr	r2, [pc, #120]	; (8004310 <_free_r+0x94>)
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	4610      	mov	r0, r2
 800429a:	b933      	cbnz	r3, 80042aa <_free_r+0x2e>
 800429c:	6063      	str	r3, [r4, #4]
 800429e:	6014      	str	r4, [r2, #0]
 80042a0:	4628      	mov	r0, r5
 80042a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042a6:	f000 b8cb 	b.w	8004440 <__malloc_unlock>
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	d90a      	bls.n	80042c4 <_free_r+0x48>
 80042ae:	6821      	ldr	r1, [r4, #0]
 80042b0:	1862      	adds	r2, r4, r1
 80042b2:	4293      	cmp	r3, r2
 80042b4:	bf01      	itttt	eq
 80042b6:	681a      	ldreq	r2, [r3, #0]
 80042b8:	685b      	ldreq	r3, [r3, #4]
 80042ba:	1852      	addeq	r2, r2, r1
 80042bc:	6022      	streq	r2, [r4, #0]
 80042be:	6063      	str	r3, [r4, #4]
 80042c0:	6004      	str	r4, [r0, #0]
 80042c2:	e7ed      	b.n	80042a0 <_free_r+0x24>
 80042c4:	461a      	mov	r2, r3
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	b10b      	cbz	r3, 80042ce <_free_r+0x52>
 80042ca:	42a3      	cmp	r3, r4
 80042cc:	d9fa      	bls.n	80042c4 <_free_r+0x48>
 80042ce:	6811      	ldr	r1, [r2, #0]
 80042d0:	1850      	adds	r0, r2, r1
 80042d2:	42a0      	cmp	r0, r4
 80042d4:	d10b      	bne.n	80042ee <_free_r+0x72>
 80042d6:	6820      	ldr	r0, [r4, #0]
 80042d8:	4401      	add	r1, r0
 80042da:	1850      	adds	r0, r2, r1
 80042dc:	4283      	cmp	r3, r0
 80042de:	6011      	str	r1, [r2, #0]
 80042e0:	d1de      	bne.n	80042a0 <_free_r+0x24>
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4401      	add	r1, r0
 80042e8:	6011      	str	r1, [r2, #0]
 80042ea:	6053      	str	r3, [r2, #4]
 80042ec:	e7d8      	b.n	80042a0 <_free_r+0x24>
 80042ee:	d902      	bls.n	80042f6 <_free_r+0x7a>
 80042f0:	230c      	movs	r3, #12
 80042f2:	602b      	str	r3, [r5, #0]
 80042f4:	e7d4      	b.n	80042a0 <_free_r+0x24>
 80042f6:	6820      	ldr	r0, [r4, #0]
 80042f8:	1821      	adds	r1, r4, r0
 80042fa:	428b      	cmp	r3, r1
 80042fc:	bf01      	itttt	eq
 80042fe:	6819      	ldreq	r1, [r3, #0]
 8004300:	685b      	ldreq	r3, [r3, #4]
 8004302:	1809      	addeq	r1, r1, r0
 8004304:	6021      	streq	r1, [r4, #0]
 8004306:	6063      	str	r3, [r4, #4]
 8004308:	6054      	str	r4, [r2, #4]
 800430a:	e7c9      	b.n	80042a0 <_free_r+0x24>
 800430c:	bd38      	pop	{r3, r4, r5, pc}
 800430e:	bf00      	nop
 8004310:	200000e0 	.word	0x200000e0

08004314 <_malloc_r>:
 8004314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004316:	1ccd      	adds	r5, r1, #3
 8004318:	f025 0503 	bic.w	r5, r5, #3
 800431c:	3508      	adds	r5, #8
 800431e:	2d0c      	cmp	r5, #12
 8004320:	bf38      	it	cc
 8004322:	250c      	movcc	r5, #12
 8004324:	2d00      	cmp	r5, #0
 8004326:	4606      	mov	r6, r0
 8004328:	db01      	blt.n	800432e <_malloc_r+0x1a>
 800432a:	42a9      	cmp	r1, r5
 800432c:	d903      	bls.n	8004336 <_malloc_r+0x22>
 800432e:	230c      	movs	r3, #12
 8004330:	6033      	str	r3, [r6, #0]
 8004332:	2000      	movs	r0, #0
 8004334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004336:	f000 f87d 	bl	8004434 <__malloc_lock>
 800433a:	4921      	ldr	r1, [pc, #132]	; (80043c0 <_malloc_r+0xac>)
 800433c:	680a      	ldr	r2, [r1, #0]
 800433e:	4614      	mov	r4, r2
 8004340:	b99c      	cbnz	r4, 800436a <_malloc_r+0x56>
 8004342:	4f20      	ldr	r7, [pc, #128]	; (80043c4 <_malloc_r+0xb0>)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	b923      	cbnz	r3, 8004352 <_malloc_r+0x3e>
 8004348:	4621      	mov	r1, r4
 800434a:	4630      	mov	r0, r6
 800434c:	f000 f862 	bl	8004414 <_sbrk_r>
 8004350:	6038      	str	r0, [r7, #0]
 8004352:	4629      	mov	r1, r5
 8004354:	4630      	mov	r0, r6
 8004356:	f000 f85d 	bl	8004414 <_sbrk_r>
 800435a:	1c43      	adds	r3, r0, #1
 800435c:	d123      	bne.n	80043a6 <_malloc_r+0x92>
 800435e:	230c      	movs	r3, #12
 8004360:	4630      	mov	r0, r6
 8004362:	6033      	str	r3, [r6, #0]
 8004364:	f000 f86c 	bl	8004440 <__malloc_unlock>
 8004368:	e7e3      	b.n	8004332 <_malloc_r+0x1e>
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	1b5b      	subs	r3, r3, r5
 800436e:	d417      	bmi.n	80043a0 <_malloc_r+0x8c>
 8004370:	2b0b      	cmp	r3, #11
 8004372:	d903      	bls.n	800437c <_malloc_r+0x68>
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	441c      	add	r4, r3
 8004378:	6025      	str	r5, [r4, #0]
 800437a:	e004      	b.n	8004386 <_malloc_r+0x72>
 800437c:	6863      	ldr	r3, [r4, #4]
 800437e:	42a2      	cmp	r2, r4
 8004380:	bf0c      	ite	eq
 8004382:	600b      	streq	r3, [r1, #0]
 8004384:	6053      	strne	r3, [r2, #4]
 8004386:	4630      	mov	r0, r6
 8004388:	f000 f85a 	bl	8004440 <__malloc_unlock>
 800438c:	f104 000b 	add.w	r0, r4, #11
 8004390:	1d23      	adds	r3, r4, #4
 8004392:	f020 0007 	bic.w	r0, r0, #7
 8004396:	1ac2      	subs	r2, r0, r3
 8004398:	d0cc      	beq.n	8004334 <_malloc_r+0x20>
 800439a:	1a1b      	subs	r3, r3, r0
 800439c:	50a3      	str	r3, [r4, r2]
 800439e:	e7c9      	b.n	8004334 <_malloc_r+0x20>
 80043a0:	4622      	mov	r2, r4
 80043a2:	6864      	ldr	r4, [r4, #4]
 80043a4:	e7cc      	b.n	8004340 <_malloc_r+0x2c>
 80043a6:	1cc4      	adds	r4, r0, #3
 80043a8:	f024 0403 	bic.w	r4, r4, #3
 80043ac:	42a0      	cmp	r0, r4
 80043ae:	d0e3      	beq.n	8004378 <_malloc_r+0x64>
 80043b0:	1a21      	subs	r1, r4, r0
 80043b2:	4630      	mov	r0, r6
 80043b4:	f000 f82e 	bl	8004414 <_sbrk_r>
 80043b8:	3001      	adds	r0, #1
 80043ba:	d1dd      	bne.n	8004378 <_malloc_r+0x64>
 80043bc:	e7cf      	b.n	800435e <_malloc_r+0x4a>
 80043be:	bf00      	nop
 80043c0:	200000e0 	.word	0x200000e0
 80043c4:	200000e4 	.word	0x200000e4

080043c8 <_realloc_r>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	4607      	mov	r7, r0
 80043cc:	4614      	mov	r4, r2
 80043ce:	460e      	mov	r6, r1
 80043d0:	b921      	cbnz	r1, 80043dc <_realloc_r+0x14>
 80043d2:	4611      	mov	r1, r2
 80043d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043d8:	f7ff bf9c 	b.w	8004314 <_malloc_r>
 80043dc:	b922      	cbnz	r2, 80043e8 <_realloc_r+0x20>
 80043de:	f7ff ff4d 	bl	800427c <_free_r>
 80043e2:	4625      	mov	r5, r4
 80043e4:	4628      	mov	r0, r5
 80043e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043e8:	f000 f830 	bl	800444c <_malloc_usable_size_r>
 80043ec:	42a0      	cmp	r0, r4
 80043ee:	d20f      	bcs.n	8004410 <_realloc_r+0x48>
 80043f0:	4621      	mov	r1, r4
 80043f2:	4638      	mov	r0, r7
 80043f4:	f7ff ff8e 	bl	8004314 <_malloc_r>
 80043f8:	4605      	mov	r5, r0
 80043fa:	2800      	cmp	r0, #0
 80043fc:	d0f2      	beq.n	80043e4 <_realloc_r+0x1c>
 80043fe:	4631      	mov	r1, r6
 8004400:	4622      	mov	r2, r4
 8004402:	f7ff ff13 	bl	800422c <memcpy>
 8004406:	4631      	mov	r1, r6
 8004408:	4638      	mov	r0, r7
 800440a:	f7ff ff37 	bl	800427c <_free_r>
 800440e:	e7e9      	b.n	80043e4 <_realloc_r+0x1c>
 8004410:	4635      	mov	r5, r6
 8004412:	e7e7      	b.n	80043e4 <_realloc_r+0x1c>

08004414 <_sbrk_r>:
 8004414:	b538      	push	{r3, r4, r5, lr}
 8004416:	2300      	movs	r3, #0
 8004418:	4d05      	ldr	r5, [pc, #20]	; (8004430 <_sbrk_r+0x1c>)
 800441a:	4604      	mov	r4, r0
 800441c:	4608      	mov	r0, r1
 800441e:	602b      	str	r3, [r5, #0]
 8004420:	f7fc fee2 	bl	80011e8 <_sbrk>
 8004424:	1c43      	adds	r3, r0, #1
 8004426:	d102      	bne.n	800442e <_sbrk_r+0x1a>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	b103      	cbz	r3, 800442e <_sbrk_r+0x1a>
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	bd38      	pop	{r3, r4, r5, pc}
 8004430:	200001f4 	.word	0x200001f4

08004434 <__malloc_lock>:
 8004434:	4801      	ldr	r0, [pc, #4]	; (800443c <__malloc_lock+0x8>)
 8004436:	f000 b811 	b.w	800445c <__retarget_lock_acquire_recursive>
 800443a:	bf00      	nop
 800443c:	200001fc 	.word	0x200001fc

08004440 <__malloc_unlock>:
 8004440:	4801      	ldr	r0, [pc, #4]	; (8004448 <__malloc_unlock+0x8>)
 8004442:	f000 b80c 	b.w	800445e <__retarget_lock_release_recursive>
 8004446:	bf00      	nop
 8004448:	200001fc 	.word	0x200001fc

0800444c <_malloc_usable_size_r>:
 800444c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004450:	1f18      	subs	r0, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	bfbc      	itt	lt
 8004456:	580b      	ldrlt	r3, [r1, r0]
 8004458:	18c0      	addlt	r0, r0, r3
 800445a:	4770      	bx	lr

0800445c <__retarget_lock_acquire_recursive>:
 800445c:	4770      	bx	lr

0800445e <__retarget_lock_release_recursive>:
 800445e:	4770      	bx	lr

08004460 <_init>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	bf00      	nop
 8004464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004466:	bc08      	pop	{r3}
 8004468:	469e      	mov	lr, r3
 800446a:	4770      	bx	lr

0800446c <_fini>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	bf00      	nop
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr
