
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d14  08003d14  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d14  08003d14  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d14  08003d14  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d14  08003d14  00013d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003d1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000008c  08003da8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08003da8  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e08  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e7  00000000  00000000  00031ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  000347a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  000354c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186bc  00000000  00000000  00036098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe7f  00000000  00000000  0004e754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008adc2  00000000  00000000  0005e5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9395  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003724  00000000  00000000  000e93e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000008c 	.word	0x2000008c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003c9c 	.word	0x08003c9c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000090 	.word	0x20000090
 8000148:	08003c9c 	.word	0x08003c9c

0800014c <changeToM2>:



#include"M1_fsm.h"
#include"Pedestrian_Buzzer.h"
void changeToM2(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 0);
 8000150:	2200      	movs	r2, #0
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	481c      	ldr	r0, [pc, #112]	; (80001c8 <changeToM2+0x7c>)
 8000158:	f001 fbd3 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 0);
 800015c:	2200      	movs	r2, #0
 800015e:	2108      	movs	r1, #8
 8000160:	481a      	ldr	r0, [pc, #104]	; (80001cc <changeToM2+0x80>)
 8000162:	f001 fbce 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 0);
 8000166:	2200      	movs	r2, #0
 8000168:	2120      	movs	r1, #32
 800016a:	4818      	ldr	r0, [pc, #96]	; (80001cc <changeToM2+0x80>)
 800016c:	f001 fbc9 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 0);
 8000170:	2200      	movs	r2, #0
 8000172:	2110      	movs	r1, #16
 8000174:	4815      	ldr	r0, [pc, #84]	; (80001cc <changeToM2+0x80>)
 8000176:	f001 fbc4 	bl	8001902 <HAL_GPIO_WritePin>

	// Turn off the Pedestrian led and Buzzer
	Pedes_press = 0;
 800017a:	4b15      	ldr	r3, [pc, #84]	; (80001d0 <changeToM2+0x84>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
	resetBuzzer();
 8000180:	f000 fb32 	bl	80007e8 <resetBuzzer>
	HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 0);
 8000184:	2200      	movs	r2, #0
 8000186:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800018a:	4810      	ldr	r0, [pc, #64]	; (80001cc <changeToM2+0x80>)
 800018c:	f001 fbb9 	bl	8001902 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 0);
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000196:	480c      	ldr	r0, [pc, #48]	; (80001c8 <changeToM2+0x7c>)
 8000198:	f001 fbb3 	bl	8001902 <HAL_GPIO_WritePin>


	status = M2;
 800019c:	4b0d      	ldr	r3, [pc, #52]	; (80001d4 <changeToM2+0x88>)
 800019e:	2214      	movs	r2, #20
 80001a0:	601a      	str	r2, [r3, #0]
	count1 = 10;
 80001a2:	4b0d      	ldr	r3, [pc, #52]	; (80001d8 <changeToM2+0x8c>)
 80001a4:	220a      	movs	r2, #10
 80001a6:	601a      	str	r2, [r3, #0]
	count2 = 0;
 80001a8:	4b0c      	ldr	r3, [pc, #48]	; (80001dc <changeToM2+0x90>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
	setTimer1(1000);	//Timer 1 to countdown the number display on 2 Led.
 80001ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b2:	f000 fe31 	bl	8000e18 <setTimer1>
	setTimer2(10000);	//Timer 2 is the quantity of time machine in mode 2 without increasing time.
 80001b6:	f242 7010 	movw	r0, #10000	; 0x2710
 80001ba:	f000 fe47 	bl	8000e4c <setTimer2>
	setTimer3(250);		//Timer 3 to set RED Led blinky 2Hz
 80001be:	20fa      	movs	r0, #250	; 0xfa
 80001c0:	f000 fe5e 	bl	8000e80 <setTimer3>
}
 80001c4:	bf00      	nop
 80001c6:	bd80      	pop	{r7, pc}
 80001c8:	40010800 	.word	0x40010800
 80001cc:	40010c00 	.word	0x40010c00
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	200000a8 	.word	0x200000a8
 80001d8:	200000ac 	.word	0x200000ac
 80001dc:	200000b0 	.word	0x200000b0

080001e0 <M1_fsm_run>:

void M1_fsm_run(){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	switch(status){
 80001e4:	4b9b      	ldr	r3, [pc, #620]	; (8000454 <M1_fsm_run+0x274>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b0e      	cmp	r3, #14
 80001ea:	f200 812f 	bhi.w	800044c <M1_fsm_run+0x26c>
 80001ee:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <M1_fsm_run+0x14>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	08000231 	.word	0x08000231
 80001f8:	0800044d 	.word	0x0800044d
 80001fc:	0800044d 	.word	0x0800044d
 8000200:	0800044d 	.word	0x0800044d
 8000204:	0800044d 	.word	0x0800044d
 8000208:	0800044d 	.word	0x0800044d
 800020c:	0800044d 	.word	0x0800044d
 8000210:	0800044d 	.word	0x0800044d
 8000214:	0800044d 	.word	0x0800044d
 8000218:	0800044d 	.word	0x0800044d
 800021c:	0800044d 	.word	0x0800044d
 8000220:	08000255 	.word	0x08000255
 8000224:	080002d3 	.word	0x080002d3
 8000228:	08000351 	.word	0x08000351
 800022c:	080003cf 	.word	0x080003cf
	case INIT:
		count1 = 25;
 8000230:	4b89      	ldr	r3, [pc, #548]	; (8000458 <M1_fsm_run+0x278>)
 8000232:	2219      	movs	r2, #25
 8000234:	601a      	str	r2, [r3, #0]
		count2 = 0;
 8000236:	4b89      	ldr	r3, [pc, #548]	; (800045c <M1_fsm_run+0x27c>)
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
		status = M1_RED_GREEN;
 800023c:	4b85      	ldr	r3, [pc, #532]	; (8000454 <M1_fsm_run+0x274>)
 800023e:	220b      	movs	r2, #11
 8000240:	601a      	str	r2, [r3, #0]
		setTimer1(1000);	//timer 1 to countdown the number display on LED
 8000242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000246:	f000 fde7 	bl	8000e18 <setTimer1>
		setTimer2(25000);	//timer 2 to perform 2 traffic light
 800024a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800024e:	f000 fdfd 	bl	8000e4c <setTimer2>
		break;
 8000252:	e0fc      	b.n	800044e <M1_fsm_run+0x26e>
	case M1_RED_GREEN:
		//TODO
		//Write pin for first traffic light:	RED
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 1);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800025a:	4881      	ldr	r0, [pc, #516]	; (8000460 <M1_fsm_run+0x280>)
 800025c:	f001 fb51 	bl	8001902 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 0);
 8000260:	2200      	movs	r2, #0
 8000262:	2108      	movs	r1, #8
 8000264:	487f      	ldr	r0, [pc, #508]	; (8000464 <M1_fsm_run+0x284>)
 8000266:	f001 fb4c 	bl	8001902 <HAL_GPIO_WritePin>

		//Write pin for second traffic light:	GREEN
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 0);
 800026a:	2200      	movs	r2, #0
 800026c:	2120      	movs	r1, #32
 800026e:	487d      	ldr	r0, [pc, #500]	; (8000464 <M1_fsm_run+0x284>)
 8000270:	f001 fb47 	bl	8001902 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 1);
 8000274:	2201      	movs	r2, #1
 8000276:	2110      	movs	r1, #16
 8000278:	487a      	ldr	r0, [pc, #488]	; (8000464 <M1_fsm_run+0x284>)
 800027a:	f001 fb42 	bl	8001902 <HAL_GPIO_WritePin>


		if(timer1_flag == 1){
 800027e:	4b7a      	ldr	r3, [pc, #488]	; (8000468 <M1_fsm_run+0x288>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d108      	bne.n	8000298 <M1_fsm_run+0xb8>
			setTimer1(1000);
 8000286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800028a:	f000 fdc5 	bl	8000e18 <setTimer1>
			count1--;
 800028e:	4b72      	ldr	r3, [pc, #456]	; (8000458 <M1_fsm_run+0x278>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3b01      	subs	r3, #1
 8000294:	4a70      	ldr	r2, [pc, #448]	; (8000458 <M1_fsm_run+0x278>)
 8000296:	6013      	str	r3, [r2, #0]
		}

		if(timer2_flag == 1){
 8000298:	4b74      	ldr	r3, [pc, #464]	; (800046c <M1_fsm_run+0x28c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d10d      	bne.n	80002bc <M1_fsm_run+0xdc>
			status = M1_RED_YELLOW;
 80002a0:	4b6c      	ldr	r3, [pc, #432]	; (8000454 <M1_fsm_run+0x274>)
 80002a2:	220c      	movs	r2, #12
 80002a4:	601a      	str	r2, [r3, #0]
			count1 = 5;
 80002a6:	4b6c      	ldr	r3, [pc, #432]	; (8000458 <M1_fsm_run+0x278>)
 80002a8:	2205      	movs	r2, #5
 80002aa:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80002ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002b0:	f000 fdb2 	bl	8000e18 <setTimer1>
			setTimer2(5000);
 80002b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80002b8:	f000 fdc8 	bl	8000e4c <setTimer2>
		}
		//Switch to Mode 2
		if(is_button_pressed(1)){
 80002bc:	2001      	movs	r0, #1
 80002be:	f000 fb91 	bl	80009e4 <is_button_pressed>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <M1_fsm_run+0xec>
			changeToM2();
 80002c8:	f7ff ff40 	bl	800014c <changeToM2>
		}
		//check whether user increases time or not.
		check_button_add_time();
 80002cc:	f000 faae 	bl	800082c <check_button_add_time>
		break;
 80002d0:	e0bd      	b.n	800044e <M1_fsm_run+0x26e>
	case M1_RED_YELLOW:
		//TODO
		//Write pin for first traffic light:	RED
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 1);
 80002d2:	2201      	movs	r2, #1
 80002d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d8:	4861      	ldr	r0, [pc, #388]	; (8000460 <M1_fsm_run+0x280>)
 80002da:	f001 fb12 	bl	8001902 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 0);
 80002de:	2200      	movs	r2, #0
 80002e0:	2108      	movs	r1, #8
 80002e2:	4860      	ldr	r0, [pc, #384]	; (8000464 <M1_fsm_run+0x284>)
 80002e4:	f001 fb0d 	bl	8001902 <HAL_GPIO_WritePin>

		//Write pin for second traffic light:	YELLOW
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 1);
 80002e8:	2201      	movs	r2, #1
 80002ea:	2120      	movs	r1, #32
 80002ec:	485d      	ldr	r0, [pc, #372]	; (8000464 <M1_fsm_run+0x284>)
 80002ee:	f001 fb08 	bl	8001902 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 1);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2110      	movs	r1, #16
 80002f6:	485b      	ldr	r0, [pc, #364]	; (8000464 <M1_fsm_run+0x284>)
 80002f8:	f001 fb03 	bl	8001902 <HAL_GPIO_WritePin>


		if(timer1_flag == 1){
 80002fc:	4b5a      	ldr	r3, [pc, #360]	; (8000468 <M1_fsm_run+0x288>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d108      	bne.n	8000316 <M1_fsm_run+0x136>
			setTimer1(1000);
 8000304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000308:	f000 fd86 	bl	8000e18 <setTimer1>
			count1--;
 800030c:	4b52      	ldr	r3, [pc, #328]	; (8000458 <M1_fsm_run+0x278>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3b01      	subs	r3, #1
 8000312:	4a51      	ldr	r2, [pc, #324]	; (8000458 <M1_fsm_run+0x278>)
 8000314:	6013      	str	r3, [r2, #0]
		}

		if(timer2_flag == 1){
 8000316:	4b55      	ldr	r3, [pc, #340]	; (800046c <M1_fsm_run+0x28c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d10d      	bne.n	800033a <M1_fsm_run+0x15a>
			status = M1_GREEN_RED;
 800031e:	4b4d      	ldr	r3, [pc, #308]	; (8000454 <M1_fsm_run+0x274>)
 8000320:	220d      	movs	r2, #13
 8000322:	601a      	str	r2, [r3, #0]
			count1 = 25;
 8000324:	4b4c      	ldr	r3, [pc, #304]	; (8000458 <M1_fsm_run+0x278>)
 8000326:	2219      	movs	r2, #25
 8000328:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 800032a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800032e:	f000 fd73 	bl	8000e18 <setTimer1>
			setTimer2(25000);
 8000332:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000336:	f000 fd89 	bl	8000e4c <setTimer2>
		}

		//Switch to Mode 2
		if(is_button_pressed(1)){
 800033a:	2001      	movs	r0, #1
 800033c:	f000 fb52 	bl	80009e4 <is_button_pressed>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <M1_fsm_run+0x16a>
			changeToM2();
 8000346:	f7ff ff01 	bl	800014c <changeToM2>
		}
		//check whether user increases time or not.
		check_button_add_time();
 800034a:	f000 fa6f 	bl	800082c <check_button_add_time>
		break;
 800034e:	e07e      	b.n	800044e <M1_fsm_run+0x26e>
	case M1_GREEN_RED:
		//TODO
		//Write pin for first traffic light:	GREEN
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000356:	4842      	ldr	r0, [pc, #264]	; (8000460 <M1_fsm_run+0x280>)
 8000358:	f001 fad3 	bl	8001902 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 1);
 800035c:	2201      	movs	r2, #1
 800035e:	2108      	movs	r1, #8
 8000360:	4840      	ldr	r0, [pc, #256]	; (8000464 <M1_fsm_run+0x284>)
 8000362:	f001 face 	bl	8001902 <HAL_GPIO_WritePin>

		//Write pin for second traffic light:	RED
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 1);
 8000366:	2201      	movs	r2, #1
 8000368:	2120      	movs	r1, #32
 800036a:	483e      	ldr	r0, [pc, #248]	; (8000464 <M1_fsm_run+0x284>)
 800036c:	f001 fac9 	bl	8001902 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 0);
 8000370:	2200      	movs	r2, #0
 8000372:	2110      	movs	r1, #16
 8000374:	483b      	ldr	r0, [pc, #236]	; (8000464 <M1_fsm_run+0x284>)
 8000376:	f001 fac4 	bl	8001902 <HAL_GPIO_WritePin>


		if(timer1_flag == 1){
 800037a:	4b3b      	ldr	r3, [pc, #236]	; (8000468 <M1_fsm_run+0x288>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b01      	cmp	r3, #1
 8000380:	d108      	bne.n	8000394 <M1_fsm_run+0x1b4>
			setTimer1(1000);
 8000382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000386:	f000 fd47 	bl	8000e18 <setTimer1>
			count1--;
 800038a:	4b33      	ldr	r3, [pc, #204]	; (8000458 <M1_fsm_run+0x278>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	3b01      	subs	r3, #1
 8000390:	4a31      	ldr	r2, [pc, #196]	; (8000458 <M1_fsm_run+0x278>)
 8000392:	6013      	str	r3, [r2, #0]
		}

		if(timer2_flag == 1){
 8000394:	4b35      	ldr	r3, [pc, #212]	; (800046c <M1_fsm_run+0x28c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d10d      	bne.n	80003b8 <M1_fsm_run+0x1d8>
			status = M1_YELLOW_RED;
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <M1_fsm_run+0x274>)
 800039e:	220e      	movs	r2, #14
 80003a0:	601a      	str	r2, [r3, #0]
			count1 = 5;
 80003a2:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <M1_fsm_run+0x278>)
 80003a4:	2205      	movs	r2, #5
 80003a6:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80003a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ac:	f000 fd34 	bl	8000e18 <setTimer1>
			setTimer2(5000);
 80003b0:	f241 3088 	movw	r0, #5000	; 0x1388
 80003b4:	f000 fd4a 	bl	8000e4c <setTimer2>
		}

		//Switch to Mode 2
		if(is_button_pressed(1)){
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 fb13 	bl	80009e4 <is_button_pressed>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <M1_fsm_run+0x1e8>
			changeToM2();
 80003c4:	f7ff fec2 	bl	800014c <changeToM2>
		}
		//check whether user increases time or not.
		check_button_add_time();
 80003c8:	f000 fa30 	bl	800082c <check_button_add_time>
		break;
 80003cc:	e03f      	b.n	800044e <M1_fsm_run+0x26e>
	case M1_YELLOW_RED:
		//TODO
		//Write pin for first traffic light:	YELLOW
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 1);
 80003ce:	2201      	movs	r2, #1
 80003d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003d4:	4822      	ldr	r0, [pc, #136]	; (8000460 <M1_fsm_run+0x280>)
 80003d6:	f001 fa94 	bl	8001902 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 1);
 80003da:	2201      	movs	r2, #1
 80003dc:	2108      	movs	r1, #8
 80003de:	4821      	ldr	r0, [pc, #132]	; (8000464 <M1_fsm_run+0x284>)
 80003e0:	f001 fa8f 	bl	8001902 <HAL_GPIO_WritePin>

		//Write pin for second traffic light:	RED
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 1);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2120      	movs	r1, #32
 80003e8:	481e      	ldr	r0, [pc, #120]	; (8000464 <M1_fsm_run+0x284>)
 80003ea:	f001 fa8a 	bl	8001902 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2110      	movs	r1, #16
 80003f2:	481c      	ldr	r0, [pc, #112]	; (8000464 <M1_fsm_run+0x284>)
 80003f4:	f001 fa85 	bl	8001902 <HAL_GPIO_WritePin>


		if(timer1_flag == 1){
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <M1_fsm_run+0x288>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d108      	bne.n	8000412 <M1_fsm_run+0x232>
			setTimer1(1000);
 8000400:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000404:	f000 fd08 	bl	8000e18 <setTimer1>
			count1--;
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <M1_fsm_run+0x278>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3b01      	subs	r3, #1
 800040e:	4a12      	ldr	r2, [pc, #72]	; (8000458 <M1_fsm_run+0x278>)
 8000410:	6013      	str	r3, [r2, #0]
		}
		if(timer2_flag == 1){
 8000412:	4b16      	ldr	r3, [pc, #88]	; (800046c <M1_fsm_run+0x28c>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	2b01      	cmp	r3, #1
 8000418:	d10d      	bne.n	8000436 <M1_fsm_run+0x256>
			status = M1_RED_GREEN;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <M1_fsm_run+0x274>)
 800041c:	220b      	movs	r2, #11
 800041e:	601a      	str	r2, [r3, #0]
			count1 = 25;
 8000420:	4b0d      	ldr	r3, [pc, #52]	; (8000458 <M1_fsm_run+0x278>)
 8000422:	2219      	movs	r2, #25
 8000424:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8000426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800042a:	f000 fcf5 	bl	8000e18 <setTimer1>
			setTimer2(25000);
 800042e:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000432:	f000 fd0b 	bl	8000e4c <setTimer2>
		}

		//Switch to Mode 2
		if(is_button_pressed(1)){
 8000436:	2001      	movs	r0, #1
 8000438:	f000 fad4 	bl	80009e4 <is_button_pressed>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <M1_fsm_run+0x266>
			changeToM2();
 8000442:	f7ff fe83 	bl	800014c <changeToM2>
		}
		//check whether user increases time or not.
		check_button_add_time();
 8000446:	f000 f9f1 	bl	800082c <check_button_add_time>
		break;
 800044a:	e000      	b.n	800044e <M1_fsm_run+0x26e>
	default:
		break;
 800044c:	bf00      	nop
	}
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000a8 	.word	0x200000a8
 8000458:	200000ac 	.word	0x200000ac
 800045c:	200000b0 	.word	0x200000b0
 8000460:	40010800 	.word	0x40010800
 8000464:	40010c00 	.word	0x40010c00
 8000468:	200000c0 	.word	0x200000c0
 800046c:	200000c8 	.word	0x200000c8

08000470 <M2_fsm_run>:
 */


#include "M2_fsm.h"

void M2_fsm_run(){
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	if(status == M2){
 8000474:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <M2_fsm_run+0xb4>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	2b14      	cmp	r3, #20
 800047a:	d151      	bne.n	8000520 <M2_fsm_run+0xb0>

		//Blinky RED Led in 2Hz
		if(timer3_flag == 1){
 800047c:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <M2_fsm_run+0xb8>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d10b      	bne.n	800049c <M2_fsm_run+0x2c>
			//blinky all RED Led
			HAL_GPIO_TogglePin(A1_GPIO_Port, A1_Pin);
 8000484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000488:	4828      	ldr	r0, [pc, #160]	; (800052c <M2_fsm_run+0xbc>)
 800048a:	f001 fa52 	bl	8001932 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(A2_GPIO_Port, A2_Pin);
 800048e:	2120      	movs	r1, #32
 8000490:	4827      	ldr	r0, [pc, #156]	; (8000530 <M2_fsm_run+0xc0>)
 8000492:	f001 fa4e 	bl	8001932 <HAL_GPIO_TogglePin>
			setTimer3(250);
 8000496:	20fa      	movs	r0, #250	; 0xfa
 8000498:	f000 fcf2 	bl	8000e80 <setTimer3>
		}

		//count down the number display on 7-seg LED
		if(timer1_flag == 1){
 800049c:	4b25      	ldr	r3, [pc, #148]	; (8000534 <M2_fsm_run+0xc4>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d108      	bne.n	80004b6 <M2_fsm_run+0x46>
			count1--;
 80004a4:	4b24      	ldr	r3, [pc, #144]	; (8000538 <M2_fsm_run+0xc8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3b01      	subs	r3, #1
 80004aa:	4a23      	ldr	r2, [pc, #140]	; (8000538 <M2_fsm_run+0xc8>)
 80004ac:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 80004ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004b2:	f000 fcb1 	bl	8000e18 <setTimer1>
		}

		//Switch to M3 mode
		if(is_button_pressed(1)||timer2_flag == 1){
 80004b6:	2001      	movs	r0, #1
 80004b8:	f000 fa94 	bl	80009e4 <is_button_pressed>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d103      	bne.n	80004ca <M2_fsm_run+0x5a>
 80004c2:	4b1e      	ldr	r3, [pc, #120]	; (800053c <M2_fsm_run+0xcc>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b01      	cmp	r3, #1
 80004c8:	d128      	bne.n	800051c <M2_fsm_run+0xac>
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d0:	4816      	ldr	r0, [pc, #88]	; (800052c <M2_fsm_run+0xbc>)
 80004d2:	f001 fa16 	bl	8001902 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2108      	movs	r1, #8
 80004da:	4815      	ldr	r0, [pc, #84]	; (8000530 <M2_fsm_run+0xc0>)
 80004dc:	f001 fa11 	bl	8001902 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2120      	movs	r1, #32
 80004e4:	4812      	ldr	r0, [pc, #72]	; (8000530 <M2_fsm_run+0xc0>)
 80004e6:	f001 fa0c 	bl	8001902 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2110      	movs	r1, #16
 80004ee:	4810      	ldr	r0, [pc, #64]	; (8000530 <M2_fsm_run+0xc0>)
 80004f0:	f001 fa07 	bl	8001902 <HAL_GPIO_WritePin>
			status = M3;
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <M2_fsm_run+0xb4>)
 80004f6:	221e      	movs	r2, #30
 80004f8:	601a      	str	r2, [r3, #0]
			count1 = 10;
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <M2_fsm_run+0xc8>)
 80004fc:	220a      	movs	r2, #10
 80004fe:	601a      	str	r2, [r3, #0]
			count2 = 0;
 8000500:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <M2_fsm_run+0xd0>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
			setTimer1(1000);	//Timer 1 to countdown the number display on 2 Led.
 8000506:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050a:	f000 fc85 	bl	8000e18 <setTimer1>
			setTimer2(10000);	//Timer 2 is the quantity of time machine in mode 2 without increasing time.
 800050e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000512:	f000 fc9b 	bl	8000e4c <setTimer2>
			setTimer3(250);		//Timer 3 to set RED Led blinky 2Hz
 8000516:	20fa      	movs	r0, #250	; 0xfa
 8000518:	f000 fcb2 	bl	8000e80 <setTimer3>
		}

		//check whether user increases time or not.
		check_button_add_time();
 800051c:	f000 f986 	bl	800082c <check_button_add_time>
	}
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200000a8 	.word	0x200000a8
 8000528:	200000d0 	.word	0x200000d0
 800052c:	40010800 	.word	0x40010800
 8000530:	40010c00 	.word	0x40010c00
 8000534:	200000c0 	.word	0x200000c0
 8000538:	200000ac 	.word	0x200000ac
 800053c:	200000c8 	.word	0x200000c8
 8000540:	200000b0 	.word	0x200000b0

08000544 <M3_fsm_run>:
 *      Author: admin
 */

#include "M3_fsm.h"

void M3_fsm_run(){
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	if(status == M3){
 8000548:	4b2f      	ldr	r3, [pc, #188]	; (8000608 <M3_fsm_run+0xc4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b1e      	cmp	r3, #30
 800054e:	d159      	bne.n	8000604 <M3_fsm_run+0xc0>

		//Blinky YELLOW Led in 2Hz
		if(timer3_flag == 1){
 8000550:	4b2e      	ldr	r3, [pc, #184]	; (800060c <M3_fsm_run+0xc8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d113      	bne.n	8000580 <M3_fsm_run+0x3c>
			//blinky all YELLOW Led
			HAL_GPIO_TogglePin(A1_GPIO_Port, A1_Pin);
 8000558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800055c:	482c      	ldr	r0, [pc, #176]	; (8000610 <M3_fsm_run+0xcc>)
 800055e:	f001 f9e8 	bl	8001932 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(B1_GPIO_Port, B1_Pin);
 8000562:	2108      	movs	r1, #8
 8000564:	482b      	ldr	r0, [pc, #172]	; (8000614 <M3_fsm_run+0xd0>)
 8000566:	f001 f9e4 	bl	8001932 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(A2_GPIO_Port, A2_Pin);
 800056a:	2120      	movs	r1, #32
 800056c:	4829      	ldr	r0, [pc, #164]	; (8000614 <M3_fsm_run+0xd0>)
 800056e:	f001 f9e0 	bl	8001932 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(B2_GPIO_Port, B2_Pin);
 8000572:	2110      	movs	r1, #16
 8000574:	4827      	ldr	r0, [pc, #156]	; (8000614 <M3_fsm_run+0xd0>)
 8000576:	f001 f9dc 	bl	8001932 <HAL_GPIO_TogglePin>
			setTimer3(250);
 800057a:	20fa      	movs	r0, #250	; 0xfa
 800057c:	f000 fc80 	bl	8000e80 <setTimer3>
		}

		//count down the number display on 7-seg LED
		if(timer1_flag == 1){
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <M3_fsm_run+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d108      	bne.n	800059a <M3_fsm_run+0x56>
			count1--;
 8000588:	4b24      	ldr	r3, [pc, #144]	; (800061c <M3_fsm_run+0xd8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a23      	ldr	r2, [pc, #140]	; (800061c <M3_fsm_run+0xd8>)
 8000590:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000596:	f000 fc3f 	bl	8000e18 <setTimer1>
		}

		//Switch to M4 mode
		if(is_button_pressed(1)||timer2_flag == 1){
 800059a:	2001      	movs	r0, #1
 800059c:	f000 fa22 	bl	80009e4 <is_button_pressed>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d103      	bne.n	80005ae <M3_fsm_run+0x6a>
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <M3_fsm_run+0xdc>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d128      	bne.n	8000600 <M3_fsm_run+0xbc>
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b4:	4816      	ldr	r0, [pc, #88]	; (8000610 <M3_fsm_run+0xcc>)
 80005b6:	f001 f9a4 	bl	8001902 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B1_GPIO_Port, B1_Pin, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2108      	movs	r1, #8
 80005be:	4815      	ldr	r0, [pc, #84]	; (8000614 <M3_fsm_run+0xd0>)
 80005c0:	f001 f99f 	bl	8001902 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2120      	movs	r1, #32
 80005c8:	4812      	ldr	r0, [pc, #72]	; (8000614 <M3_fsm_run+0xd0>)
 80005ca:	f001 f99a 	bl	8001902 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B2_GPIO_Port, B2_Pin, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2110      	movs	r1, #16
 80005d2:	4810      	ldr	r0, [pc, #64]	; (8000614 <M3_fsm_run+0xd0>)
 80005d4:	f001 f995 	bl	8001902 <HAL_GPIO_WritePin>
			status = M4;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <M3_fsm_run+0xc4>)
 80005da:	2228      	movs	r2, #40	; 0x28
 80005dc:	601a      	str	r2, [r3, #0]
			count1 = 10;
 80005de:	4b0f      	ldr	r3, [pc, #60]	; (800061c <M3_fsm_run+0xd8>)
 80005e0:	220a      	movs	r2, #10
 80005e2:	601a      	str	r2, [r3, #0]
			count2 = 0;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <M3_fsm_run+0xe0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
			setTimer1(1000);	//Timer 1 to countdown the number display on 2 Led.
 80005ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ee:	f000 fc13 	bl	8000e18 <setTimer1>
			setTimer2(10000);	//Timer 2 is the quantity of time machine in mode 2 without increasing time.
 80005f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80005f6:	f000 fc29 	bl	8000e4c <setTimer2>
			setTimer3(250);		//Timer 3 to set RED Led blinky 2Hz
 80005fa:	20fa      	movs	r0, #250	; 0xfa
 80005fc:	f000 fc40 	bl	8000e80 <setTimer3>
		}

		//check whether user increases time or not.
		check_button_add_time();
 8000600:	f000 f914 	bl	800082c <check_button_add_time>

	}
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200000a8 	.word	0x200000a8
 800060c:	200000d0 	.word	0x200000d0
 8000610:	40010800 	.word	0x40010800
 8000614:	40010c00 	.word	0x40010c00
 8000618:	200000c0 	.word	0x200000c0
 800061c:	200000ac 	.word	0x200000ac
 8000620:	200000c8 	.word	0x200000c8
 8000624:	200000b0 	.word	0x200000b0

08000628 <M4_fsm_run>:
 */


#include "M4_fsm.h"

void M4_fsm_run(){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	if(status == M4){
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <M4_fsm_run+0x84>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b28      	cmp	r3, #40	; 0x28
 8000632:	d138      	bne.n	80006a6 <M4_fsm_run+0x7e>

		//Blinky RED Led in 2Hz
		if(timer3_flag == 1){
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <M4_fsm_run+0x88>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d10a      	bne.n	8000652 <M4_fsm_run+0x2a>
			//blinky all GREEN Led
			HAL_GPIO_TogglePin(B1_GPIO_Port, B1_Pin);
 800063c:	2108      	movs	r1, #8
 800063e:	481d      	ldr	r0, [pc, #116]	; (80006b4 <M4_fsm_run+0x8c>)
 8000640:	f001 f977 	bl	8001932 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(B2_GPIO_Port, B2_Pin);
 8000644:	2110      	movs	r1, #16
 8000646:	481b      	ldr	r0, [pc, #108]	; (80006b4 <M4_fsm_run+0x8c>)
 8000648:	f001 f973 	bl	8001932 <HAL_GPIO_TogglePin>
			setTimer3(250);
 800064c:	20fa      	movs	r0, #250	; 0xfa
 800064e:	f000 fc17 	bl	8000e80 <setTimer3>
		}

		//count down the number display on 7-seg LED
		if(timer1_flag == 1){
 8000652:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <M4_fsm_run+0x90>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d108      	bne.n	800066c <M4_fsm_run+0x44>
			count1--;
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <M4_fsm_run+0x94>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3b01      	subs	r3, #1
 8000660:	4a16      	ldr	r2, [pc, #88]	; (80006bc <M4_fsm_run+0x94>)
 8000662:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000668:	f000 fbd6 	bl	8000e18 <setTimer1>
		}

		//Switch to M1 mode
		if(is_button_pressed(1)||timer2_flag == 1){
 800066c:	2001      	movs	r0, #1
 800066e:	f000 f9b9 	bl	80009e4 <is_button_pressed>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d103      	bne.n	8000680 <M4_fsm_run+0x58>
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <M4_fsm_run+0x98>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d110      	bne.n	80006a2 <M4_fsm_run+0x7a>
			status = M1_RED_GREEN;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <M4_fsm_run+0x84>)
 8000682:	220b      	movs	r2, #11
 8000684:	601a      	str	r2, [r3, #0]
			count1 = 25;
 8000686:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <M4_fsm_run+0x94>)
 8000688:	2219      	movs	r2, #25
 800068a:	601a      	str	r2, [r3, #0]
			setTimer1(1000);	//Timer 1 to countdown the number display on 2 Led.
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f000 fbc2 	bl	8000e18 <setTimer1>
			setTimer2(25000);	//Timer 2 is the quantity of time machine in mode 1
 8000694:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8000698:	f000 fbd8 	bl	8000e4c <setTimer2>
			setTimer3(0);
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fbef 	bl	8000e80 <setTimer3>
		}

		//check whether user increases time or not.
		check_button_add_time();
 80006a2:	f000 f8c3 	bl	800082c <check_button_add_time>

	}
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200000a8 	.word	0x200000a8
 80006b0:	200000d0 	.word	0x200000d0
 80006b4:	40010c00 	.word	0x40010c00
 80006b8:	200000c0 	.word	0x200000c0
 80006bc:	200000ac 	.word	0x200000ac
 80006c0:	200000c8 	.word	0x200000c8

080006c4 <check_press>:
 *
 *  Created on: Dec 1, 2022
 *      Author: admin
 */
#include"Pedestrian.h"
void check_press(){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	if(is_button_pressed(0) && status < 20){
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 f98b 	bl	80009e4 <is_button_pressed>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d00a      	beq.n	80006ea <check_press+0x26>
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <check_press+0x2c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b13      	cmp	r3, #19
 80006da:	dc06      	bgt.n	80006ea <check_press+0x26>
		setTimer4(60000);
 80006dc:	f64e 2060 	movw	r0, #60000	; 0xea60
 80006e0:	f000 fbe8 	bl	8000eb4 <setTimer4>
		Pedes_press = 1;
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <check_press+0x30>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
	}
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000a8 	.word	0x200000a8
 80006f4:	200000b4 	.word	0x200000b4

080006f8 <Pedestrian_behavior>:
void Pedestrian_behavior(){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	check_press();
 80006fc:	f7ff ffe2 	bl	80006c4 <check_press>
	if(Pedes_press == 1){
 8000700:	4b33      	ldr	r3, [pc, #204]	; (80007d0 <Pedestrian_behavior+0xd8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d160      	bne.n	80007ca <Pedestrian_behavior+0xd2>
		switch (status) {
 8000708:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <Pedestrian_behavior+0xdc>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3b0b      	subs	r3, #11
 800070e:	2b03      	cmp	r3, #3
 8000710:	d845      	bhi.n	800079e <Pedestrian_behavior+0xa6>
 8000712:	a201      	add	r2, pc, #4	; (adr r2, 8000718 <Pedestrian_behavior+0x20>)
 8000714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000718:	08000729 	.word	0x08000729
 800071c:	08000747 	.word	0x08000747
 8000720:	08000761 	.word	0x08000761
 8000724:	0800077b 	.word	0x0800077b
				case M1_RED_GREEN:
					resetBuzzer();
 8000728:	f000 f85e 	bl	80007e8 <resetBuzzer>
					HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000732:	4829      	ldr	r0, [pc, #164]	; (80007d8 <Pedestrian_behavior+0xe0>)
 8000734:	f001 f8e5 	bl	8001902 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073e:	4827      	ldr	r0, [pc, #156]	; (80007dc <Pedestrian_behavior+0xe4>)
 8000740:	f001 f8df 	bl	8001902 <HAL_GPIO_WritePin>
					break;
 8000744:	e02c      	b.n	80007a0 <Pedestrian_behavior+0xa8>

				case M1_RED_YELLOW:
					HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 1);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800074c:	4822      	ldr	r0, [pc, #136]	; (80007d8 <Pedestrian_behavior+0xe0>)
 800074e:	f001 f8d8 	bl	8001902 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000758:	4820      	ldr	r0, [pc, #128]	; (80007dc <Pedestrian_behavior+0xe4>)
 800075a:	f001 f8d2 	bl	8001902 <HAL_GPIO_WritePin>
					break;
 800075e:	e01f      	b.n	80007a0 <Pedestrian_behavior+0xa8>

				case M1_GREEN_RED:
					HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000766:	481c      	ldr	r0, [pc, #112]	; (80007d8 <Pedestrian_behavior+0xe0>)
 8000768:	f001 f8cb 	bl	8001902 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 1);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000772:	481a      	ldr	r0, [pc, #104]	; (80007dc <Pedestrian_behavior+0xe4>)
 8000774:	f001 f8c5 	bl	8001902 <HAL_GPIO_WritePin>
					break;
 8000778:	e012      	b.n	80007a0 <Pedestrian_behavior+0xa8>

				case M1_YELLOW_RED:
					setBuzzer(count1);
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <Pedestrian_behavior+0xe8>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f83e 	bl	8000800 <setBuzzer>
					HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 1);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078a:	4813      	ldr	r0, [pc, #76]	; (80007d8 <Pedestrian_behavior+0xe0>)
 800078c:	f001 f8b9 	bl	8001902 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <Pedestrian_behavior+0xe4>)
 8000798:	f001 f8b3 	bl	8001902 <HAL_GPIO_WritePin>
					break;
 800079c:	e000      	b.n	80007a0 <Pedestrian_behavior+0xa8>

				default:
					break;
 800079e:	bf00      	nop
			}
		if(timer4_flag == 1){
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <Pedestrian_behavior+0xec>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d110      	bne.n	80007ca <Pedestrian_behavior+0xd2>
			HAL_GPIO_WritePin(PEDES_R_GPIO_Port, PEDES_R_Pin, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <Pedestrian_behavior+0xe0>)
 80007b0:	f001 f8a7 	bl	8001902 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PEDES_G_GPIO_Port, PEDES_G_Pin, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ba:	4808      	ldr	r0, [pc, #32]	; (80007dc <Pedestrian_behavior+0xe4>)
 80007bc:	f001 f8a1 	bl	8001902 <HAL_GPIO_WritePin>
			Pedes_press = 0;
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <Pedestrian_behavior+0xd8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
			resetBuzzer();
 80007c6:	f000 f80f 	bl	80007e8 <resetBuzzer>
		}
	}
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000b4 	.word	0x200000b4
 80007d4:	200000a8 	.word	0x200000a8
 80007d8:	40010c00 	.word	0x40010c00
 80007dc:	40010800 	.word	0x40010800
 80007e0:	200000ac 	.word	0x200000ac
 80007e4:	200000d8 	.word	0x200000d8

080007e8 <resetBuzzer>:
 *      Author: admin
 */


#include "Pedestrian_Buzzer.h"
void resetBuzzer(){
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,0);
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <resetBuzzer+0x14>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	200000e8 	.word	0x200000e8

08000800 <setBuzzer>:

void setBuzzer(int number){
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	int value = 200*(5-number);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f1c3 0305 	rsb	r3, r3, #5
 800080e:	22c8      	movs	r2, #200	; 0xc8
 8000810:	fb02 f303 	mul.w	r3, r2, r3
 8000814:	60fb      	str	r3, [r7, #12]
	  __HAL_TIM_SetCompare(&htim3,TIM_CHANNEL_1,value);
 8000816:	4b04      	ldr	r3, [pc, #16]	; (8000828 <setBuzzer+0x28>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800081e:	bf00      	nop
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	200000e8 	.word	0x200000e8

0800082c <check_button_add_time>:
 */


#include "add_time.h"

void check_button_add_time(){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	if(is_button_pressed(2)){
 8000830:	2002      	movs	r0, #2
 8000832:	f000 f8d7 	bl	80009e4 <is_button_pressed>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d004      	beq.n	8000846 <check_button_add_time+0x1a>
		count2 += 100;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <check_button_add_time+0x54>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	3364      	adds	r3, #100	; 0x64
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <check_button_add_time+0x54>)
 8000844:	6013      	str	r3, [r2, #0]
	}
	if(is_button_pressed(3)){
 8000846:	2003      	movs	r0, #3
 8000848:	f000 f8cc 	bl	80009e4 <is_button_pressed>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d014      	beq.n	800087c <check_button_add_time+0x50>
		adding_time(count2);
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <check_button_add_time+0x54>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fabc 	bl	8000dd4 <adding_time>
		count1 = count1 + count2/100;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <check_button_add_time+0x54>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a08      	ldr	r2, [pc, #32]	; (8000884 <check_button_add_time+0x58>)
 8000862:	fb82 1203 	smull	r1, r2, r2, r3
 8000866:	1152      	asrs	r2, r2, #5
 8000868:	17db      	asrs	r3, r3, #31
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <check_button_add_time+0x5c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4413      	add	r3, r2
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <check_button_add_time+0x5c>)
 8000874:	6013      	str	r3, [r2, #0]
		count2 = 0;
 8000876:	4b02      	ldr	r3, [pc, #8]	; (8000880 <check_button_add_time+0x54>)
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
	}
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000b0 	.word	0x200000b0
 8000884:	51eb851f 	.word	0x51eb851f
 8000888:	200000ac 	.word	0x200000ac

0800088c <button_reading>:
// we define a flag for a button pressed more than 1 second .
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS] = {0,0,0,0};
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS] = {DURATION_FOR_AUTO_DECREASING,DURATION_FOR_AUTO_DECREASING,DURATION_FOR_AUTO_DECREASING,DURATION_FOR_AUTO_DECREASING};
void button_reading (void) {
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000892:	2300      	movs	r3, #0
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	e08c      	b.n	80009b2 <button_reading+0x126>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000898:	79fa      	ldrb	r2, [r7, #7]
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4949      	ldr	r1, [pc, #292]	; (80009c4 <button_reading+0x138>)
 800089e:	5c89      	ldrb	r1, [r1, r2]
 80008a0:	4a49      	ldr	r2, [pc, #292]	; (80009c8 <button_reading+0x13c>)
 80008a2:	54d1      	strb	r1, [r2, r3]
		if( i == 0)	debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(PEDES_Button_GPIO_Port , PEDES_Button_Pin);
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d108      	bne.n	80008bc <button_reading+0x30>
 80008aa:	79fc      	ldrb	r4, [r7, #7]
 80008ac:	2101      	movs	r1, #1
 80008ae:	4847      	ldr	r0, [pc, #284]	; (80009cc <button_reading+0x140>)
 80008b0:	f001 f810 	bl	80018d4 <HAL_GPIO_ReadPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	4b42      	ldr	r3, [pc, #264]	; (80009c4 <button_reading+0x138>)
 80008ba:	551a      	strb	r2, [r3, r4]
		if( i == 1)	debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port , Button1_Pin);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d108      	bne.n	80008d4 <button_reading+0x48>
 80008c2:	79fc      	ldrb	r4, [r7, #7]
 80008c4:	2102      	movs	r1, #2
 80008c6:	4841      	ldr	r0, [pc, #260]	; (80009cc <button_reading+0x140>)
 80008c8:	f001 f804 	bl	80018d4 <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <button_reading+0x138>)
 80008d2:	551a      	strb	r2, [r3, r4]
		if( i == 2)	debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port , Button2_Pin);
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d108      	bne.n	80008ec <button_reading+0x60>
 80008da:	79fc      	ldrb	r4, [r7, #7]
 80008dc:	2110      	movs	r1, #16
 80008de:	483b      	ldr	r0, [pc, #236]	; (80009cc <button_reading+0x140>)
 80008e0:	f000 fff8 	bl	80018d4 <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	461a      	mov	r2, r3
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <button_reading+0x138>)
 80008ea:	551a      	strb	r2, [r3, r4]
		if( i == 3)	debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port , Button3_Pin);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	d108      	bne.n	8000904 <button_reading+0x78>
 80008f2:	79fc      	ldrb	r4, [r7, #7]
 80008f4:	2101      	movs	r1, #1
 80008f6:	4836      	ldr	r0, [pc, #216]	; (80009d0 <button_reading+0x144>)
 80008f8:	f000 ffec 	bl	80018d4 <HAL_GPIO_ReadPin>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	4b30      	ldr	r3, [pc, #192]	; (80009c4 <button_reading+0x138>)
 8000902:	551a      	strb	r2, [r3, r4]
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <button_reading+0x138>)
 8000908:	5cd2      	ldrb	r2, [r2, r3]
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	492e      	ldr	r1, [pc, #184]	; (80009c8 <button_reading+0x13c>)
 800090e:	5ccb      	ldrb	r3, [r1, r3]
 8000910:	429a      	cmp	r2, r3
 8000912:	d14b      	bne.n	80009ac <button_reading+0x120>
			if(debounceButtonBuffer2[i] != debounceButtonBuffer3[i]){
 8000914:	79fb      	ldrb	r3, [r7, #7]
 8000916:	4a2c      	ldr	r2, [pc, #176]	; (80009c8 <button_reading+0x13c>)
 8000918:	5cd2      	ldrb	r2, [r2, r3]
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	492d      	ldr	r1, [pc, #180]	; (80009d4 <button_reading+0x148>)
 800091e:	5ccb      	ldrb	r3, [r1, r3]
 8000920:	429a      	cmp	r2, r3
 8000922:	d014      	beq.n	800094e <button_reading+0xc2>
				debounceButtonBuffer3[i] = debounceButtonBuffer2[i];
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	4927      	ldr	r1, [pc, #156]	; (80009c8 <button_reading+0x13c>)
 800092a:	5c89      	ldrb	r1, [r1, r2]
 800092c:	4a29      	ldr	r2, [pc, #164]	; (80009d4 <button_reading+0x148>)
 800092e:	54d1      	strb	r1, [r2, r3]
				if(debounceButtonBuffer3[i] == BUTTON_IS_PRESSED){
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4a28      	ldr	r2, [pc, #160]	; (80009d4 <button_reading+0x148>)
 8000934:	5cd3      	ldrb	r3, [r2, r3]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d138      	bne.n	80009ac <button_reading+0x120>
					buttonBuffer[i] = BUTTON_IS_PRESSED;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4a26      	ldr	r2, [pc, #152]	; (80009d8 <button_reading+0x14c>)
 800093e:	2100      	movs	r1, #0
 8000940:	54d1      	strb	r1, [r2, r3]
					counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a25      	ldr	r2, [pc, #148]	; (80009dc <button_reading+0x150>)
 8000946:	2164      	movs	r1, #100	; 0x64
 8000948:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800094c:	e02e      	b.n	80009ac <button_reading+0x120>
				}
			} else {
				counterForButtonPress1s[i]--;
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	4a22      	ldr	r2, [pc, #136]	; (80009dc <button_reading+0x150>)
 8000952:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000956:	3a01      	subs	r2, #1
 8000958:	b291      	uxth	r1, r2
 800095a:	4a20      	ldr	r2, [pc, #128]	; (80009dc <button_reading+0x150>)
 800095c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(counterForButtonPress1s[i] == 0){
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	4a1e      	ldr	r2, [pc, #120]	; (80009dc <button_reading+0x150>)
 8000964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d11f      	bne.n	80009ac <button_reading+0x120>
					if(debounceButtonBuffer3[i] == BUTTON_IS_PRESSED){
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <button_reading+0x148>)
 8000970:	5cd3      	ldrb	r3, [r2, r3]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d10c      	bne.n	8000990 <button_reading+0x104>
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a18      	ldr	r2, [pc, #96]	; (80009dc <button_reading+0x150>)
 800097a:	2164      	movs	r1, #100	; 0x64
 800097c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <button_reading+0x14c>)
 8000984:	2101      	movs	r1, #1
 8000986:	54d1      	strb	r1, [r2, r3]
						flagForButtonPress1s[i] = 1;
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <button_reading+0x154>)
 800098c:	2101      	movs	r1, #1
 800098e:	54d1      	strb	r1, [r2, r3]
					}

					if(debounceButtonBuffer3[i] == BUTTON_IS_RELEASED){
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <button_reading+0x148>)
 8000994:	5cd3      	ldrb	r3, [r2, r3]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d108      	bne.n	80009ac <button_reading+0x120>
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_DECREASING;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <button_reading+0x150>)
 800099e:	2164      	movs	r1, #100	; 0x64
 80009a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						flagForButtonPress1s[i] = 0;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4a0e      	ldr	r2, [pc, #56]	; (80009e0 <button_reading+0x154>)
 80009a8:	2100      	movs	r1, #0
 80009aa:	54d1      	strb	r1, [r2, r3]
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++) {
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	3301      	adds	r3, #1
 80009b0:	71fb      	strb	r3, [r7, #7]
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	f67f af6f 	bls.w	8000898 <button_reading+0xc>
					}
				}
			}
		}
	}
}
 80009ba:	bf00      	nop
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	20000004 	.word	0x20000004
 80009c8:	20000008 	.word	0x20000008
 80009cc:	40010800 	.word	0x40010800
 80009d0:	40010c00 	.word	0x40010c00
 80009d4:	2000000c 	.word	0x2000000c
 80009d8:	20000000 	.word	0x20000000
 80009dc:	20000010 	.word	0x20000010
 80009e0:	200000b8 	.word	0x200000b8

080009e4 <is_button_pressed>:

unsigned char is_button_pressed (uint8_t index ) {
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	d901      	bls.n	80009f8 <is_button_pressed+0x14>
 80009f4:	2300      	movs	r3, #0
 80009f6:	e00d      	b.n	8000a14 <is_button_pressed+0x30>
	GPIO_PinState new = buttonBuffer[index];
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4a09      	ldr	r2, [pc, #36]	; (8000a20 <is_button_pressed+0x3c>)
 80009fc:	5cd3      	ldrb	r3, [r2, r3]
 80009fe:	73fb      	strb	r3, [r7, #15]
	buttonBuffer[index] = BUTTON_IS_RELEASED;
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <is_button_pressed+0x3c>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	54d1      	strb	r1, [r2, r3]
	return (new == BUTTON_IS_PRESSED);
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf0c      	ite	eq
 8000a0e:	2301      	moveq	r3, #1
 8000a10:	2300      	movne	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000000 	.word	0x20000000

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a28:	f000 fc60 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2c:	f000 f820 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a30:	f000 f94c 	bl	8000ccc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a34:	f000 f85e 	bl	8000af4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a38:	f000 f8a8 	bl	8000b8c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000a3c:	f000 f91c 	bl	8000c78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2 ) ;
 8000a40:	4809      	ldr	r0, [pc, #36]	; (8000a68 <main+0x44>)
 8000a42:	f001 fbf9 	bl	8002238 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a46:	2100      	movs	r1, #0
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <main+0x48>)
 8000a4a:	f001 fc9f 	bl	800238c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  M1_fsm_run();
 8000a4e:	f7ff fbc7 	bl	80001e0 <M1_fsm_run>
	  M2_fsm_run();
 8000a52:	f7ff fd0d 	bl	8000470 <M2_fsm_run>
	  M3_fsm_run();
 8000a56:	f7ff fd75 	bl	8000544 <M3_fsm_run>
	  M4_fsm_run();
 8000a5a:	f7ff fde5 	bl	8000628 <M4_fsm_run>
	  transmitdata();
 8000a5e:	f000 fbed 	bl	800123c <transmitdata>
	  Pedestrian_behavior();
 8000a62:	f7ff fe49 	bl	80006f8 <Pedestrian_behavior>
	  M1_fsm_run();
 8000a66:	e7f2      	b.n	8000a4e <main+0x2a>
 8000a68:	20000130 	.word	0x20000130
 8000a6c:	200000e8 	.word	0x200000e8

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b090      	sub	sp, #64	; 0x40
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	2228      	movs	r2, #40	; 0x28
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fcca 	bl	8003418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
 8000a90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a92:	2302      	movs	r3, #2
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a96:	2301      	movs	r3, #1
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000aa6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 0318 	add.w	r3, r7, #24
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 ff57 	bl	8001964 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000abc:	f000 f985 	bl	8000dca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2102      	movs	r1, #2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 f9c2 	bl	8001e64 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000ae6:	f000 f970 	bl	8000dca <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3740      	adds	r7, #64	; 0x40
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	463b      	mov	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b10:	4b1d      	ldr	r3, [pc, #116]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b1a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b28:	224f      	movs	r2, #79	; 0x4f
 8000b2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b3a:	f001 fb2d 	bl	8002198 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b44:	f000 f941 	bl	8000dca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	4619      	mov	r1, r3
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b56:	f001 fe81 	bl	800285c <HAL_TIM_ConfigClockSource>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b60:	f000 f933 	bl	8000dca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_TIM2_Init+0x94>)
 8000b72:	f002 f9ff 	bl	8002f74 <HAL_TIMEx_MasterConfigSynchronization>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b7c:	f000 f925 	bl	8000dca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000130 	.word	0x20000130

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]
 8000bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bbe:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <MX_TIM3_Init+0xe8>)
 8000bc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bc4:	223f      	movs	r2, #63	; 0x3f
 8000bc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bce:	4b28      	ldr	r3, [pc, #160]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bd4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000be2:	4823      	ldr	r0, [pc, #140]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000be4:	f001 fad8 	bl	8002198 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bee:	f000 f8ec 	bl	8000dca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bf8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481c      	ldr	r0, [pc, #112]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c00:	f001 fe2c 	bl	800285c <HAL_TIM_ConfigClockSource>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c0a:	f000 f8de 	bl	8000dca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c0e:	4818      	ldr	r0, [pc, #96]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c10:	f001 fb64 	bl	80022dc <HAL_TIM_PWM_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c1a:	f000 f8d6 	bl	8000dca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c26:	f107 0320 	add.w	r3, r7, #32
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4810      	ldr	r0, [pc, #64]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c2e:	f002 f9a1 	bl	8002f74 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c38:	f000 f8c7 	bl	8000dca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c3c:	2360      	movs	r3, #96	; 0x60
 8000c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c54:	f001 fd44 	bl	80026e0 <HAL_TIM_PWM_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000c5e:	f000 f8b4 	bl	8000dca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <MX_TIM3_Init+0xe4>)
 8000c64:	f000 fa00 	bl	8001068 <HAL_TIM_MspPostInit>

}
 8000c68:	bf00      	nop
 8000c6a:	3738      	adds	r7, #56	; 0x38
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000e8 	.word	0x200000e8
 8000c74:	40000400 	.word	0x40000400

08000c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <MX_USART2_UART_Init+0x50>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	f002 f9d0 	bl	8003054 <HAL_UART_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cba:	f000 f886 	bl	8000dca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000178 	.word	0x20000178
 8000cc8:	40004400 	.word	0x40004400

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce0:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a2d      	ldr	r2, [pc, #180]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b2b      	ldr	r3, [pc, #172]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0304 	and.w	r3, r3, #4
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf8:	4b28      	ldr	r3, [pc, #160]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a27      	ldr	r2, [pc, #156]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000cfe:	f043 0308 	orr.w	r3, r3, #8
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b25      	ldr	r3, [pc, #148]	; (8000d9c <MX_GPIO_Init+0xd0>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0308 	and.w	r3, r3, #8
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PEDES_R_Pin|B1_Pin|B2_Pin|A2_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000d16:	4822      	ldr	r0, [pc, #136]	; (8000da0 <MX_GPIO_Init+0xd4>)
 8000d18:	f000 fdf3 	bl	8001902 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PEDES_G_Pin|A1_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d22:	4820      	ldr	r0, [pc, #128]	; (8000da4 <MX_GPIO_Init+0xd8>)
 8000d24:	f000 fded 	bl	8001902 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEDES_Button_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PEDES_Button_Pin|Button1_Pin|Button2_Pin;
 8000d28:	2313      	movs	r3, #19
 8000d2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4619      	mov	r1, r3
 8000d3a:	481a      	ldr	r0, [pc, #104]	; (8000da4 <MX_GPIO_Init+0xd8>)
 8000d3c:	f000 fc46 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8000d40:	2301      	movs	r3, #1
 8000d42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	4619      	mov	r1, r3
 8000d52:	4813      	ldr	r0, [pc, #76]	; (8000da0 <MX_GPIO_Init+0xd4>)
 8000d54:	f000 fc3a 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDES_R_Pin B1_Pin B2_Pin A2_Pin */
  GPIO_InitStruct.Pin = PEDES_R_Pin|B1_Pin|B2_Pin|A2_Pin;
 8000d58:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000d5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2302      	movs	r3, #2
 8000d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0308 	add.w	r3, r7, #8
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <MX_GPIO_Init+0xd4>)
 8000d72:	f000 fc2b 	bl	80015cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEDES_G_Pin A1_Pin */
  GPIO_InitStruct.Pin = PEDES_G_Pin|A1_Pin;
 8000d76:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000d7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2302      	movs	r3, #2
 8000d86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_GPIO_Init+0xd8>)
 8000d90:	f000 fc1c 	bl	80015cc <HAL_GPIO_Init>

}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40010c00 	.word	0x40010c00
 8000da4:	40010800 	.word	0x40010800

08000da8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2) {
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000db8:	d101      	bne.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8000dba:	f7ff fd67 	bl	800088c <button_reading>
	}
	timerRun();
 8000dbe:	f000 f893 	bl	8000ee8 <timerRun>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dce:	b672      	cpsid	i
}
 8000dd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <Error_Handler+0x8>

08000dd4 <adding_time>:
int timer3_flag = 0;
int timer4_counter = 0;
int timer4_flag = 0;
int TIMER_CYCLE = 10;

void adding_time(int extra_time){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
	if(timer2_counter > 0){
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <adding_time+0x3c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dd05      	ble.n	8000df0 <adding_time+0x1c>
		timer2_counter += extra_time;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <adding_time+0x3c>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <adding_time+0x3c>)
 8000dee:	6013      	str	r3, [r2, #0]
	}
	if(timer4_counter > 0){
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <adding_time+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	dd05      	ble.n	8000e04 <adding_time+0x30>
		timer4_counter += extra_time;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <adding_time+0x40>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <adding_time+0x40>)
 8000e02:	6013      	str	r3, [r2, #0]
	}
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200000c4 	.word	0x200000c4
 8000e14:	200000d4 	.word	0x200000d4

08000e18 <setTimer1>:


void setTimer1(int duration){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	timer1_counter = duration / TIMER_CYCLE;
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <setTimer1+0x28>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e2a:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <setTimer1+0x2c>)
 8000e2c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <setTimer1+0x30>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000018 	.word	0x20000018
 8000e44:	200000bc 	.word	0x200000bc
 8000e48:	200000c0 	.word	0x200000c0

08000e4c <setTimer2>:

void setTimer2(int duration){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	timer2_counter = duration / TIMER_CYCLE;
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <setTimer2+0x28>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e5e:	4a06      	ldr	r2, [pc, #24]	; (8000e78 <setTimer2+0x2c>)
 8000e60:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <setTimer2+0x30>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000018 	.word	0x20000018
 8000e78:	200000c4 	.word	0x200000c4
 8000e7c:	200000c8 	.word	0x200000c8

08000e80 <setTimer3>:

void setTimer3(int duration){
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	timer3_counter = duration / TIMER_CYCLE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <setTimer3+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e92:	4a06      	ldr	r2, [pc, #24]	; (8000eac <setTimer3+0x2c>)
 8000e94:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <setTimer3+0x30>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000018 	.word	0x20000018
 8000eac:	200000cc 	.word	0x200000cc
 8000eb0:	200000d0 	.word	0x200000d0

08000eb4 <setTimer4>:
void setTimer4(int duration){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	timer4_counter = duration / TIMER_CYCLE;
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <setTimer4+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ec6:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <setTimer4+0x2c>)
 8000ec8:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <setTimer4+0x30>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000018 	.word	0x20000018
 8000ee0:	200000d4 	.word	0x200000d4
 8000ee4:	200000d8 	.word	0x200000d8

08000ee8 <timerRun>:
void timerRun(){
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <timerRun+0x8c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dd0b      	ble.n	8000f0c <timerRun+0x24>
		timer1_counter--;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <timerRun+0x8c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <timerRun+0x8c>)
 8000efc:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0){
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <timerRun+0x8c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d102      	bne.n	8000f0c <timerRun+0x24>
			timer1_flag = 1;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <timerRun+0x90>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8000f0c:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <timerRun+0x94>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	dd0b      	ble.n	8000f2c <timerRun+0x44>
		timer2_counter--;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <timerRun+0x94>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <timerRun+0x94>)
 8000f1c:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0){
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <timerRun+0x94>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d102      	bne.n	8000f2c <timerRun+0x44>
			timer2_flag = 1;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <timerRun+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0){
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <timerRun+0x9c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dd0b      	ble.n	8000f4c <timerRun+0x64>
		timer3_counter--;
 8000f34:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <timerRun+0x9c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <timerRun+0x9c>)
 8000f3c:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0){
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <timerRun+0x9c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <timerRun+0x64>
			timer3_flag = 1;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <timerRun+0xa0>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <timerRun+0xa4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dd0b      	ble.n	8000f6c <timerRun+0x84>
		timer4_counter--;
 8000f54:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <timerRun+0xa4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	4a0c      	ldr	r2, [pc, #48]	; (8000f8c <timerRun+0xa4>)
 8000f5c:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0){
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <timerRun+0xa4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d102      	bne.n	8000f6c <timerRun+0x84>
			timer4_flag = 1;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <timerRun+0xa8>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	200000bc 	.word	0x200000bc
 8000f78:	200000c0 	.word	0x200000c0
 8000f7c:	200000c4 	.word	0x200000c4
 8000f80:	200000c8 	.word	0x200000c8
 8000f84:	200000cc 	.word	0x200000cc
 8000f88:	200000d0 	.word	0x200000d0
 8000f8c:	200000d4 	.word	0x200000d4
 8000f90:	200000d8 	.word	0x200000d8

08000f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x5c>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fca:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_MspInit+0x60>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_MspInit+0x60>)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000

08000ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001008:	d114      	bne.n	8001034 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a14      	ldr	r2, [pc, #80]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	201c      	movs	r0, #28
 8001028:	f000 fa99 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800102c:	201c      	movs	r0, #28
 800102e:	f000 fab2 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001032:	e010      	b.n	8001056 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_TIM_Base_MspInit+0x6c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10b      	bne.n	8001056 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_TIM_Base_MspInit+0x68>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	40000400 	.word	0x40000400

08001068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <HAL_TIM_MspPostInit+0x58>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d117      	bne.n	80010b8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_TIM_MspPostInit+0x5c>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <HAL_TIM_MspPostInit+0x5c>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_TIM_MspPostInit+0x5c>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a0:	2340      	movs	r3, #64	; 0x40
 80010a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	4619      	mov	r1, r3
 80010b2:	4805      	ldr	r0, [pc, #20]	; (80010c8 <HAL_TIM_MspPostInit+0x60>)
 80010b4:	f000 fa8a 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3720      	adds	r7, #32
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40000400 	.word	0x40000400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010800 	.word	0x40010800

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <HAL_UART_MspInit+0x88>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d12f      	bne.n	800114c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <HAL_UART_MspInit+0x8c>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	4a19      	ldr	r2, [pc, #100]	; (8001158 <HAL_UART_MspInit+0x8c>)
 80010f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f6:	61d3      	str	r3, [r2, #28]
 80010f8:	4b17      	ldr	r3, [pc, #92]	; (8001158 <HAL_UART_MspInit+0x8c>)
 80010fa:	69db      	ldr	r3, [r3, #28]
 80010fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_UART_MspInit+0x8c>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <HAL_UART_MspInit+0x8c>)
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	6193      	str	r3, [r2, #24]
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_UART_MspInit+0x8c>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	60bb      	str	r3, [r7, #8]
 800111a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800111c:	2304      	movs	r3, #4
 800111e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	480b      	ldr	r0, [pc, #44]	; (800115c <HAL_UART_MspInit+0x90>)
 8001130:	f000 fa4c 	bl	80015cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001134:	2308      	movs	r3, #8
 8001136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_UART_MspInit+0x90>)
 8001148:	f000 fa40 	bl	80015cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40004400 	.word	0x40004400
 8001158:	40021000 	.word	0x40021000
 800115c:	40010800 	.word	0x40010800

08001160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001164:	e7fe      	b.n	8001164 <NMI_Handler+0x4>

08001166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a6:	f000 f8e7 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM2_IRQHandler+0x10>)
 80011b6:	f001 f98b 	bl	80024d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000130 	.word	0x20000130

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f002 f8e6 	bl	80033c4 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20005000 	.word	0x20005000
 8001224:	00000400 	.word	0x00000400
 8001228:	200000dc 	.word	0x200000dc
 800122c:	20000208 	.word	0x20000208

08001230 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <transmitdata>:


#include "uart.h"
#include <stdio.h>
char str[50];
void transmitdata(){
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	if(status == M1_RED_GREEN){
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <transmitdata+0x50>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b0b      	cmp	r3, #11
 8001246:	d110      	bne.n	800126a <transmitdata+0x2e>
		HAL_UART_Transmit(&huart2,(void*)str,sprintf(str,"%d",count1+5),1000);
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <transmitdata+0x54>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3305      	adds	r3, #5
 800124e:	461a      	mov	r2, r3
 8001250:	4910      	ldr	r1, [pc, #64]	; (8001294 <transmitdata+0x58>)
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <transmitdata+0x5c>)
 8001254:	f002 f8e8 	bl	8003428 <siprintf>
 8001258:	4603      	mov	r3, r0
 800125a:	b29a      	uxth	r2, r3
 800125c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001260:	490d      	ldr	r1, [pc, #52]	; (8001298 <transmitdata+0x5c>)
 8001262:	480e      	ldr	r0, [pc, #56]	; (800129c <transmitdata+0x60>)
 8001264:	f001 ff43 	bl	80030ee <HAL_UART_Transmit>
	}
	else{
		HAL_UART_Transmit(&huart2,(void*)str,sprintf(str,"%d",count1),1000);
	}
}
 8001268:	e00e      	b.n	8001288 <transmitdata+0x4c>
		HAL_UART_Transmit(&huart2,(void*)str,sprintf(str,"%d",count1),1000);
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <transmitdata+0x54>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	4908      	ldr	r1, [pc, #32]	; (8001294 <transmitdata+0x58>)
 8001272:	4809      	ldr	r0, [pc, #36]	; (8001298 <transmitdata+0x5c>)
 8001274:	f002 f8d8 	bl	8003428 <siprintf>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001280:	4905      	ldr	r1, [pc, #20]	; (8001298 <transmitdata+0x5c>)
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <transmitdata+0x60>)
 8001284:	f001 ff33 	bl	80030ee <HAL_UART_Transmit>
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200000a8 	.word	0x200000a8
 8001290:	200000ac 	.word	0x200000ac
 8001294:	08003cb4 	.word	0x08003cb4
 8001298:	200001bc 	.word	0x200001bc
 800129c:	20000178 	.word	0x20000178

080012a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a2:	490d      	ldr	r1, [pc, #52]	; (80012d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a4:	4a0d      	ldr	r2, [pc, #52]	; (80012dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b8:	4c0a      	ldr	r4, [pc, #40]	; (80012e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012c6:	f7ff ffb3 	bl	8001230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ca:	f002 f881 	bl	80033d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ce:	f7ff fba9 	bl	8000a24 <main>
  bx lr
 80012d2:	4770      	bx	lr
  ldr r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80012dc:	08003d1c 	.word	0x08003d1c
  ldr r2, =_sbss
 80012e0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80012e4:	20000204 	.word	0x20000204

080012e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e8:	e7fe      	b.n	80012e8 <ADC1_2_IRQHandler>
	...

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_Init+0x28>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_Init+0x28>)
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f000 f923 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001302:	200f      	movs	r0, #15
 8001304:	f000 f808 	bl	8001318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001308:	f7ff fe44 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40022000 	.word	0x40022000

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x54>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x58>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f93b 	bl	80015b2 <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f000 f903 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x5c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000001c 	.word	0x2000001c
 8001370:	20000024 	.word	0x20000024
 8001374:	20000020 	.word	0x20000020

08001378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x1c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_IncTick+0x20>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a03      	ldr	r2, [pc, #12]	; (8001398 <HAL_IncTick+0x20>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	20000024 	.word	0x20000024
 8001398:	200001f0 	.word	0x200001f0

0800139c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return uwTick;
 80013a0:	4b02      	ldr	r3, [pc, #8]	; (80013ac <HAL_GetTick+0x10>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	200001f0 	.word	0x200001f0

080013b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013cc:	4013      	ands	r3, r2
 80013ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <__NVIC_SetPriorityGrouping+0x44>)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	60d3      	str	r3, [r2, #12]
}
 80013e8:	bf00      	nop
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013fc:	4b04      	ldr	r3, [pc, #16]	; (8001410 <__NVIC_GetPriorityGrouping+0x18>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	0a1b      	lsrs	r3, r3, #8
 8001402:	f003 0307 	and.w	r3, r3, #7
}
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db0b      	blt.n	800143e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	f003 021f 	and.w	r2, r3, #31
 800142c:	4906      	ldr	r1, [pc, #24]	; (8001448 <__NVIC_EnableIRQ+0x34>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	2001      	movs	r0, #1
 8001436:	fa00 f202 	lsl.w	r2, r0, r2
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295
 8001528:	f7ff ff90 	bl	800144c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff2d 	bl	80013b0 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff42 	bl	80013f8 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff90 	bl	80014a0 <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5f 	bl	800144c <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff35 	bl	8001414 <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa2 	bl	8001504 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b08b      	sub	sp, #44	; 0x2c
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	e169      	b.n	80018b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015e0:	2201      	movs	r2, #1
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 8158 	bne.w	80018ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a9a      	ldr	r2, [pc, #616]	; (800186c <HAL_GPIO_Init+0x2a0>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d05e      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001608:	4a98      	ldr	r2, [pc, #608]	; (800186c <HAL_GPIO_Init+0x2a0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d875      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 800160e:	4a98      	ldr	r2, [pc, #608]	; (8001870 <HAL_GPIO_Init+0x2a4>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d058      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001614:	4a96      	ldr	r2, [pc, #600]	; (8001870 <HAL_GPIO_Init+0x2a4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d86f      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 800161a:	4a96      	ldr	r2, [pc, #600]	; (8001874 <HAL_GPIO_Init+0x2a8>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d052      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001620:	4a94      	ldr	r2, [pc, #592]	; (8001874 <HAL_GPIO_Init+0x2a8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d869      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 8001626:	4a94      	ldr	r2, [pc, #592]	; (8001878 <HAL_GPIO_Init+0x2ac>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d04c      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 800162c:	4a92      	ldr	r2, [pc, #584]	; (8001878 <HAL_GPIO_Init+0x2ac>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d863      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 8001632:	4a92      	ldr	r2, [pc, #584]	; (800187c <HAL_GPIO_Init+0x2b0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d046      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
 8001638:	4a90      	ldr	r2, [pc, #576]	; (800187c <HAL_GPIO_Init+0x2b0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d85d      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 800163e:	2b12      	cmp	r3, #18
 8001640:	d82a      	bhi.n	8001698 <HAL_GPIO_Init+0xcc>
 8001642:	2b12      	cmp	r3, #18
 8001644:	d859      	bhi.n	80016fa <HAL_GPIO_Init+0x12e>
 8001646:	a201      	add	r2, pc, #4	; (adr r2, 800164c <HAL_GPIO_Init+0x80>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	080016c7 	.word	0x080016c7
 8001650:	080016a1 	.word	0x080016a1
 8001654:	080016b3 	.word	0x080016b3
 8001658:	080016f5 	.word	0x080016f5
 800165c:	080016fb 	.word	0x080016fb
 8001660:	080016fb 	.word	0x080016fb
 8001664:	080016fb 	.word	0x080016fb
 8001668:	080016fb 	.word	0x080016fb
 800166c:	080016fb 	.word	0x080016fb
 8001670:	080016fb 	.word	0x080016fb
 8001674:	080016fb 	.word	0x080016fb
 8001678:	080016fb 	.word	0x080016fb
 800167c:	080016fb 	.word	0x080016fb
 8001680:	080016fb 	.word	0x080016fb
 8001684:	080016fb 	.word	0x080016fb
 8001688:	080016fb 	.word	0x080016fb
 800168c:	080016fb 	.word	0x080016fb
 8001690:	080016a9 	.word	0x080016a9
 8001694:	080016bd 	.word	0x080016bd
 8001698:	4a79      	ldr	r2, [pc, #484]	; (8001880 <HAL_GPIO_Init+0x2b4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d013      	beq.n	80016c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800169e:	e02c      	b.n	80016fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	623b      	str	r3, [r7, #32]
          break;
 80016a6:	e029      	b.n	80016fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	3304      	adds	r3, #4
 80016ae:	623b      	str	r3, [r7, #32]
          break;
 80016b0:	e024      	b.n	80016fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	3308      	adds	r3, #8
 80016b8:	623b      	str	r3, [r7, #32]
          break;
 80016ba:	e01f      	b.n	80016fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	330c      	adds	r3, #12
 80016c2:	623b      	str	r3, [r7, #32]
          break;
 80016c4:	e01a      	b.n	80016fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ce:	2304      	movs	r3, #4
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e013      	b.n	80016fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016dc:	2308      	movs	r3, #8
 80016de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	611a      	str	r2, [r3, #16]
          break;
 80016e6:	e009      	b.n	80016fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e8:	2308      	movs	r3, #8
 80016ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	615a      	str	r2, [r3, #20]
          break;
 80016f2:	e003      	b.n	80016fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x130>
          break;
 80016fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	2bff      	cmp	r3, #255	; 0xff
 8001700:	d801      	bhi.n	8001706 <HAL_GPIO_Init+0x13a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	e001      	b.n	800170a <HAL_GPIO_Init+0x13e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3304      	adds	r3, #4
 800170a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	2bff      	cmp	r3, #255	; 0xff
 8001710:	d802      	bhi.n	8001718 <HAL_GPIO_Init+0x14c>
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	e002      	b.n	800171e <HAL_GPIO_Init+0x152>
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	3b08      	subs	r3, #8
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	210f      	movs	r1, #15
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	401a      	ands	r2, r3
 8001730:	6a39      	ldr	r1, [r7, #32]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	fa01 f303 	lsl.w	r3, r1, r3
 8001738:	431a      	orrs	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80b1 	beq.w	80018ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800174c:	4b4d      	ldr	r3, [pc, #308]	; (8001884 <HAL_GPIO_Init+0x2b8>)
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	4a4c      	ldr	r2, [pc, #304]	; (8001884 <HAL_GPIO_Init+0x2b8>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6193      	str	r3, [r2, #24]
 8001758:	4b4a      	ldr	r3, [pc, #296]	; (8001884 <HAL_GPIO_Init+0x2b8>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001764:	4a48      	ldr	r2, [pc, #288]	; (8001888 <HAL_GPIO_Init+0x2bc>)
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001770:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a40      	ldr	r2, [pc, #256]	; (800188c <HAL_GPIO_Init+0x2c0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d013      	beq.n	80017b8 <HAL_GPIO_Init+0x1ec>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a3f      	ldr	r2, [pc, #252]	; (8001890 <HAL_GPIO_Init+0x2c4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d00d      	beq.n	80017b4 <HAL_GPIO_Init+0x1e8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a3e      	ldr	r2, [pc, #248]	; (8001894 <HAL_GPIO_Init+0x2c8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d007      	beq.n	80017b0 <HAL_GPIO_Init+0x1e4>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a3d      	ldr	r2, [pc, #244]	; (8001898 <HAL_GPIO_Init+0x2cc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_GPIO_Init+0x1e0>
 80017a8:	2303      	movs	r3, #3
 80017aa:	e006      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017ac:	2304      	movs	r3, #4
 80017ae:	e004      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017b4:	2301      	movs	r3, #1
 80017b6:	e000      	b.n	80017ba <HAL_GPIO_Init+0x1ee>
 80017b8:	2300      	movs	r3, #0
 80017ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017bc:	f002 0203 	and.w	r2, r2, #3
 80017c0:	0092      	lsls	r2, r2, #2
 80017c2:	4093      	lsls	r3, r2
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ca:	492f      	ldr	r1, [pc, #188]	; (8001888 <HAL_GPIO_Init+0x2bc>)
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e4:	4b2d      	ldr	r3, [pc, #180]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	492c      	ldr	r1, [pc, #176]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017f2:	4b2a      	ldr	r3, [pc, #168]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4928      	ldr	r1, [pc, #160]	; (800189c <HAL_GPIO_Init+0x2d0>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4922      	ldr	r1, [pc, #136]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	43db      	mvns	r3, r3
 8001822:	491e      	ldr	r1, [pc, #120]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001824:	4013      	ands	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	4918      	ldr	r1, [pc, #96]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	43db      	mvns	r3, r3
 800184a:	4914      	ldr	r1, [pc, #80]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800184c:	4013      	ands	r3, r2
 800184e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d021      	beq.n	80018a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_GPIO_Init+0x2d0>)
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	490e      	ldr	r1, [pc, #56]	; (800189c <HAL_GPIO_Init+0x2d0>)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4313      	orrs	r3, r2
 8001866:	60cb      	str	r3, [r1, #12]
 8001868:	e021      	b.n	80018ae <HAL_GPIO_Init+0x2e2>
 800186a:	bf00      	nop
 800186c:	10320000 	.word	0x10320000
 8001870:	10310000 	.word	0x10310000
 8001874:	10220000 	.word	0x10220000
 8001878:	10210000 	.word	0x10210000
 800187c:	10120000 	.word	0x10120000
 8001880:	10110000 	.word	0x10110000
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000
 800188c:	40010800 	.word	0x40010800
 8001890:	40010c00 	.word	0x40010c00
 8001894:	40011000 	.word	0x40011000
 8001898:	40011400 	.word	0x40011400
 800189c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_GPIO_Init+0x304>)
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	4909      	ldr	r1, [pc, #36]	; (80018d0 <HAL_GPIO_Init+0x304>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	3301      	adds	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f47f ae8e 	bne.w	80015e0 <HAL_GPIO_Init+0x14>
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	372c      	adds	r7, #44	; 0x2c
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	e001      	b.n	80018f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
 800190e:	4613      	mov	r3, r2
 8001910:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001912:	787b      	ldrb	r3, [r7, #1]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001918:	887a      	ldrh	r2, [r7, #2]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800191e:	e003      	b.n	8001928 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	041a      	lsls	r2, r3, #16
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	611a      	str	r2, [r3, #16]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001932:	b480      	push	{r7}
 8001934:	b085      	sub	sp, #20
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001944:	887a      	ldrh	r2, [r7, #2]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4013      	ands	r3, r2
 800194a:	041a      	lsls	r2, r3, #16
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	43d9      	mvns	r1, r3
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	400b      	ands	r3, r1
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	611a      	str	r2, [r3, #16]
}
 800195a:	bf00      	nop
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e26c      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8087 	beq.w	8001a92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001984:	4b92      	ldr	r3, [pc, #584]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b04      	cmp	r3, #4
 800198e:	d00c      	beq.n	80019aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001990:	4b8f      	ldr	r3, [pc, #572]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d112      	bne.n	80019c2 <HAL_RCC_OscConfig+0x5e>
 800199c:	4b8c      	ldr	r3, [pc, #560]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a8:	d10b      	bne.n	80019c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06c      	beq.n	8001a90 <HAL_RCC_OscConfig+0x12c>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d168      	bne.n	8001a90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e246      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x76>
 80019cc:	4b80      	ldr	r3, [pc, #512]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a7f      	ldr	r2, [pc, #508]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	e02e      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x98>
 80019e2:	4b7b      	ldr	r3, [pc, #492]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a7a      	ldr	r2, [pc, #488]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	4b78      	ldr	r3, [pc, #480]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a77      	ldr	r2, [pc, #476]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e01d      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0xbc>
 8001a06:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a71      	ldr	r2, [pc, #452]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	4b6f      	ldr	r3, [pc, #444]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a6e      	ldr	r2, [pc, #440]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0xd4>
 8001a20:	4b6b      	ldr	r3, [pc, #428]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a6a      	ldr	r2, [pc, #424]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	4b68      	ldr	r3, [pc, #416]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a67      	ldr	r2, [pc, #412]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d013      	beq.n	8001a68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff fcac 	bl	800139c <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff fca8 	bl	800139c <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1fa      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe4>
 8001a66:	e014      	b.n	8001a92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fc98 	bl	800139c <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a70:	f7ff fc94 	bl	800139c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e1e6      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x10c>
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d063      	beq.n	8001b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9e:	4b4c      	ldr	r3, [pc, #304]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aaa:	4b49      	ldr	r3, [pc, #292]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d11c      	bne.n	8001af0 <HAL_RCC_OscConfig+0x18c>
 8001ab6:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d116      	bne.n	8001af0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac2:	4b43      	ldr	r3, [pc, #268]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d005      	beq.n	8001ada <HAL_RCC_OscConfig+0x176>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d001      	beq.n	8001ada <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e1ba      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ada:	4b3d      	ldr	r3, [pc, #244]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4939      	ldr	r1, [pc, #228]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aee:	e03a      	b.n	8001b66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af8:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afe:	f7ff fc4d 	bl	800139c <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	e008      	b.n	8001b18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b06:	f7ff fc49 	bl	800139c <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e19b      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0f0      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4927      	ldr	r1, [pc, #156]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]
 8001b38:	e015      	b.n	8001b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3a:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fc2c 	bl	800139c <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b48:	f7ff fc28 	bl	800139c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e17a      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1f0      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d03a      	beq.n	8001be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d019      	beq.n	8001bae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7a:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff fc0c 	bl	800139c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff fc08 	bl	800139c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e15a      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f000 fad8 	bl	800215c <RCC_Delay>
 8001bac:	e01c      	b.n	8001be8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fbf2 	bl	800139c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fbee 	bl	800139c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d908      	bls.n	8001bdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e140      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	42420000 	.word	0x42420000
 8001bd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bdc:	4b9e      	ldr	r3, [pc, #632]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e9      	bne.n	8001bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80a6 	beq.w	8001d42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfa:	4b97      	ldr	r3, [pc, #604]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10d      	bne.n	8001c22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4b94      	ldr	r3, [pc, #592]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	4a93      	ldr	r2, [pc, #588]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	61d3      	str	r3, [r2, #28]
 8001c12:	4b91      	ldr	r3, [pc, #580]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60bb      	str	r3, [r7, #8]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c22:	4b8e      	ldr	r3, [pc, #568]	; (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2e:	4b8b      	ldr	r3, [pc, #556]	; (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a8a      	ldr	r2, [pc, #552]	; (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fbaf 	bl	800139c <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff fbab 	bl	800139c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b64      	cmp	r3, #100	; 0x64
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0fd      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d106      	bne.n	8001c76 <HAL_RCC_OscConfig+0x312>
 8001c68:	4b7b      	ldr	r3, [pc, #492]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4a7a      	ldr	r2, [pc, #488]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	6213      	str	r3, [r2, #32]
 8001c74:	e02d      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10c      	bne.n	8001c98 <HAL_RCC_OscConfig+0x334>
 8001c7e:	4b76      	ldr	r3, [pc, #472]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a75      	ldr	r2, [pc, #468]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	4b73      	ldr	r3, [pc, #460]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	4a72      	ldr	r2, [pc, #456]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	6213      	str	r3, [r2, #32]
 8001c96:	e01c      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0x356>
 8001ca0:	4b6d      	ldr	r3, [pc, #436]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a6c      	ldr	r2, [pc, #432]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	f043 0304 	orr.w	r3, r3, #4
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	4b6a      	ldr	r3, [pc, #424]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	4a69      	ldr	r2, [pc, #420]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cb2:	f043 0301 	orr.w	r3, r3, #1
 8001cb6:	6213      	str	r3, [r2, #32]
 8001cb8:	e00b      	b.n	8001cd2 <HAL_RCC_OscConfig+0x36e>
 8001cba:	4b67      	ldr	r3, [pc, #412]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a66      	ldr	r2, [pc, #408]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4b64      	ldr	r3, [pc, #400]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a63      	ldr	r2, [pc, #396]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d015      	beq.n	8001d06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cda:	f7ff fb5f 	bl	800139c <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce2:	f7ff fb5b 	bl	800139c <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e0ab      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf8:	4b57      	ldr	r3, [pc, #348]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0ee      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x37e>
 8001d04:	e014      	b.n	8001d30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7ff fb49 	bl	800139c <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0c:	e00a      	b.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7ff fb45 	bl	800139c <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e095      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d24:	4b4c      	ldr	r3, [pc, #304]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1ee      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d105      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d36:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	4a47      	ldr	r2, [pc, #284]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69db      	ldr	r3, [r3, #28]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8081 	beq.w	8001e4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d4c:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d061      	beq.n	8001e1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d146      	bne.n	8001dee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d60:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <HAL_RCC_OscConfig+0x4fc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff fb19 	bl	800139c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff fb15 	bl	800139c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e067      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d80:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d94:	d108      	bne.n	8001da8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d96:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	492d      	ldr	r1, [pc, #180]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a19      	ldr	r1, [r3, #32]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	430b      	orrs	r3, r1
 8001dba:	4927      	ldr	r1, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_RCC_OscConfig+0x4fc>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fae9 	bl	800139c <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dce:	f7ff fae5 	bl	800139c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e037      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x46a>
 8001dec:	e02f      	b.n	8001e4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_RCC_OscConfig+0x4fc>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fad2 	bl	800139c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff face 	bl	800139c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e020      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0e:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x498>
 8001e1a:	e018      	b.n	8001e4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e013      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	42420060 	.word	0x42420060

08001e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0d0      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0207 	bic.w	r2, r3, #7
 8001e8e:	4965      	ldr	r1, [pc, #404]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0b8      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a58      	ldr	r2, [pc, #352]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed8:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a52      	ldr	r2, [pc, #328]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ee2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b50      	ldr	r3, [pc, #320]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	494d      	ldr	r1, [pc, #308]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d040      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d115      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e07f      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f22:	4b41      	ldr	r3, [pc, #260]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e073      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e06b      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f023 0203 	bic.w	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4936      	ldr	r1, [pc, #216]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f54:	f7ff fa22 	bl	800139c <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7ff fa1e 	bl	800139c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e053      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 020c 	and.w	r2, r3, #12
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1eb      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d210      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4922      	ldr	r1, [pc, #136]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e032      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4916      	ldr	r1, [pc, #88]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ff2:	f000 f821 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	490a      	ldr	r1, [pc, #40]	; (800202c <HAL_RCC_ClockConfig+0x1c8>)
 8002004:	5ccb      	ldrb	r3, [r1, r3]
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1cc>)
 800200c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1d0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f980 	bl	8001318 <HAL_InitTick>

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40022000 	.word	0x40022000
 8002028:	40021000 	.word	0x40021000
 800202c:	08003cc8 	.word	0x08003cc8
 8002030:	2000001c 	.word	0x2000001c
 8002034:	20000020 	.word	0x20000020

08002038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	b490      	push	{r4, r7}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800203e:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002040:	1d3c      	adds	r4, r7, #4
 8002042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002048:	f240 2301 	movw	r3, #513	; 0x201
 800204c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002062:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d002      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x40>
 8002072:	2b08      	cmp	r3, #8
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x46>
 8002076:	e02d      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207a:	623b      	str	r3, [r7, #32]
      break;
 800207c:	e02d      	b.n	80020da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	0c9b      	lsrs	r3, r3, #18
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800208a:	4413      	add	r3, r2
 800208c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002090:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0c5b      	lsrs	r3, r3, #17
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020aa:	4413      	add	r3, r2
 80020ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b6:	fb02 f203 	mul.w	r2, r2, r3
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	e004      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	623b      	str	r3, [r7, #32]
      break;
 80020d2:	e002      	b.n	80020da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d6:	623b      	str	r3, [r7, #32]
      break;
 80020d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020da:	6a3b      	ldr	r3, [r7, #32]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc90      	pop	{r4, r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	08003cb8 	.word	0x08003cb8
 80020ec:	40021000 	.word	0x40021000
 80020f0:	007a1200 	.word	0x007a1200
 80020f4:	003d0900 	.word	0x003d0900

080020f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020fc:	4b02      	ldr	r3, [pc, #8]	; (8002108 <HAL_RCC_GetHCLKFreq+0x10>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	2000001c 	.word	0x2000001c

0800210c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002110:	f7ff fff2 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4903      	ldr	r1, [pc, #12]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	08003cd8 	.word	0x08003cd8

08002134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002138:	f7ff ffde 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0adb      	lsrs	r3, r3, #11
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	4903      	ldr	r1, [pc, #12]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800214a:	5ccb      	ldrb	r3, [r1, r3]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	08003cd8 	.word	0x08003cd8

0800215c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <RCC_Delay+0x34>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <RCC_Delay+0x38>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0a5b      	lsrs	r3, r3, #9
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002178:	bf00      	nop
  }
  while (Delay --);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e5a      	subs	r2, r3, #1
 800217e:	60fa      	str	r2, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f9      	bne.n	8002178 <RCC_Delay+0x1c>
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	2000001c 	.word	0x2000001c
 8002194:	10624dd3 	.word	0x10624dd3

08002198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e041      	b.n	800222e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe ff1a 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f000 fc28 	bl	8002a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d001      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e03a      	b.n	80022c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a18      	ldr	r2, [pc, #96]	; (80022d0 <HAL_TIM_Base_Start_IT+0x98>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00e      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x58>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227a:	d009      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x58>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x58>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d111      	bne.n	80022b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d010      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	e007      	b.n	80022c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	40012c00 	.word	0x40012c00
 80022d4:	40000400 	.word	0x40000400
 80022d8:	40000800 	.word	0x40000800

080022dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e041      	b.n	8002372 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f839 	bl	800237a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f000 fb86 	bl	8002a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <HAL_TIM_PWM_Start+0x24>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	bf14      	ite	ne
 80023a8:	2301      	movne	r3, #1
 80023aa:	2300      	moveq	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	e022      	b.n	80023f6 <HAL_TIM_PWM_Start+0x6a>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d109      	bne.n	80023ca <HAL_TIM_PWM_Start+0x3e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	bf14      	ite	ne
 80023c2:	2301      	movne	r3, #1
 80023c4:	2300      	moveq	r3, #0
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	e015      	b.n	80023f6 <HAL_TIM_PWM_Start+0x6a>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d109      	bne.n	80023e4 <HAL_TIM_PWM_Start+0x58>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	bf14      	ite	ne
 80023dc:	2301      	movne	r3, #1
 80023de:	2300      	moveq	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e008      	b.n	80023f6 <HAL_TIM_PWM_Start+0x6a>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e05e      	b.n	80024bc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d104      	bne.n	800240e <HAL_TIM_PWM_Start+0x82>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800240c:	e013      	b.n	8002436 <HAL_TIM_PWM_Start+0xaa>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d104      	bne.n	800241e <HAL_TIM_PWM_Start+0x92>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800241c:	e00b      	b.n	8002436 <HAL_TIM_PWM_Start+0xaa>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b08      	cmp	r3, #8
 8002422:	d104      	bne.n	800242e <HAL_TIM_PWM_Start+0xa2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800242c:	e003      	b.n	8002436 <HAL_TIM_PWM_Start+0xaa>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2201      	movs	r2, #1
 800243c:	6839      	ldr	r1, [r7, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fd74 	bl	8002f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a1e      	ldr	r2, [pc, #120]	; (80024c4 <HAL_TIM_PWM_Start+0x138>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d107      	bne.n	800245e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a18      	ldr	r2, [pc, #96]	; (80024c4 <HAL_TIM_PWM_Start+0x138>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d00e      	beq.n	8002486 <HAL_TIM_PWM_Start+0xfa>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002470:	d009      	beq.n	8002486 <HAL_TIM_PWM_Start+0xfa>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <HAL_TIM_PWM_Start+0x13c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d004      	beq.n	8002486 <HAL_TIM_PWM_Start+0xfa>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a12      	ldr	r2, [pc, #72]	; (80024cc <HAL_TIM_PWM_Start+0x140>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d111      	bne.n	80024aa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b06      	cmp	r3, #6
 8002496:	d010      	beq.n	80024ba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024a8:	e007      	b.n	80024ba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0201 	orr.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40000400 	.word	0x40000400
 80024cc:	40000800 	.word	0x40000800

080024d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0202 	mvn.w	r2, #2
 80024fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fa6f 	bl	80029f6 <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fa62 	bl	80029e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 fa71 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b04      	cmp	r3, #4
 8002538:	d122      	bne.n	8002580 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b04      	cmp	r3, #4
 8002546:	d11b      	bne.n	8002580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0204 	mvn.w	r2, #4
 8002550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fa45 	bl	80029f6 <HAL_TIM_IC_CaptureCallback>
 800256c:	e005      	b.n	800257a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa38 	bl	80029e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fa47 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b08      	cmp	r3, #8
 800258c:	d122      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b08      	cmp	r3, #8
 800259a:	d11b      	bne.n	80025d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0208 	mvn.w	r2, #8
 80025a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2204      	movs	r2, #4
 80025aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fa1b 	bl	80029f6 <HAL_TIM_IC_CaptureCallback>
 80025c0:	e005      	b.n	80025ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa0e 	bl	80029e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 fa1d 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d122      	bne.n	8002628 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0310 	and.w	r3, r3, #16
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d11b      	bne.n	8002628 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0210 	mvn.w	r2, #16
 80025f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2208      	movs	r2, #8
 80025fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f9f1 	bl	80029f6 <HAL_TIM_IC_CaptureCallback>
 8002614:	e005      	b.n	8002622 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f9e4 	bl	80029e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f9f3 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10e      	bne.n	8002654 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0201 	mvn.w	r2, #1
 800264c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fbaa 	bl	8000da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265e:	2b80      	cmp	r3, #128	; 0x80
 8002660:	d10e      	bne.n	8002680 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266c:	2b80      	cmp	r3, #128	; 0x80
 800266e:	d107      	bne.n	8002680 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fce1 	bl	8003042 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	2b40      	cmp	r3, #64	; 0x40
 800269a:	d107      	bne.n	80026ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f9b7 	bl	8002a1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d10e      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d107      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0220 	mvn.w	r2, #32
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fcac 	bl	8003030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e0ac      	b.n	8002854 <HAL_TIM_PWM_ConfigChannel+0x174>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	f200 809f 	bhi.w	8002848 <HAL_TIM_PWM_ConfigChannel+0x168>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	08002745 	.word	0x08002745
 8002714:	08002849 	.word	0x08002849
 8002718:	08002849 	.word	0x08002849
 800271c:	08002849 	.word	0x08002849
 8002720:	08002785 	.word	0x08002785
 8002724:	08002849 	.word	0x08002849
 8002728:	08002849 	.word	0x08002849
 800272c:	08002849 	.word	0x08002849
 8002730:	080027c7 	.word	0x080027c7
 8002734:	08002849 	.word	0x08002849
 8002738:	08002849 	.word	0x08002849
 800273c:	08002849 	.word	0x08002849
 8002740:	08002807 	.word	0x08002807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f9d0 	bl	8002af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0208 	orr.w	r2, r2, #8
 800275e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0204 	bic.w	r2, r2, #4
 800276e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6999      	ldr	r1, [r3, #24]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	619a      	str	r2, [r3, #24]
      break;
 8002782:	e062      	b.n	800284a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fa16 	bl	8002bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800279e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6999      	ldr	r1, [r3, #24]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	021a      	lsls	r2, r3, #8
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	619a      	str	r2, [r3, #24]
      break;
 80027c4:	e041      	b.n	800284a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fa5f 	bl	8002c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0208 	orr.w	r2, r2, #8
 80027e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0204 	bic.w	r2, r2, #4
 80027f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69d9      	ldr	r1, [r3, #28]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	61da      	str	r2, [r3, #28]
      break;
 8002804:	e021      	b.n	800284a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 faa9 	bl	8002d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69d9      	ldr	r1, [r3, #28]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	021a      	lsls	r2, r3, #8
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	61da      	str	r2, [r3, #28]
      break;
 8002846:	e000      	b.n	800284a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002848:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_TIM_ConfigClockSource+0x18>
 8002870:	2302      	movs	r3, #2
 8002872:	e0b3      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x180>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002892:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800289a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ac:	d03e      	beq.n	800292c <HAL_TIM_ConfigClockSource+0xd0>
 80028ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b2:	f200 8087 	bhi.w	80029c4 <HAL_TIM_ConfigClockSource+0x168>
 80028b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ba:	f000 8085 	beq.w	80029c8 <HAL_TIM_ConfigClockSource+0x16c>
 80028be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c2:	d87f      	bhi.n	80029c4 <HAL_TIM_ConfigClockSource+0x168>
 80028c4:	2b70      	cmp	r3, #112	; 0x70
 80028c6:	d01a      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0xa2>
 80028c8:	2b70      	cmp	r3, #112	; 0x70
 80028ca:	d87b      	bhi.n	80029c4 <HAL_TIM_ConfigClockSource+0x168>
 80028cc:	2b60      	cmp	r3, #96	; 0x60
 80028ce:	d050      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0x116>
 80028d0:	2b60      	cmp	r3, #96	; 0x60
 80028d2:	d877      	bhi.n	80029c4 <HAL_TIM_ConfigClockSource+0x168>
 80028d4:	2b50      	cmp	r3, #80	; 0x50
 80028d6:	d03c      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0xf6>
 80028d8:	2b50      	cmp	r3, #80	; 0x50
 80028da:	d873      	bhi.n	80029c4 <HAL_TIM_ConfigClockSource+0x168>
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d058      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x136>
 80028e0:	2b40      	cmp	r3, #64	; 0x40
 80028e2:	d86f      	bhi.n	80029c4 <HAL_TIM_ConfigClockSource+0x168>
 80028e4:	2b30      	cmp	r3, #48	; 0x30
 80028e6:	d064      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x156>
 80028e8:	2b30      	cmp	r3, #48	; 0x30
 80028ea:	d86b      	bhi.n	80029c4 <HAL_TIM_ConfigClockSource+0x168>
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d060      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x156>
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d867      	bhi.n	80029c4 <HAL_TIM_ConfigClockSource+0x168>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d05c      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x156>
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d05a      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028fc:	e062      	b.n	80029c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6899      	ldr	r1, [r3, #8]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f000 faee 	bl	8002eee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002920:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	609a      	str	r2, [r3, #8]
      break;
 800292a:	e04e      	b.n	80029ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f000 fad7 	bl	8002eee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800294e:	609a      	str	r2, [r3, #8]
      break;
 8002950:	e03b      	b.n	80029ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	461a      	mov	r2, r3
 8002960:	f000 fa4e 	bl	8002e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2150      	movs	r1, #80	; 0x50
 800296a:	4618      	mov	r0, r3
 800296c:	f000 faa5 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 8002970:	e02b      	b.n	80029ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	461a      	mov	r2, r3
 8002980:	f000 fa6c 	bl	8002e5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2160      	movs	r1, #96	; 0x60
 800298a:	4618      	mov	r0, r3
 800298c:	f000 fa95 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 8002990:	e01b      	b.n	80029ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	461a      	mov	r2, r3
 80029a0:	f000 fa2e 	bl	8002e00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2140      	movs	r1, #64	; 0x40
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 fa85 	bl	8002eba <TIM_ITRx_SetConfig>
      break;
 80029b0:	e00b      	b.n	80029ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4619      	mov	r1, r3
 80029bc:	4610      	mov	r0, r2
 80029be:	f000 fa7c 	bl	8002eba <TIM_ITRx_SetConfig>
        break;
 80029c2:	e002      	b.n	80029ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029c4:	bf00      	nop
 80029c6:	e000      	b.n	80029ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80029c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <TIM_Base_SetConfig+0xb8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00b      	beq.n	8002a5c <TIM_Base_SetConfig+0x30>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4a:	d007      	beq.n	8002a5c <TIM_Base_SetConfig+0x30>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a26      	ldr	r2, [pc, #152]	; (8002ae8 <TIM_Base_SetConfig+0xbc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d003      	beq.n	8002a5c <TIM_Base_SetConfig+0x30>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a25      	ldr	r2, [pc, #148]	; (8002aec <TIM_Base_SetConfig+0xc0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d108      	bne.n	8002a6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a1c      	ldr	r2, [pc, #112]	; (8002ae4 <TIM_Base_SetConfig+0xb8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00b      	beq.n	8002a8e <TIM_Base_SetConfig+0x62>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d007      	beq.n	8002a8e <TIM_Base_SetConfig+0x62>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <TIM_Base_SetConfig+0xbc>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d003      	beq.n	8002a8e <TIM_Base_SetConfig+0x62>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a18      	ldr	r2, [pc, #96]	; (8002aec <TIM_Base_SetConfig+0xc0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d108      	bne.n	8002aa0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <TIM_Base_SetConfig+0xb8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d103      	bne.n	8002ad4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	615a      	str	r2, [r3, #20]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	40000400 	.word	0x40000400
 8002aec:	40000800 	.word	0x40000800

08002af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f023 0201 	bic.w	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f023 0302 	bic.w	r3, r3, #2
 8002b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a1c      	ldr	r2, [pc, #112]	; (8002bb8 <TIM_OC1_SetConfig+0xc8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d10c      	bne.n	8002b66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f023 0308 	bic.w	r3, r3, #8
 8002b52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <TIM_OC1_SetConfig+0xc8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d111      	bne.n	8002b92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	621a      	str	r2, [r3, #32]
}
 8002bac:	bf00      	nop
 8002bae:	371c      	adds	r7, #28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40012c00 	.word	0x40012c00

08002bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f023 0210 	bic.w	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f023 0320 	bic.w	r3, r3, #32
 8002c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <TIM_OC2_SetConfig+0xd0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10d      	bne.n	8002c38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a14      	ldr	r2, [pc, #80]	; (8002c8c <TIM_OC2_SetConfig+0xd0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d113      	bne.n	8002c68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	621a      	str	r2, [r3, #32]
}
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	40012c00 	.word	0x40012c00

08002c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0303 	bic.w	r3, r3, #3
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a1d      	ldr	r2, [pc, #116]	; (8002d60 <TIM_OC3_SetConfig+0xd0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d10d      	bne.n	8002d0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <TIM_OC3_SetConfig+0xd0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d113      	bne.n	8002d3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	621a      	str	r2, [r3, #32]
}
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40012c00 	.word	0x40012c00

08002d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	031b      	lsls	r3, r3, #12
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a0f      	ldr	r2, [pc, #60]	; (8002dfc <TIM_OC4_SetConfig+0x98>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d109      	bne.n	8002dd8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	019b      	lsls	r3, r3, #6
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	621a      	str	r2, [r3, #32]
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	40012c00 	.word	0x40012c00

08002e00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	f023 0201 	bic.w	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f023 030a 	bic.w	r3, r3, #10
 8002e3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	621a      	str	r2, [r3, #32]
}
 8002e52:	bf00      	nop
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f023 0210 	bic.w	r2, r3, #16
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	031b      	lsls	r3, r3, #12
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	621a      	str	r2, [r3, #32]
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f043 0307 	orr.w	r3, r3, #7
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	609a      	str	r2, [r3, #8]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr

08002eee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b087      	sub	sp, #28
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	60f8      	str	r0, [r7, #12]
 8002ef6:	60b9      	str	r1, [r7, #8]
 8002ef8:	607a      	str	r2, [r7, #4]
 8002efa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	021a      	lsls	r2, r3, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	431a      	orrs	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	609a      	str	r2, [r3, #8]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2201      	movs	r2, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a1a      	ldr	r2, [r3, #32]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	401a      	ands	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a1a      	ldr	r2, [r3, #32]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	fa01 f303 	lsl.w	r3, r1, r3
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	621a      	str	r2, [r3, #32]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr

08002f74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e046      	b.n	800301a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a16      	ldr	r2, [pc, #88]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd8:	d009      	beq.n	8002fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a12      	ldr	r2, [pc, #72]	; (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a10      	ldr	r2, [pc, #64]	; (800302c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d10c      	bne.n	8003008 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	40012c00 	.word	0x40012c00
 8003028:	40000400 	.word	0x40000400
 800302c:	40000800 	.word	0x40000800

08003030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bc80      	pop	{r7}
 8003040:	4770      	bx	lr

08003042 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e03f      	b.n	80030e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fe f826 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f905 	bl	80032a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	691a      	ldr	r2, [r3, #16]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695a      	ldr	r2, [r3, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b08a      	sub	sp, #40	; 0x28
 80030f2:	af02      	add	r7, sp, #8
 80030f4:	60f8      	str	r0, [r7, #12]
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	4613      	mov	r3, r2
 80030fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b20      	cmp	r3, #32
 800310c:	d17c      	bne.n	8003208 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_UART_Transmit+0x2c>
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e075      	b.n	800320a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_UART_Transmit+0x3e>
 8003128:	2302      	movs	r3, #2
 800312a:	e06e      	b.n	800320a <HAL_UART_Transmit+0x11c>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2221      	movs	r2, #33	; 0x21
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003142:	f7fe f92b 	bl	800139c <HAL_GetTick>
 8003146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	88fa      	ldrh	r2, [r7, #6]
 800314c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	88fa      	ldrh	r2, [r7, #6]
 8003152:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315c:	d108      	bne.n	8003170 <HAL_UART_Transmit+0x82>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d104      	bne.n	8003170 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	e003      	b.n	8003178 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003180:	e02a      	b.n	80031d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2200      	movs	r2, #0
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f840 	bl	8003212 <UART_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e036      	b.n	800320a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	3302      	adds	r3, #2
 80031b6:	61bb      	str	r3, [r7, #24]
 80031b8:	e007      	b.n	80031ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	3301      	adds	r3, #1
 80031c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031dc:	b29b      	uxth	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1cf      	bne.n	8003182 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2140      	movs	r1, #64	; 0x40
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f810 	bl	8003212 <UART_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e006      	b.n	800320a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e000      	b.n	800320a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	60f8      	str	r0, [r7, #12]
 800321a:	60b9      	str	r1, [r7, #8]
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	4613      	mov	r3, r2
 8003220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003222:	e02c      	b.n	800327e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322a:	d028      	beq.n	800327e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <UART_WaitOnFlagUntilTimeout+0x30>
 8003232:	f7fe f8b3 	bl	800139c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	429a      	cmp	r2, r3
 8003240:	d21d      	bcs.n	800327e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003250:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695a      	ldr	r2, [r3, #20]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e00f      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	4013      	ands	r3, r2
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	bf0c      	ite	eq
 800328e:	2301      	moveq	r3, #1
 8003290:	2300      	movne	r3, #0
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	429a      	cmp	r2, r3
 800329a:	d0c3      	beq.n	8003224 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80032e2:	f023 030c 	bic.w	r3, r3, #12
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2c      	ldr	r2, [pc, #176]	; (80033bc <UART_SetConfig+0x114>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d103      	bne.n	8003318 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003310:	f7fe ff10 	bl	8002134 <HAL_RCC_GetPCLK2Freq>
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	e002      	b.n	800331e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003318:	f7fe fef8 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 800331c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009a      	lsls	r2, r3, #2
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <UART_SetConfig+0x118>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	0119      	lsls	r1, r3, #4
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009a      	lsls	r2, r3, #2
 8003348:	441a      	add	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fbb2 f2f3 	udiv	r2, r2, r3
 8003354:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <UART_SetConfig+0x118>)
 8003356:	fba3 0302 	umull	r0, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2064      	movs	r0, #100	; 0x64
 800335e:	fb00 f303 	mul.w	r3, r0, r3
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	3332      	adds	r3, #50	; 0x32
 8003368:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <UART_SetConfig+0x118>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003374:	4419      	add	r1, r3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009a      	lsls	r2, r3, #2
 8003380:	441a      	add	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	fbb2 f2f3 	udiv	r2, r2, r3
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <UART_SetConfig+0x118>)
 800338e:	fba3 0302 	umull	r0, r3, r3, r2
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2064      	movs	r0, #100	; 0x64
 8003396:	fb00 f303 	mul.w	r3, r0, r3
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	3332      	adds	r3, #50	; 0x32
 80033a0:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <UART_SetConfig+0x118>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	440a      	add	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40013800 	.word	0x40013800
 80033c0:	51eb851f 	.word	0x51eb851f

080033c4 <__errno>:
 80033c4:	4b01      	ldr	r3, [pc, #4]	; (80033cc <__errno+0x8>)
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000028 	.word	0x20000028

080033d0 <__libc_init_array>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	2600      	movs	r6, #0
 80033d4:	4d0c      	ldr	r5, [pc, #48]	; (8003408 <__libc_init_array+0x38>)
 80033d6:	4c0d      	ldr	r4, [pc, #52]	; (800340c <__libc_init_array+0x3c>)
 80033d8:	1b64      	subs	r4, r4, r5
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	42a6      	cmp	r6, r4
 80033de:	d109      	bne.n	80033f4 <__libc_init_array+0x24>
 80033e0:	f000 fc5c 	bl	8003c9c <_init>
 80033e4:	2600      	movs	r6, #0
 80033e6:	4d0a      	ldr	r5, [pc, #40]	; (8003410 <__libc_init_array+0x40>)
 80033e8:	4c0a      	ldr	r4, [pc, #40]	; (8003414 <__libc_init_array+0x44>)
 80033ea:	1b64      	subs	r4, r4, r5
 80033ec:	10a4      	asrs	r4, r4, #2
 80033ee:	42a6      	cmp	r6, r4
 80033f0:	d105      	bne.n	80033fe <__libc_init_array+0x2e>
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f8:	4798      	blx	r3
 80033fa:	3601      	adds	r6, #1
 80033fc:	e7ee      	b.n	80033dc <__libc_init_array+0xc>
 80033fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003402:	4798      	blx	r3
 8003404:	3601      	adds	r6, #1
 8003406:	e7f2      	b.n	80033ee <__libc_init_array+0x1e>
 8003408:	08003d14 	.word	0x08003d14
 800340c:	08003d14 	.word	0x08003d14
 8003410:	08003d14 	.word	0x08003d14
 8003414:	08003d18 	.word	0x08003d18

08003418 <memset>:
 8003418:	4603      	mov	r3, r0
 800341a:	4402      	add	r2, r0
 800341c:	4293      	cmp	r3, r2
 800341e:	d100      	bne.n	8003422 <memset+0xa>
 8003420:	4770      	bx	lr
 8003422:	f803 1b01 	strb.w	r1, [r3], #1
 8003426:	e7f9      	b.n	800341c <memset+0x4>

08003428 <siprintf>:
 8003428:	b40e      	push	{r1, r2, r3}
 800342a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800342e:	b500      	push	{lr}
 8003430:	b09c      	sub	sp, #112	; 0x70
 8003432:	ab1d      	add	r3, sp, #116	; 0x74
 8003434:	9002      	str	r0, [sp, #8]
 8003436:	9006      	str	r0, [sp, #24]
 8003438:	9107      	str	r1, [sp, #28]
 800343a:	9104      	str	r1, [sp, #16]
 800343c:	4808      	ldr	r0, [pc, #32]	; (8003460 <siprintf+0x38>)
 800343e:	4909      	ldr	r1, [pc, #36]	; (8003464 <siprintf+0x3c>)
 8003440:	f853 2b04 	ldr.w	r2, [r3], #4
 8003444:	9105      	str	r1, [sp, #20]
 8003446:	6800      	ldr	r0, [r0, #0]
 8003448:	a902      	add	r1, sp, #8
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	f000 f868 	bl	8003520 <_svfiprintf_r>
 8003450:	2200      	movs	r2, #0
 8003452:	9b02      	ldr	r3, [sp, #8]
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	b01c      	add	sp, #112	; 0x70
 8003458:	f85d eb04 	ldr.w	lr, [sp], #4
 800345c:	b003      	add	sp, #12
 800345e:	4770      	bx	lr
 8003460:	20000028 	.word	0x20000028
 8003464:	ffff0208 	.word	0xffff0208

08003468 <__ssputs_r>:
 8003468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800346c:	688e      	ldr	r6, [r1, #8]
 800346e:	4682      	mov	sl, r0
 8003470:	429e      	cmp	r6, r3
 8003472:	460c      	mov	r4, r1
 8003474:	4690      	mov	r8, r2
 8003476:	461f      	mov	r7, r3
 8003478:	d838      	bhi.n	80034ec <__ssputs_r+0x84>
 800347a:	898a      	ldrh	r2, [r1, #12]
 800347c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003480:	d032      	beq.n	80034e8 <__ssputs_r+0x80>
 8003482:	6825      	ldr	r5, [r4, #0]
 8003484:	6909      	ldr	r1, [r1, #16]
 8003486:	3301      	adds	r3, #1
 8003488:	eba5 0901 	sub.w	r9, r5, r1
 800348c:	6965      	ldr	r5, [r4, #20]
 800348e:	444b      	add	r3, r9
 8003490:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003494:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003498:	106d      	asrs	r5, r5, #1
 800349a:	429d      	cmp	r5, r3
 800349c:	bf38      	it	cc
 800349e:	461d      	movcc	r5, r3
 80034a0:	0553      	lsls	r3, r2, #21
 80034a2:	d531      	bpl.n	8003508 <__ssputs_r+0xa0>
 80034a4:	4629      	mov	r1, r5
 80034a6:	f000 fb53 	bl	8003b50 <_malloc_r>
 80034aa:	4606      	mov	r6, r0
 80034ac:	b950      	cbnz	r0, 80034c4 <__ssputs_r+0x5c>
 80034ae:	230c      	movs	r3, #12
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295
 80034b4:	f8ca 3000 	str.w	r3, [sl]
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034be:	81a3      	strh	r3, [r4, #12]
 80034c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c4:	464a      	mov	r2, r9
 80034c6:	6921      	ldr	r1, [r4, #16]
 80034c8:	f000 face 	bl	8003a68 <memcpy>
 80034cc:	89a3      	ldrh	r3, [r4, #12]
 80034ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80034d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d6:	81a3      	strh	r3, [r4, #12]
 80034d8:	6126      	str	r6, [r4, #16]
 80034da:	444e      	add	r6, r9
 80034dc:	6026      	str	r6, [r4, #0]
 80034de:	463e      	mov	r6, r7
 80034e0:	6165      	str	r5, [r4, #20]
 80034e2:	eba5 0509 	sub.w	r5, r5, r9
 80034e6:	60a5      	str	r5, [r4, #8]
 80034e8:	42be      	cmp	r6, r7
 80034ea:	d900      	bls.n	80034ee <__ssputs_r+0x86>
 80034ec:	463e      	mov	r6, r7
 80034ee:	4632      	mov	r2, r6
 80034f0:	4641      	mov	r1, r8
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	f000 fac6 	bl	8003a84 <memmove>
 80034f8:	68a3      	ldr	r3, [r4, #8]
 80034fa:	6822      	ldr	r2, [r4, #0]
 80034fc:	1b9b      	subs	r3, r3, r6
 80034fe:	4432      	add	r2, r6
 8003500:	2000      	movs	r0, #0
 8003502:	60a3      	str	r3, [r4, #8]
 8003504:	6022      	str	r2, [r4, #0]
 8003506:	e7db      	b.n	80034c0 <__ssputs_r+0x58>
 8003508:	462a      	mov	r2, r5
 800350a:	f000 fb7b 	bl	8003c04 <_realloc_r>
 800350e:	4606      	mov	r6, r0
 8003510:	2800      	cmp	r0, #0
 8003512:	d1e1      	bne.n	80034d8 <__ssputs_r+0x70>
 8003514:	4650      	mov	r0, sl
 8003516:	6921      	ldr	r1, [r4, #16]
 8003518:	f000 face 	bl	8003ab8 <_free_r>
 800351c:	e7c7      	b.n	80034ae <__ssputs_r+0x46>
	...

08003520 <_svfiprintf_r>:
 8003520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003524:	4698      	mov	r8, r3
 8003526:	898b      	ldrh	r3, [r1, #12]
 8003528:	4607      	mov	r7, r0
 800352a:	061b      	lsls	r3, r3, #24
 800352c:	460d      	mov	r5, r1
 800352e:	4614      	mov	r4, r2
 8003530:	b09d      	sub	sp, #116	; 0x74
 8003532:	d50e      	bpl.n	8003552 <_svfiprintf_r+0x32>
 8003534:	690b      	ldr	r3, [r1, #16]
 8003536:	b963      	cbnz	r3, 8003552 <_svfiprintf_r+0x32>
 8003538:	2140      	movs	r1, #64	; 0x40
 800353a:	f000 fb09 	bl	8003b50 <_malloc_r>
 800353e:	6028      	str	r0, [r5, #0]
 8003540:	6128      	str	r0, [r5, #16]
 8003542:	b920      	cbnz	r0, 800354e <_svfiprintf_r+0x2e>
 8003544:	230c      	movs	r3, #12
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	e0d1      	b.n	80036f2 <_svfiprintf_r+0x1d2>
 800354e:	2340      	movs	r3, #64	; 0x40
 8003550:	616b      	str	r3, [r5, #20]
 8003552:	2300      	movs	r3, #0
 8003554:	9309      	str	r3, [sp, #36]	; 0x24
 8003556:	2320      	movs	r3, #32
 8003558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800355c:	2330      	movs	r3, #48	; 0x30
 800355e:	f04f 0901 	mov.w	r9, #1
 8003562:	f8cd 800c 	str.w	r8, [sp, #12]
 8003566:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800370c <_svfiprintf_r+0x1ec>
 800356a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800356e:	4623      	mov	r3, r4
 8003570:	469a      	mov	sl, r3
 8003572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003576:	b10a      	cbz	r2, 800357c <_svfiprintf_r+0x5c>
 8003578:	2a25      	cmp	r2, #37	; 0x25
 800357a:	d1f9      	bne.n	8003570 <_svfiprintf_r+0x50>
 800357c:	ebba 0b04 	subs.w	fp, sl, r4
 8003580:	d00b      	beq.n	800359a <_svfiprintf_r+0x7a>
 8003582:	465b      	mov	r3, fp
 8003584:	4622      	mov	r2, r4
 8003586:	4629      	mov	r1, r5
 8003588:	4638      	mov	r0, r7
 800358a:	f7ff ff6d 	bl	8003468 <__ssputs_r>
 800358e:	3001      	adds	r0, #1
 8003590:	f000 80aa 	beq.w	80036e8 <_svfiprintf_r+0x1c8>
 8003594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003596:	445a      	add	r2, fp
 8003598:	9209      	str	r2, [sp, #36]	; 0x24
 800359a:	f89a 3000 	ldrb.w	r3, [sl]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f000 80a2 	beq.w	80036e8 <_svfiprintf_r+0x1c8>
 80035a4:	2300      	movs	r3, #0
 80035a6:	f04f 32ff 	mov.w	r2, #4294967295
 80035aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035ae:	f10a 0a01 	add.w	sl, sl, #1
 80035b2:	9304      	str	r3, [sp, #16]
 80035b4:	9307      	str	r3, [sp, #28]
 80035b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035ba:	931a      	str	r3, [sp, #104]	; 0x68
 80035bc:	4654      	mov	r4, sl
 80035be:	2205      	movs	r2, #5
 80035c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035c4:	4851      	ldr	r0, [pc, #324]	; (800370c <_svfiprintf_r+0x1ec>)
 80035c6:	f000 fa41 	bl	8003a4c <memchr>
 80035ca:	9a04      	ldr	r2, [sp, #16]
 80035cc:	b9d8      	cbnz	r0, 8003606 <_svfiprintf_r+0xe6>
 80035ce:	06d0      	lsls	r0, r2, #27
 80035d0:	bf44      	itt	mi
 80035d2:	2320      	movmi	r3, #32
 80035d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035d8:	0711      	lsls	r1, r2, #28
 80035da:	bf44      	itt	mi
 80035dc:	232b      	movmi	r3, #43	; 0x2b
 80035de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035e2:	f89a 3000 	ldrb.w	r3, [sl]
 80035e6:	2b2a      	cmp	r3, #42	; 0x2a
 80035e8:	d015      	beq.n	8003616 <_svfiprintf_r+0xf6>
 80035ea:	4654      	mov	r4, sl
 80035ec:	2000      	movs	r0, #0
 80035ee:	f04f 0c0a 	mov.w	ip, #10
 80035f2:	9a07      	ldr	r2, [sp, #28]
 80035f4:	4621      	mov	r1, r4
 80035f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035fa:	3b30      	subs	r3, #48	; 0x30
 80035fc:	2b09      	cmp	r3, #9
 80035fe:	d94e      	bls.n	800369e <_svfiprintf_r+0x17e>
 8003600:	b1b0      	cbz	r0, 8003630 <_svfiprintf_r+0x110>
 8003602:	9207      	str	r2, [sp, #28]
 8003604:	e014      	b.n	8003630 <_svfiprintf_r+0x110>
 8003606:	eba0 0308 	sub.w	r3, r0, r8
 800360a:	fa09 f303 	lsl.w	r3, r9, r3
 800360e:	4313      	orrs	r3, r2
 8003610:	46a2      	mov	sl, r4
 8003612:	9304      	str	r3, [sp, #16]
 8003614:	e7d2      	b.n	80035bc <_svfiprintf_r+0x9c>
 8003616:	9b03      	ldr	r3, [sp, #12]
 8003618:	1d19      	adds	r1, r3, #4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	9103      	str	r1, [sp, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	bfbb      	ittet	lt
 8003622:	425b      	neglt	r3, r3
 8003624:	f042 0202 	orrlt.w	r2, r2, #2
 8003628:	9307      	strge	r3, [sp, #28]
 800362a:	9307      	strlt	r3, [sp, #28]
 800362c:	bfb8      	it	lt
 800362e:	9204      	strlt	r2, [sp, #16]
 8003630:	7823      	ldrb	r3, [r4, #0]
 8003632:	2b2e      	cmp	r3, #46	; 0x2e
 8003634:	d10c      	bne.n	8003650 <_svfiprintf_r+0x130>
 8003636:	7863      	ldrb	r3, [r4, #1]
 8003638:	2b2a      	cmp	r3, #42	; 0x2a
 800363a:	d135      	bne.n	80036a8 <_svfiprintf_r+0x188>
 800363c:	9b03      	ldr	r3, [sp, #12]
 800363e:	3402      	adds	r4, #2
 8003640:	1d1a      	adds	r2, r3, #4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	9203      	str	r2, [sp, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	bfb8      	it	lt
 800364a:	f04f 33ff 	movlt.w	r3, #4294967295
 800364e:	9305      	str	r3, [sp, #20]
 8003650:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800371c <_svfiprintf_r+0x1fc>
 8003654:	2203      	movs	r2, #3
 8003656:	4650      	mov	r0, sl
 8003658:	7821      	ldrb	r1, [r4, #0]
 800365a:	f000 f9f7 	bl	8003a4c <memchr>
 800365e:	b140      	cbz	r0, 8003672 <_svfiprintf_r+0x152>
 8003660:	2340      	movs	r3, #64	; 0x40
 8003662:	eba0 000a 	sub.w	r0, r0, sl
 8003666:	fa03 f000 	lsl.w	r0, r3, r0
 800366a:	9b04      	ldr	r3, [sp, #16]
 800366c:	3401      	adds	r4, #1
 800366e:	4303      	orrs	r3, r0
 8003670:	9304      	str	r3, [sp, #16]
 8003672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003676:	2206      	movs	r2, #6
 8003678:	4825      	ldr	r0, [pc, #148]	; (8003710 <_svfiprintf_r+0x1f0>)
 800367a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800367e:	f000 f9e5 	bl	8003a4c <memchr>
 8003682:	2800      	cmp	r0, #0
 8003684:	d038      	beq.n	80036f8 <_svfiprintf_r+0x1d8>
 8003686:	4b23      	ldr	r3, [pc, #140]	; (8003714 <_svfiprintf_r+0x1f4>)
 8003688:	bb1b      	cbnz	r3, 80036d2 <_svfiprintf_r+0x1b2>
 800368a:	9b03      	ldr	r3, [sp, #12]
 800368c:	3307      	adds	r3, #7
 800368e:	f023 0307 	bic.w	r3, r3, #7
 8003692:	3308      	adds	r3, #8
 8003694:	9303      	str	r3, [sp, #12]
 8003696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003698:	4433      	add	r3, r6
 800369a:	9309      	str	r3, [sp, #36]	; 0x24
 800369c:	e767      	b.n	800356e <_svfiprintf_r+0x4e>
 800369e:	460c      	mov	r4, r1
 80036a0:	2001      	movs	r0, #1
 80036a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80036a6:	e7a5      	b.n	80035f4 <_svfiprintf_r+0xd4>
 80036a8:	2300      	movs	r3, #0
 80036aa:	f04f 0c0a 	mov.w	ip, #10
 80036ae:	4619      	mov	r1, r3
 80036b0:	3401      	adds	r4, #1
 80036b2:	9305      	str	r3, [sp, #20]
 80036b4:	4620      	mov	r0, r4
 80036b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036ba:	3a30      	subs	r2, #48	; 0x30
 80036bc:	2a09      	cmp	r2, #9
 80036be:	d903      	bls.n	80036c8 <_svfiprintf_r+0x1a8>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0c5      	beq.n	8003650 <_svfiprintf_r+0x130>
 80036c4:	9105      	str	r1, [sp, #20]
 80036c6:	e7c3      	b.n	8003650 <_svfiprintf_r+0x130>
 80036c8:	4604      	mov	r4, r0
 80036ca:	2301      	movs	r3, #1
 80036cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80036d0:	e7f0      	b.n	80036b4 <_svfiprintf_r+0x194>
 80036d2:	ab03      	add	r3, sp, #12
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	462a      	mov	r2, r5
 80036d8:	4638      	mov	r0, r7
 80036da:	4b0f      	ldr	r3, [pc, #60]	; (8003718 <_svfiprintf_r+0x1f8>)
 80036dc:	a904      	add	r1, sp, #16
 80036de:	f3af 8000 	nop.w
 80036e2:	1c42      	adds	r2, r0, #1
 80036e4:	4606      	mov	r6, r0
 80036e6:	d1d6      	bne.n	8003696 <_svfiprintf_r+0x176>
 80036e8:	89ab      	ldrh	r3, [r5, #12]
 80036ea:	065b      	lsls	r3, r3, #25
 80036ec:	f53f af2c 	bmi.w	8003548 <_svfiprintf_r+0x28>
 80036f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036f2:	b01d      	add	sp, #116	; 0x74
 80036f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f8:	ab03      	add	r3, sp, #12
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	462a      	mov	r2, r5
 80036fe:	4638      	mov	r0, r7
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <_svfiprintf_r+0x1f8>)
 8003702:	a904      	add	r1, sp, #16
 8003704:	f000 f87c 	bl	8003800 <_printf_i>
 8003708:	e7eb      	b.n	80036e2 <_svfiprintf_r+0x1c2>
 800370a:	bf00      	nop
 800370c:	08003ce0 	.word	0x08003ce0
 8003710:	08003cea 	.word	0x08003cea
 8003714:	00000000 	.word	0x00000000
 8003718:	08003469 	.word	0x08003469
 800371c:	08003ce6 	.word	0x08003ce6

08003720 <_printf_common>:
 8003720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003724:	4616      	mov	r6, r2
 8003726:	4699      	mov	r9, r3
 8003728:	688a      	ldr	r2, [r1, #8]
 800372a:	690b      	ldr	r3, [r1, #16]
 800372c:	4607      	mov	r7, r0
 800372e:	4293      	cmp	r3, r2
 8003730:	bfb8      	it	lt
 8003732:	4613      	movlt	r3, r2
 8003734:	6033      	str	r3, [r6, #0]
 8003736:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800373a:	460c      	mov	r4, r1
 800373c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003740:	b10a      	cbz	r2, 8003746 <_printf_common+0x26>
 8003742:	3301      	adds	r3, #1
 8003744:	6033      	str	r3, [r6, #0]
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	0699      	lsls	r1, r3, #26
 800374a:	bf42      	ittt	mi
 800374c:	6833      	ldrmi	r3, [r6, #0]
 800374e:	3302      	addmi	r3, #2
 8003750:	6033      	strmi	r3, [r6, #0]
 8003752:	6825      	ldr	r5, [r4, #0]
 8003754:	f015 0506 	ands.w	r5, r5, #6
 8003758:	d106      	bne.n	8003768 <_printf_common+0x48>
 800375a:	f104 0a19 	add.w	sl, r4, #25
 800375e:	68e3      	ldr	r3, [r4, #12]
 8003760:	6832      	ldr	r2, [r6, #0]
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	42ab      	cmp	r3, r5
 8003766:	dc28      	bgt.n	80037ba <_printf_common+0x9a>
 8003768:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800376c:	1e13      	subs	r3, r2, #0
 800376e:	6822      	ldr	r2, [r4, #0]
 8003770:	bf18      	it	ne
 8003772:	2301      	movne	r3, #1
 8003774:	0692      	lsls	r2, r2, #26
 8003776:	d42d      	bmi.n	80037d4 <_printf_common+0xb4>
 8003778:	4649      	mov	r1, r9
 800377a:	4638      	mov	r0, r7
 800377c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003780:	47c0      	blx	r8
 8003782:	3001      	adds	r0, #1
 8003784:	d020      	beq.n	80037c8 <_printf_common+0xa8>
 8003786:	6823      	ldr	r3, [r4, #0]
 8003788:	68e5      	ldr	r5, [r4, #12]
 800378a:	f003 0306 	and.w	r3, r3, #6
 800378e:	2b04      	cmp	r3, #4
 8003790:	bf18      	it	ne
 8003792:	2500      	movne	r5, #0
 8003794:	6832      	ldr	r2, [r6, #0]
 8003796:	f04f 0600 	mov.w	r6, #0
 800379a:	68a3      	ldr	r3, [r4, #8]
 800379c:	bf08      	it	eq
 800379e:	1aad      	subeq	r5, r5, r2
 80037a0:	6922      	ldr	r2, [r4, #16]
 80037a2:	bf08      	it	eq
 80037a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037a8:	4293      	cmp	r3, r2
 80037aa:	bfc4      	itt	gt
 80037ac:	1a9b      	subgt	r3, r3, r2
 80037ae:	18ed      	addgt	r5, r5, r3
 80037b0:	341a      	adds	r4, #26
 80037b2:	42b5      	cmp	r5, r6
 80037b4:	d11a      	bne.n	80037ec <_printf_common+0xcc>
 80037b6:	2000      	movs	r0, #0
 80037b8:	e008      	b.n	80037cc <_printf_common+0xac>
 80037ba:	2301      	movs	r3, #1
 80037bc:	4652      	mov	r2, sl
 80037be:	4649      	mov	r1, r9
 80037c0:	4638      	mov	r0, r7
 80037c2:	47c0      	blx	r8
 80037c4:	3001      	adds	r0, #1
 80037c6:	d103      	bne.n	80037d0 <_printf_common+0xb0>
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295
 80037cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037d0:	3501      	adds	r5, #1
 80037d2:	e7c4      	b.n	800375e <_printf_common+0x3e>
 80037d4:	2030      	movs	r0, #48	; 0x30
 80037d6:	18e1      	adds	r1, r4, r3
 80037d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037e2:	4422      	add	r2, r4
 80037e4:	3302      	adds	r3, #2
 80037e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037ea:	e7c5      	b.n	8003778 <_printf_common+0x58>
 80037ec:	2301      	movs	r3, #1
 80037ee:	4622      	mov	r2, r4
 80037f0:	4649      	mov	r1, r9
 80037f2:	4638      	mov	r0, r7
 80037f4:	47c0      	blx	r8
 80037f6:	3001      	adds	r0, #1
 80037f8:	d0e6      	beq.n	80037c8 <_printf_common+0xa8>
 80037fa:	3601      	adds	r6, #1
 80037fc:	e7d9      	b.n	80037b2 <_printf_common+0x92>
	...

08003800 <_printf_i>:
 8003800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003804:	460c      	mov	r4, r1
 8003806:	7e27      	ldrb	r7, [r4, #24]
 8003808:	4691      	mov	r9, r2
 800380a:	2f78      	cmp	r7, #120	; 0x78
 800380c:	4680      	mov	r8, r0
 800380e:	469a      	mov	sl, r3
 8003810:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003816:	d807      	bhi.n	8003828 <_printf_i+0x28>
 8003818:	2f62      	cmp	r7, #98	; 0x62
 800381a:	d80a      	bhi.n	8003832 <_printf_i+0x32>
 800381c:	2f00      	cmp	r7, #0
 800381e:	f000 80d9 	beq.w	80039d4 <_printf_i+0x1d4>
 8003822:	2f58      	cmp	r7, #88	; 0x58
 8003824:	f000 80a4 	beq.w	8003970 <_printf_i+0x170>
 8003828:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800382c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003830:	e03a      	b.n	80038a8 <_printf_i+0xa8>
 8003832:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003836:	2b15      	cmp	r3, #21
 8003838:	d8f6      	bhi.n	8003828 <_printf_i+0x28>
 800383a:	a001      	add	r0, pc, #4	; (adr r0, 8003840 <_printf_i+0x40>)
 800383c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003840:	08003899 	.word	0x08003899
 8003844:	080038ad 	.word	0x080038ad
 8003848:	08003829 	.word	0x08003829
 800384c:	08003829 	.word	0x08003829
 8003850:	08003829 	.word	0x08003829
 8003854:	08003829 	.word	0x08003829
 8003858:	080038ad 	.word	0x080038ad
 800385c:	08003829 	.word	0x08003829
 8003860:	08003829 	.word	0x08003829
 8003864:	08003829 	.word	0x08003829
 8003868:	08003829 	.word	0x08003829
 800386c:	080039bb 	.word	0x080039bb
 8003870:	080038dd 	.word	0x080038dd
 8003874:	0800399d 	.word	0x0800399d
 8003878:	08003829 	.word	0x08003829
 800387c:	08003829 	.word	0x08003829
 8003880:	080039dd 	.word	0x080039dd
 8003884:	08003829 	.word	0x08003829
 8003888:	080038dd 	.word	0x080038dd
 800388c:	08003829 	.word	0x08003829
 8003890:	08003829 	.word	0x08003829
 8003894:	080039a5 	.word	0x080039a5
 8003898:	680b      	ldr	r3, [r1, #0]
 800389a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800389e:	1d1a      	adds	r2, r3, #4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	600a      	str	r2, [r1, #0]
 80038a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0a4      	b.n	80039f6 <_printf_i+0x1f6>
 80038ac:	6825      	ldr	r5, [r4, #0]
 80038ae:	6808      	ldr	r0, [r1, #0]
 80038b0:	062e      	lsls	r6, r5, #24
 80038b2:	f100 0304 	add.w	r3, r0, #4
 80038b6:	d50a      	bpl.n	80038ce <_printf_i+0xce>
 80038b8:	6805      	ldr	r5, [r0, #0]
 80038ba:	600b      	str	r3, [r1, #0]
 80038bc:	2d00      	cmp	r5, #0
 80038be:	da03      	bge.n	80038c8 <_printf_i+0xc8>
 80038c0:	232d      	movs	r3, #45	; 0x2d
 80038c2:	426d      	negs	r5, r5
 80038c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038c8:	230a      	movs	r3, #10
 80038ca:	485e      	ldr	r0, [pc, #376]	; (8003a44 <_printf_i+0x244>)
 80038cc:	e019      	b.n	8003902 <_printf_i+0x102>
 80038ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80038d2:	6805      	ldr	r5, [r0, #0]
 80038d4:	600b      	str	r3, [r1, #0]
 80038d6:	bf18      	it	ne
 80038d8:	b22d      	sxthne	r5, r5
 80038da:	e7ef      	b.n	80038bc <_printf_i+0xbc>
 80038dc:	680b      	ldr	r3, [r1, #0]
 80038de:	6825      	ldr	r5, [r4, #0]
 80038e0:	1d18      	adds	r0, r3, #4
 80038e2:	6008      	str	r0, [r1, #0]
 80038e4:	0628      	lsls	r0, r5, #24
 80038e6:	d501      	bpl.n	80038ec <_printf_i+0xec>
 80038e8:	681d      	ldr	r5, [r3, #0]
 80038ea:	e002      	b.n	80038f2 <_printf_i+0xf2>
 80038ec:	0669      	lsls	r1, r5, #25
 80038ee:	d5fb      	bpl.n	80038e8 <_printf_i+0xe8>
 80038f0:	881d      	ldrh	r5, [r3, #0]
 80038f2:	2f6f      	cmp	r7, #111	; 0x6f
 80038f4:	bf0c      	ite	eq
 80038f6:	2308      	moveq	r3, #8
 80038f8:	230a      	movne	r3, #10
 80038fa:	4852      	ldr	r0, [pc, #328]	; (8003a44 <_printf_i+0x244>)
 80038fc:	2100      	movs	r1, #0
 80038fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003902:	6866      	ldr	r6, [r4, #4]
 8003904:	2e00      	cmp	r6, #0
 8003906:	bfa8      	it	ge
 8003908:	6821      	ldrge	r1, [r4, #0]
 800390a:	60a6      	str	r6, [r4, #8]
 800390c:	bfa4      	itt	ge
 800390e:	f021 0104 	bicge.w	r1, r1, #4
 8003912:	6021      	strge	r1, [r4, #0]
 8003914:	b90d      	cbnz	r5, 800391a <_printf_i+0x11a>
 8003916:	2e00      	cmp	r6, #0
 8003918:	d04d      	beq.n	80039b6 <_printf_i+0x1b6>
 800391a:	4616      	mov	r6, r2
 800391c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003920:	fb03 5711 	mls	r7, r3, r1, r5
 8003924:	5dc7      	ldrb	r7, [r0, r7]
 8003926:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800392a:	462f      	mov	r7, r5
 800392c:	42bb      	cmp	r3, r7
 800392e:	460d      	mov	r5, r1
 8003930:	d9f4      	bls.n	800391c <_printf_i+0x11c>
 8003932:	2b08      	cmp	r3, #8
 8003934:	d10b      	bne.n	800394e <_printf_i+0x14e>
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	07df      	lsls	r7, r3, #31
 800393a:	d508      	bpl.n	800394e <_printf_i+0x14e>
 800393c:	6923      	ldr	r3, [r4, #16]
 800393e:	6861      	ldr	r1, [r4, #4]
 8003940:	4299      	cmp	r1, r3
 8003942:	bfde      	ittt	le
 8003944:	2330      	movle	r3, #48	; 0x30
 8003946:	f806 3c01 	strble.w	r3, [r6, #-1]
 800394a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800394e:	1b92      	subs	r2, r2, r6
 8003950:	6122      	str	r2, [r4, #16]
 8003952:	464b      	mov	r3, r9
 8003954:	4621      	mov	r1, r4
 8003956:	4640      	mov	r0, r8
 8003958:	f8cd a000 	str.w	sl, [sp]
 800395c:	aa03      	add	r2, sp, #12
 800395e:	f7ff fedf 	bl	8003720 <_printf_common>
 8003962:	3001      	adds	r0, #1
 8003964:	d14c      	bne.n	8003a00 <_printf_i+0x200>
 8003966:	f04f 30ff 	mov.w	r0, #4294967295
 800396a:	b004      	add	sp, #16
 800396c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003970:	4834      	ldr	r0, [pc, #208]	; (8003a44 <_printf_i+0x244>)
 8003972:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003976:	680e      	ldr	r6, [r1, #0]
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	f856 5b04 	ldr.w	r5, [r6], #4
 800397e:	061f      	lsls	r7, r3, #24
 8003980:	600e      	str	r6, [r1, #0]
 8003982:	d514      	bpl.n	80039ae <_printf_i+0x1ae>
 8003984:	07d9      	lsls	r1, r3, #31
 8003986:	bf44      	itt	mi
 8003988:	f043 0320 	orrmi.w	r3, r3, #32
 800398c:	6023      	strmi	r3, [r4, #0]
 800398e:	b91d      	cbnz	r5, 8003998 <_printf_i+0x198>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	f023 0320 	bic.w	r3, r3, #32
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	2310      	movs	r3, #16
 800399a:	e7af      	b.n	80038fc <_printf_i+0xfc>
 800399c:	6823      	ldr	r3, [r4, #0]
 800399e:	f043 0320 	orr.w	r3, r3, #32
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	2378      	movs	r3, #120	; 0x78
 80039a6:	4828      	ldr	r0, [pc, #160]	; (8003a48 <_printf_i+0x248>)
 80039a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039ac:	e7e3      	b.n	8003976 <_printf_i+0x176>
 80039ae:	065e      	lsls	r6, r3, #25
 80039b0:	bf48      	it	mi
 80039b2:	b2ad      	uxthmi	r5, r5
 80039b4:	e7e6      	b.n	8003984 <_printf_i+0x184>
 80039b6:	4616      	mov	r6, r2
 80039b8:	e7bb      	b.n	8003932 <_printf_i+0x132>
 80039ba:	680b      	ldr	r3, [r1, #0]
 80039bc:	6826      	ldr	r6, [r4, #0]
 80039be:	1d1d      	adds	r5, r3, #4
 80039c0:	6960      	ldr	r0, [r4, #20]
 80039c2:	600d      	str	r5, [r1, #0]
 80039c4:	0635      	lsls	r5, r6, #24
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	d501      	bpl.n	80039ce <_printf_i+0x1ce>
 80039ca:	6018      	str	r0, [r3, #0]
 80039cc:	e002      	b.n	80039d4 <_printf_i+0x1d4>
 80039ce:	0671      	lsls	r1, r6, #25
 80039d0:	d5fb      	bpl.n	80039ca <_printf_i+0x1ca>
 80039d2:	8018      	strh	r0, [r3, #0]
 80039d4:	2300      	movs	r3, #0
 80039d6:	4616      	mov	r6, r2
 80039d8:	6123      	str	r3, [r4, #16]
 80039da:	e7ba      	b.n	8003952 <_printf_i+0x152>
 80039dc:	680b      	ldr	r3, [r1, #0]
 80039de:	1d1a      	adds	r2, r3, #4
 80039e0:	600a      	str	r2, [r1, #0]
 80039e2:	681e      	ldr	r6, [r3, #0]
 80039e4:	2100      	movs	r1, #0
 80039e6:	4630      	mov	r0, r6
 80039e8:	6862      	ldr	r2, [r4, #4]
 80039ea:	f000 f82f 	bl	8003a4c <memchr>
 80039ee:	b108      	cbz	r0, 80039f4 <_printf_i+0x1f4>
 80039f0:	1b80      	subs	r0, r0, r6
 80039f2:	6060      	str	r0, [r4, #4]
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	6123      	str	r3, [r4, #16]
 80039f8:	2300      	movs	r3, #0
 80039fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039fe:	e7a8      	b.n	8003952 <_printf_i+0x152>
 8003a00:	4632      	mov	r2, r6
 8003a02:	4649      	mov	r1, r9
 8003a04:	4640      	mov	r0, r8
 8003a06:	6923      	ldr	r3, [r4, #16]
 8003a08:	47d0      	blx	sl
 8003a0a:	3001      	adds	r0, #1
 8003a0c:	d0ab      	beq.n	8003966 <_printf_i+0x166>
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	079b      	lsls	r3, r3, #30
 8003a12:	d413      	bmi.n	8003a3c <_printf_i+0x23c>
 8003a14:	68e0      	ldr	r0, [r4, #12]
 8003a16:	9b03      	ldr	r3, [sp, #12]
 8003a18:	4298      	cmp	r0, r3
 8003a1a:	bfb8      	it	lt
 8003a1c:	4618      	movlt	r0, r3
 8003a1e:	e7a4      	b.n	800396a <_printf_i+0x16a>
 8003a20:	2301      	movs	r3, #1
 8003a22:	4632      	mov	r2, r6
 8003a24:	4649      	mov	r1, r9
 8003a26:	4640      	mov	r0, r8
 8003a28:	47d0      	blx	sl
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d09b      	beq.n	8003966 <_printf_i+0x166>
 8003a2e:	3501      	adds	r5, #1
 8003a30:	68e3      	ldr	r3, [r4, #12]
 8003a32:	9903      	ldr	r1, [sp, #12]
 8003a34:	1a5b      	subs	r3, r3, r1
 8003a36:	42ab      	cmp	r3, r5
 8003a38:	dcf2      	bgt.n	8003a20 <_printf_i+0x220>
 8003a3a:	e7eb      	b.n	8003a14 <_printf_i+0x214>
 8003a3c:	2500      	movs	r5, #0
 8003a3e:	f104 0619 	add.w	r6, r4, #25
 8003a42:	e7f5      	b.n	8003a30 <_printf_i+0x230>
 8003a44:	08003cf1 	.word	0x08003cf1
 8003a48:	08003d02 	.word	0x08003d02

08003a4c <memchr>:
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	b510      	push	{r4, lr}
 8003a50:	b2c9      	uxtb	r1, r1
 8003a52:	4402      	add	r2, r0
 8003a54:	4293      	cmp	r3, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	d101      	bne.n	8003a5e <memchr+0x12>
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	e003      	b.n	8003a66 <memchr+0x1a>
 8003a5e:	7804      	ldrb	r4, [r0, #0]
 8003a60:	3301      	adds	r3, #1
 8003a62:	428c      	cmp	r4, r1
 8003a64:	d1f6      	bne.n	8003a54 <memchr+0x8>
 8003a66:	bd10      	pop	{r4, pc}

08003a68 <memcpy>:
 8003a68:	440a      	add	r2, r1
 8003a6a:	4291      	cmp	r1, r2
 8003a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a70:	d100      	bne.n	8003a74 <memcpy+0xc>
 8003a72:	4770      	bx	lr
 8003a74:	b510      	push	{r4, lr}
 8003a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a7a:	4291      	cmp	r1, r2
 8003a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a80:	d1f9      	bne.n	8003a76 <memcpy+0xe>
 8003a82:	bd10      	pop	{r4, pc}

08003a84 <memmove>:
 8003a84:	4288      	cmp	r0, r1
 8003a86:	b510      	push	{r4, lr}
 8003a88:	eb01 0402 	add.w	r4, r1, r2
 8003a8c:	d902      	bls.n	8003a94 <memmove+0x10>
 8003a8e:	4284      	cmp	r4, r0
 8003a90:	4623      	mov	r3, r4
 8003a92:	d807      	bhi.n	8003aa4 <memmove+0x20>
 8003a94:	1e43      	subs	r3, r0, #1
 8003a96:	42a1      	cmp	r1, r4
 8003a98:	d008      	beq.n	8003aac <memmove+0x28>
 8003a9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003aa2:	e7f8      	b.n	8003a96 <memmove+0x12>
 8003aa4:	4601      	mov	r1, r0
 8003aa6:	4402      	add	r2, r0
 8003aa8:	428a      	cmp	r2, r1
 8003aaa:	d100      	bne.n	8003aae <memmove+0x2a>
 8003aac:	bd10      	pop	{r4, pc}
 8003aae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ab6:	e7f7      	b.n	8003aa8 <memmove+0x24>

08003ab8 <_free_r>:
 8003ab8:	b538      	push	{r3, r4, r5, lr}
 8003aba:	4605      	mov	r5, r0
 8003abc:	2900      	cmp	r1, #0
 8003abe:	d043      	beq.n	8003b48 <_free_r+0x90>
 8003ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac4:	1f0c      	subs	r4, r1, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bfb8      	it	lt
 8003aca:	18e4      	addlt	r4, r4, r3
 8003acc:	f000 f8d0 	bl	8003c70 <__malloc_lock>
 8003ad0:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <_free_r+0x94>)
 8003ad2:	6813      	ldr	r3, [r2, #0]
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	b933      	cbnz	r3, 8003ae6 <_free_r+0x2e>
 8003ad8:	6063      	str	r3, [r4, #4]
 8003ada:	6014      	str	r4, [r2, #0]
 8003adc:	4628      	mov	r0, r5
 8003ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ae2:	f000 b8cb 	b.w	8003c7c <__malloc_unlock>
 8003ae6:	42a3      	cmp	r3, r4
 8003ae8:	d90a      	bls.n	8003b00 <_free_r+0x48>
 8003aea:	6821      	ldr	r1, [r4, #0]
 8003aec:	1862      	adds	r2, r4, r1
 8003aee:	4293      	cmp	r3, r2
 8003af0:	bf01      	itttt	eq
 8003af2:	681a      	ldreq	r2, [r3, #0]
 8003af4:	685b      	ldreq	r3, [r3, #4]
 8003af6:	1852      	addeq	r2, r2, r1
 8003af8:	6022      	streq	r2, [r4, #0]
 8003afa:	6063      	str	r3, [r4, #4]
 8003afc:	6004      	str	r4, [r0, #0]
 8003afe:	e7ed      	b.n	8003adc <_free_r+0x24>
 8003b00:	461a      	mov	r2, r3
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	b10b      	cbz	r3, 8003b0a <_free_r+0x52>
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	d9fa      	bls.n	8003b00 <_free_r+0x48>
 8003b0a:	6811      	ldr	r1, [r2, #0]
 8003b0c:	1850      	adds	r0, r2, r1
 8003b0e:	42a0      	cmp	r0, r4
 8003b10:	d10b      	bne.n	8003b2a <_free_r+0x72>
 8003b12:	6820      	ldr	r0, [r4, #0]
 8003b14:	4401      	add	r1, r0
 8003b16:	1850      	adds	r0, r2, r1
 8003b18:	4283      	cmp	r3, r0
 8003b1a:	6011      	str	r1, [r2, #0]
 8003b1c:	d1de      	bne.n	8003adc <_free_r+0x24>
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4401      	add	r1, r0
 8003b24:	6011      	str	r1, [r2, #0]
 8003b26:	6053      	str	r3, [r2, #4]
 8003b28:	e7d8      	b.n	8003adc <_free_r+0x24>
 8003b2a:	d902      	bls.n	8003b32 <_free_r+0x7a>
 8003b2c:	230c      	movs	r3, #12
 8003b2e:	602b      	str	r3, [r5, #0]
 8003b30:	e7d4      	b.n	8003adc <_free_r+0x24>
 8003b32:	6820      	ldr	r0, [r4, #0]
 8003b34:	1821      	adds	r1, r4, r0
 8003b36:	428b      	cmp	r3, r1
 8003b38:	bf01      	itttt	eq
 8003b3a:	6819      	ldreq	r1, [r3, #0]
 8003b3c:	685b      	ldreq	r3, [r3, #4]
 8003b3e:	1809      	addeq	r1, r1, r0
 8003b40:	6021      	streq	r1, [r4, #0]
 8003b42:	6063      	str	r3, [r4, #4]
 8003b44:	6054      	str	r4, [r2, #4]
 8003b46:	e7c9      	b.n	8003adc <_free_r+0x24>
 8003b48:	bd38      	pop	{r3, r4, r5, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200000e0 	.word	0x200000e0

08003b50 <_malloc_r>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	1ccd      	adds	r5, r1, #3
 8003b54:	f025 0503 	bic.w	r5, r5, #3
 8003b58:	3508      	adds	r5, #8
 8003b5a:	2d0c      	cmp	r5, #12
 8003b5c:	bf38      	it	cc
 8003b5e:	250c      	movcc	r5, #12
 8003b60:	2d00      	cmp	r5, #0
 8003b62:	4606      	mov	r6, r0
 8003b64:	db01      	blt.n	8003b6a <_malloc_r+0x1a>
 8003b66:	42a9      	cmp	r1, r5
 8003b68:	d903      	bls.n	8003b72 <_malloc_r+0x22>
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	6033      	str	r3, [r6, #0]
 8003b6e:	2000      	movs	r0, #0
 8003b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b72:	f000 f87d 	bl	8003c70 <__malloc_lock>
 8003b76:	4921      	ldr	r1, [pc, #132]	; (8003bfc <_malloc_r+0xac>)
 8003b78:	680a      	ldr	r2, [r1, #0]
 8003b7a:	4614      	mov	r4, r2
 8003b7c:	b99c      	cbnz	r4, 8003ba6 <_malloc_r+0x56>
 8003b7e:	4f20      	ldr	r7, [pc, #128]	; (8003c00 <_malloc_r+0xb0>)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	b923      	cbnz	r3, 8003b8e <_malloc_r+0x3e>
 8003b84:	4621      	mov	r1, r4
 8003b86:	4630      	mov	r0, r6
 8003b88:	f000 f862 	bl	8003c50 <_sbrk_r>
 8003b8c:	6038      	str	r0, [r7, #0]
 8003b8e:	4629      	mov	r1, r5
 8003b90:	4630      	mov	r0, r6
 8003b92:	f000 f85d 	bl	8003c50 <_sbrk_r>
 8003b96:	1c43      	adds	r3, r0, #1
 8003b98:	d123      	bne.n	8003be2 <_malloc_r+0x92>
 8003b9a:	230c      	movs	r3, #12
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	6033      	str	r3, [r6, #0]
 8003ba0:	f000 f86c 	bl	8003c7c <__malloc_unlock>
 8003ba4:	e7e3      	b.n	8003b6e <_malloc_r+0x1e>
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	1b5b      	subs	r3, r3, r5
 8003baa:	d417      	bmi.n	8003bdc <_malloc_r+0x8c>
 8003bac:	2b0b      	cmp	r3, #11
 8003bae:	d903      	bls.n	8003bb8 <_malloc_r+0x68>
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	441c      	add	r4, r3
 8003bb4:	6025      	str	r5, [r4, #0]
 8003bb6:	e004      	b.n	8003bc2 <_malloc_r+0x72>
 8003bb8:	6863      	ldr	r3, [r4, #4]
 8003bba:	42a2      	cmp	r2, r4
 8003bbc:	bf0c      	ite	eq
 8003bbe:	600b      	streq	r3, [r1, #0]
 8003bc0:	6053      	strne	r3, [r2, #4]
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f000 f85a 	bl	8003c7c <__malloc_unlock>
 8003bc8:	f104 000b 	add.w	r0, r4, #11
 8003bcc:	1d23      	adds	r3, r4, #4
 8003bce:	f020 0007 	bic.w	r0, r0, #7
 8003bd2:	1ac2      	subs	r2, r0, r3
 8003bd4:	d0cc      	beq.n	8003b70 <_malloc_r+0x20>
 8003bd6:	1a1b      	subs	r3, r3, r0
 8003bd8:	50a3      	str	r3, [r4, r2]
 8003bda:	e7c9      	b.n	8003b70 <_malloc_r+0x20>
 8003bdc:	4622      	mov	r2, r4
 8003bde:	6864      	ldr	r4, [r4, #4]
 8003be0:	e7cc      	b.n	8003b7c <_malloc_r+0x2c>
 8003be2:	1cc4      	adds	r4, r0, #3
 8003be4:	f024 0403 	bic.w	r4, r4, #3
 8003be8:	42a0      	cmp	r0, r4
 8003bea:	d0e3      	beq.n	8003bb4 <_malloc_r+0x64>
 8003bec:	1a21      	subs	r1, r4, r0
 8003bee:	4630      	mov	r0, r6
 8003bf0:	f000 f82e 	bl	8003c50 <_sbrk_r>
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	d1dd      	bne.n	8003bb4 <_malloc_r+0x64>
 8003bf8:	e7cf      	b.n	8003b9a <_malloc_r+0x4a>
 8003bfa:	bf00      	nop
 8003bfc:	200000e0 	.word	0x200000e0
 8003c00:	200000e4 	.word	0x200000e4

08003c04 <_realloc_r>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	4607      	mov	r7, r0
 8003c08:	4614      	mov	r4, r2
 8003c0a:	460e      	mov	r6, r1
 8003c0c:	b921      	cbnz	r1, 8003c18 <_realloc_r+0x14>
 8003c0e:	4611      	mov	r1, r2
 8003c10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c14:	f7ff bf9c 	b.w	8003b50 <_malloc_r>
 8003c18:	b922      	cbnz	r2, 8003c24 <_realloc_r+0x20>
 8003c1a:	f7ff ff4d 	bl	8003ab8 <_free_r>
 8003c1e:	4625      	mov	r5, r4
 8003c20:	4628      	mov	r0, r5
 8003c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c24:	f000 f830 	bl	8003c88 <_malloc_usable_size_r>
 8003c28:	42a0      	cmp	r0, r4
 8003c2a:	d20f      	bcs.n	8003c4c <_realloc_r+0x48>
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	4638      	mov	r0, r7
 8003c30:	f7ff ff8e 	bl	8003b50 <_malloc_r>
 8003c34:	4605      	mov	r5, r0
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d0f2      	beq.n	8003c20 <_realloc_r+0x1c>
 8003c3a:	4631      	mov	r1, r6
 8003c3c:	4622      	mov	r2, r4
 8003c3e:	f7ff ff13 	bl	8003a68 <memcpy>
 8003c42:	4631      	mov	r1, r6
 8003c44:	4638      	mov	r0, r7
 8003c46:	f7ff ff37 	bl	8003ab8 <_free_r>
 8003c4a:	e7e9      	b.n	8003c20 <_realloc_r+0x1c>
 8003c4c:	4635      	mov	r5, r6
 8003c4e:	e7e7      	b.n	8003c20 <_realloc_r+0x1c>

08003c50 <_sbrk_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	2300      	movs	r3, #0
 8003c54:	4d05      	ldr	r5, [pc, #20]	; (8003c6c <_sbrk_r+0x1c>)
 8003c56:	4604      	mov	r4, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	f7fd fab2 	bl	80011c4 <_sbrk>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d102      	bne.n	8003c6a <_sbrk_r+0x1a>
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	b103      	cbz	r3, 8003c6a <_sbrk_r+0x1a>
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
 8003c6c:	200001f4 	.word	0x200001f4

08003c70 <__malloc_lock>:
 8003c70:	4801      	ldr	r0, [pc, #4]	; (8003c78 <__malloc_lock+0x8>)
 8003c72:	f000 b811 	b.w	8003c98 <__retarget_lock_acquire_recursive>
 8003c76:	bf00      	nop
 8003c78:	200001fc 	.word	0x200001fc

08003c7c <__malloc_unlock>:
 8003c7c:	4801      	ldr	r0, [pc, #4]	; (8003c84 <__malloc_unlock+0x8>)
 8003c7e:	f000 b80c 	b.w	8003c9a <__retarget_lock_release_recursive>
 8003c82:	bf00      	nop
 8003c84:	200001fc 	.word	0x200001fc

08003c88 <_malloc_usable_size_r>:
 8003c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c8c:	1f18      	subs	r0, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bfbc      	itt	lt
 8003c92:	580b      	ldrlt	r3, [r1, r0]
 8003c94:	18c0      	addlt	r0, r0, r3
 8003c96:	4770      	bx	lr

08003c98 <__retarget_lock_acquire_recursive>:
 8003c98:	4770      	bx	lr

08003c9a <__retarget_lock_release_recursive>:
 8003c9a:	4770      	bx	lr

08003c9c <_init>:
 8003c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9e:	bf00      	nop
 8003ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ca2:	bc08      	pop	{r3}
 8003ca4:	469e      	mov	lr, r3
 8003ca6:	4770      	bx	lr

08003ca8 <_fini>:
 8003ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003caa:	bf00      	nop
 8003cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cae:	bc08      	pop	{r3}
 8003cb0:	469e      	mov	lr, r3
 8003cb2:	4770      	bx	lr
